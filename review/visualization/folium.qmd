---
title: folium 기본 지식 공유
date: 2022/10/31
updated: last-modified
format:
    html:
        code-fold: true
---

## 설치

- [공식 문서](https://python-visualization.github.io/folium/installing.html#installation){target=_blank}
- conda install folium -c conda-forge <- 아나콘다 사용자 추천
- 또는 pip install folium

## 일단 지도를 띄워보자

```{python}
import folium

m = folium.Map()
m
```

## 내가 있는 위치를 띄워보자

위도, 경도 구하기

- 다른 나라: 구글맵스에서 우측 버튼으로 클릭하면 보임
- 우리나라: 구글어스 주소창. [geoplaner.com](https://www.geoplaner.com/)
- 주소 -> 위경도: [다울주소전환서비스](https://address.dawul.co.kr/)

지도 표시 옵션

- location = [위도, 경도]
- width, height 기본값 100%. pixel 단위로 입력 가능
- zoom_start 기본값 10, 0 ~ 18


```{python}
m = folium.Map(location=[37.46854308,126.88626333], zoom_start=15, width=1024, height=600)
m
```

## 내가 있는 위치에 마커 표시하기


```{python}
m = folium.Map(location=[37.46854308,126.88626333], zoom_start=15)

folium.Marker([37.46854308,126.88626333]).add_to(m)

m
```

### 마커 옵션

Marker(location=None, popup=None, tooltip=None, icon=None, draggable=False, **kwargs)

- popup: 마커 이름. 클릭하면 나타남. html 태그 사용 가능
- tooltip: 마우스를 올렸을 때 나타나는 문자열. html 태그 사용 가능
- icon: 아이콘 모양, 색상. prefix='fa' 설정하면 [fontawesome](https://fontawesome.com/icons?d=gallery)의 아이콘 사용할 수 있음
- draggable: True -> 마커를 움직일 수 있음


```{python}
m = folium.Map(location=[37.46854308,126.88626333], zoom_start=15)

folium.Marker([37.46854308,126.88626333], icon=folium.Icon(color='red', icon='car', prefix='fa'), popup='<h1>독산</h1>', tooltip='빅데이터반', draggable=True).add_to(m)

m
```

### 마커 여러 개 추가하기


```{python}
m = folium.Map(location=[37.46854308,126.88626333], zoom_start=10)

folium.Marker([37.46854308,126.88626333], icon=folium.Icon(color='red', icon='car', prefix='fa'), popup='<h1>독산</h1>', tooltip='독산').add_to(m)
folium.Marker([37.55277,126.98969], icon=folium.Icon(color='red', icon='home', prefix='fa'), tooltip='남산').add_to(m)
folium.Marker([37.57101,126.89623], icon=folium.Icon(color='red', icon='car', prefix='fa'), tooltip='마포').add_to(m)
folium.Marker([37.50721,126.76684], icon=folium.Icon(color='red', icon='car', prefix='fa'), tooltip='부천').add_to(m)
m
```

## 원 모양 마커 그리기

- Circle(location=None, radius=50, popup=None, tooltip=None, **kwargs)¶

```{python}
m = folium.Map(location=[37.46854308,126.88626333], zoom_start=10)

folium.CircleMarker([37.46854308,126.88626333], radius=10, popup='<h1>독산</h1>', tooltip='10').add_to(m)
folium.CircleMarker([37.55277,126.98969], radius=30, tooltip='30').add_to(m)
folium.CircleMarker([37.57101,126.89623], radius=50, tooltip='50').add_to(m)
folium.CircleMarker([37.50721,126.76684], radius=70, tooltip='70').add_to(m)
m
```

## 표시할 마커가 100개라면 어떻게 할까?

- 데이터프레임에 위경도를 입력한 후 for문을 이용해 마커 찍기

```{python}
import pandas as pd

df = pd.read_csv('data/pet_man.csv')
df.head(3)
```

### 관공서 위치에 마커를 달고 툴팁에 시군명과 총인구수를 표시하자.

```{python}
m = folium.Map(
    location = [37.528043, 126.980238],
    zoom_start = 8)

lat = list(df['위도'])
long = list(df['경도'])
si = list(df['시군명'])
population = list(df['총인구수'])

for i in range(len(lat)):
    folium.Marker(
            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>총인구수: {str(population[i])}',
            icon=folium.Icon(color='red')
            ).add_to(m)

m
```

## 코로플레스 맵 만들기

- 준비물1: 행정구역경계 정보가 담긴 geojson 파일
- 준비물2: 지도에 표시할 데이터(행정구역명, 숫자)

**중요!!** 데이터의 행정구역명과 geojson 파일의 행정구역명이 같아야 함

geojson 파일 받은 곳: [대한민국 행정동 경계 파일](https://github.com/vuski/admdongkor){target=_blank}

[geojson 데이터에 관한 설명](https://dailyheumsi.tistory.com/141){target=_blank}

### geojson 파일 구조

```{json}
{
"type": "FeatureCollection",
"name": "20220701",
"crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:OGC:1.3:CRS84" } },
"features": [
{ "type": "Feature", "properties": { "OBJECTID": 1, "adm_nm": "서울특별시 종로구 사직동", "adm_cd": "1101053", "adm_cd2": "1111053000", "sgg": "11110", "sido": "11", "sidonm": "서울특별시", "sggnm": "종로구", "adm_cd8": "11010530" }, "geometry": { "type": "MultiPolygon", "coordinates": [ [ [ [ 126.976888842748167, 37.575650779448786 ], [ 126.977034498877501, 37.569194530054553 ], [ 126.975974728212492, 37.569336299425764 ], [ 126.975374709912543, 37.569315567021562 ], [ 126.974331935623255, 37.569261800517531 ], [ 126.969048370018541, 37.568194417708334 ], [ 126.968544936033837, 37.568427679612761 ], [ 126.966649959821197, 37.569491655206583 ], [ 126.966281750244846, 37.569700734798701 ], [ 126.966097327080405, 37.569856509723699 ], [ 126.965728529225771, 37.570183936115114 ], [ 126.965926998221278, 37.570318805686199 ], [ 126.96601094018429, 37.571548395577466 ], [ 126.963659220521961, 37.575174660660373 ], [ 126.963086004345101, 37.576485920015543 ], [ 126.962840990511978, 37.57666158609274 ], [ 126.962810410472628, 37.579448809656775 ], [ 126.967424315843317, 37.579601537124489 ], [ 126.967421763026508, 37.579263521441646 ], [ 126.967430060184597, 37.579192577998604 ], [ 126.967457090095607, 37.578975250585437 ], [ 126.968066046996256, 37.578246780467872 ], [ 126.968955116954774, 37.577935262340283 ], [ 126.969212842969057, 37.577935299309388 ], [ 126.969414538865792, 37.578121124142164 ], [ 126.969664426694706, 37.578531136682209 ], [ 126.969667219148718, 37.578736205134931 ], [ 126.969668773533087, 37.578992879009881 ], [ 126.969669499103631, 37.57911252674959 ], [ 126.969904573616262, 37.579301753628734 ], [ 126.97135197544759, 37.57951327793981 ], [ 126.973819257844539, 37.579372140302631 ], [ 126.973917363383421, 37.578487073041011 ], [ 126.973939619980882, 37.578240429978088 ], [ 126.974331538357575, 37.575749906299862 ], [ 126.975803789978045, 37.575649468824203 ], [ 126.976888842748167, 37.575650779448786 ] ] ] ] } },
]}
```

### folium.Choropleth() 함수 활용

- 기본 사용법은 마터 추가와 같다. folium.Choropleth().add_to(m)
- geo_data: geojson 파일을 저장한 변수
- data = 데이터프레임 변수
- columns = ['키', '값']
- key_on = geojson 파일에서 시군명의 키 경로를 입력한다. 요 부분은 정확하게 모르겠다. 시군명은 sggnm 키에 저장되어 있으니 sggnm 부터 상위 경로를 점으로 구분해서 적으면 될 것 같은데 features가 아니라 feature부터 시작하는 게 이상하다.
- fill_color = 색상을 적는다.
- fill_opacity = 투명도를 지정한다. 
- line_opacity = 행정경계선의 투명도를 지정한다.
- legend_name = 범례 타이틀을 입력한다.

folium.LayerControl()은 없어도 작동을 한다. 여기서는 빼도 될 것 같다.

```{python}
import json

m = folium.Map(
    location = [37.528043, 126.980238],
    zoom_start = 8)

lat = list(df['위도'])
long = list(df['경도'])
name = list(df['등록동물수'])
si = list(df['시군명'])

for i in range(len(lat)):
    folium.Marker(
            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>반려동물수: {str(name[i])}',
            icon=folium.Icon(color='red')
            ).add_to(m)

    
geo_data = json.load(open('data/HangJeongDong_ver20220701.geojson', encoding='UTF8'))

folium.Choropleth(
    geo_data = geo_data,
    data = df,
    columns= ['시군명', '등록동물수'],
    key_on = 'feature.properties.sggnm',
    fill_color = 'Reds',
    fill_opacity = 0.7,
    line_opacity = 0.4,
    legend_name = '시군별 등록 반려동물수(마리))'
).add_to(m)

folium.LayerControl().add_to(m)

m
```

위에서 까맣게 표시되는 이유는 geojson 파일에 있는 행정구역명칭이 데이터프레임의 '시군명' 컬럼에는 없기 때문이다. 

따라서 geojson 파일을 편집하여 데이터프레임에 있는 '시군명'만 남기고 삭제한다.

그렇게 편집한 파일이 'kyeong.geojson'이다. 이 파일을 불러와서 다시 지도를 띄우자

**주의!!!** geojson 파일을 불러올 때 cp949 인코딩 에러가 나는 경우가 있다. 이럴 때는 위 코드처럼 open() 함수 안에 encoding='utf8' 옵션을 넣는다.


```{python}
import json

m = folium.Map(
    location = [37.528043, 126.980238],
    zoom_start = 8)

lat = list(df['위도'])
long = list(df['경도'])
name = list(df['등록동물수'])
si = list(df['시군명'])

for i in range(len(lat)):
    folium.Marker(
            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>반려동물수: {str(name[i])}',
            icon=folium.Icon(color='red')
            ).add_to(m)

    
geo_data = json.load(open('data/kyeong.geojson', encoding='UTF8'))

folium.Choropleth(
    geo_data = geo_data,
    data = df,
    columns= ['시군명', '등록동물수'],
    key_on = 'feature.properties.sggnm',
    fill_color = 'Reds',
    fill_opacity = 0.7,
    line_opacity = 0.4,
    legend_name = '시군별 등록 반려동물수(마리))'
).add_to(m)

# folium.LayerControl().add_to(m)

m
```

완성!!!
