---
title: "10장 서로소 집합을 활용한 사이클 판별 p277"
date: 2022-11-01
---

서로소 집합은 무방향 그래프 내에서 사이클이 있는지 판별할 때 사용할 수 있다.

## 알고리즘

1. 두 노드의 루트 노트 확인
    1. 루트 노드가 다르면 두 노드에 대하여 union 연산
    2. 루트 노드가 같으면 사이클 발생
2. 모든 간선에 대해 1번 반복

```{mermaid}
graph TD
    1(1) --- 2(2)
    1(1) --- 3(3)
    2(2) --- 3(3)
```

## 구현

1. 변수 선언
    1. 노드, 간선 개수 수치형: 3, 3
    2. 부모 테이블 리스트 = 노드 개수 + 1
    3. 부모 테이블 값을 자신으로 초기화(인덱스-노드, 값-부모)
    4. 그래프 정보 = [[1, 2], [1, 3], [2, 3]] 
    5. 사이클 발생 여부 출력 bool
2. 그래프의 각 노드를 돌며 각 노드의 부모 찾아 
    1. 같으면 사이클 발생
    2. 다르면 노드 합침 <- 왜? 입력된 두 노드는 그래프 변수에 쌍으로 담겨있음. 간선으로 서로 연결되어 있음을 의미한다.

```{python}
# 특정 원소가 속한 집합 찾기(특정 원소의 루트 노드 반환)
def find_parent(parent, x):
    if parent[x] != x:
        return find_parent(parent, parent[x])
    return parent[x]

# 두 원소가 속한 집합 합치기(두 원소는 그래프에서 간선으로 연결되어 있음)
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    if a < b:
        parent[b] = a
    else:
        parent[a] = b

# 변수 생성 및 초기화
v, e = 3, 3
graph = [[1, 2], [1, 3], [2, 3]] 
cycle = False

# 부모 테이블 생성 및 초기화
parent = [0] * (v + 1) # 인덱스를 노드로 사용하기 때문에 v+1. 0번 인덱스는 사용 안 함
for i in range(1, v + 1):
    parent[i] = i
     
for i in graph:
    a, b = i
    if find_parent(parent, a) == find_parent(parent, b):
        cycle = True
        break
    else:
        union_parent(parent, a, b)

if cycle:
    print('사이클 발생')
else:
    print('사이클 미발생')
```
