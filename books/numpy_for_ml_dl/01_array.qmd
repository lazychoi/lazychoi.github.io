---
title: 01장 파이썬과 넘파이 모듈 차이점 p9
date: 2022-11-01
---

파이썬 리스트는 실제 원소의 객체를 저장하는 것이 아니라 객체의 레퍼런스를 저장한다. **넘파이 모듈의 기본 배열은 다원 배열인 ndarray 클래스의 객체다.**  이 배열은 하나의 자료형으로 만들어진 원소들을 보관하는 컨테이너이다.

![](https://numpy.org/doc/stable/_images/threefundamental.png)

넘파이는 위 그림처럼 일렬로 원소를 관리한다. 구체적인 설명이 없어 이해가 안 된다.

버전 확인: `__version__`

```{python}
import numpy as np
np.__version__
```

클래스 이름 조회: `__name__`

```{python}
np.ndarray.__name__
```

클래스 속성과 메서드를 관리하는 이름공간(namespace) 출력 -> var에 저장됨

```{python}
type(np.ndarray.var)
```

ndarray 클래스에 정의된 속성과 메서드 확인. np.ndarray.__dict__와 np.ndarray.var의 차이를 잘 모르겠다.

```{python}
for i in dir(np.ndarray):   # dir -> 이름공간 내의 속성과 메소드 이름을 리스트로 반환
    if not i.startswith("_"):  # 파이썬 스페셜 속성과 메서드는 밑줄로 시작하니 이를 제외
        if type(np.ndarray.__dict__[i]) != type(np.ndarray.var): 
            print(i)
```

다차원 배열은 실제 데이터를 관리하는 속성과 이 데이터의 정보를 관리하는 메타 속성을 구분해서 관리한다.

- 데이터를 관리하는 속성: ndarray.data -> 주소값 반환
- 저장된 값 출력: ndarray.data.object

```{python}
i = [1, 2, 3, 4]
arr = np.array(i)
print('type(arr): ', type(arr))

print('arr.data: ', arr.data)
print('arr.data.obj: ', arr.data.obj)
print('type(arr.data.obj): ', type(arr.data.obj))
```

base는 다차원배열의 메모리를 공유할 때 원본 레퍼런스 저장. 동일한 배열을 공유하는 구조라서 base에는 아무 것도 없다는 말이 잘 이해되지 않는다.

```{python}
b = arr
print('b.base is arr.base -> ', b.base is arr.base)
print(arr.base, b.base)
```

ndarry를 만들 때 자료형 지정

```{python}
c = np.array(i, dtype=float)
c
```


```{python}

```


```{python}

```

## 더 읽어볼 만한 글

[파이썬 리스트 구조 Python list implementation](http://www.laurentluce.com/posts/python-list-implementation/){target=_blank}

