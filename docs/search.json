[
  {
    "objectID": "visualization/pyplot.html",
    "href": "visualization/pyplot.html",
    "title": "pyplot",
    "section": "",
    "text": "권철민, 파이썬 머신러닝 완벽 가이드\nmatplotlib tutorial\nIntroduction to Plotting in Python Using Matplotlib"
  },
  {
    "objectID": "visualization/pyplot.html#주피터-노트북에서-한글-표시-설정",
    "href": "visualization/pyplot.html#주피터-노트북에서-한글-표시-설정",
    "title": "pyplot",
    "section": "주피터 노트북에서 한글 표시 설정",
    "text": "주피터 노트북에서 한글 표시 설정"
  },
  {
    "objectID": "visualization/pyplot.html#figure-axes-객체",
    "href": "visualization/pyplot.html#figure-axes-객체",
    "title": "pyplot",
    "section": "Figure, Axes 객체",
    "text": "Figure, Axes 객체\n\nFigure 객체: 그림 그리기 위한 캔버스 역할. 그림판 크기 조절, 그림을 최종적으로 화면에 나타내는 역할 수행. 실제 그림을 그리지는 않음\nAxes 객체: 실제 그림을 그리는 메서드 보유. X축, Y축, 타이틀, 범례 등의 속성 설정\n\n\n\n\nFigure, Axis\n\n\nFigure 객체\n\n전체 그림판의 크기를 조절: plt.figure(figsize=(가로길이, 세로길이)) 길이 단위는 인치 -> figure 객체 반환\n그림판 배경색 설정: plt.figure(facecolor=‘색상명’) -> Axes 영역 제외\n\n\n\n\n배경색상 설정\n\n\nAxes 객체\nplt.axes() -> 현재 사용중인 Axes 객체 반환(AxesSubplot)\nplt.subplots() -> Figure와 Axes 객체를 함께 반환\nfig, ax = plt.subplots()\nprint('fig type', type(fig), '\\nax type', type(ax))\n# fig type <class 'matplotlib.figure.Figure'> \n# ax type <class 'matplotlib.axes._subplots.AxesSubplot'>\n\nAxes 객체를 이용해 선 그래프 그리기: ax.plot([1, 2, 3], [2, 4, 6]) = pyplot 모듈의 plt.plot()\nAxes 객체를 이용해 타이틀 설정: ax.title(‘title’) = pyplot 모듈의 plt.title()"
  },
  {
    "objectID": "visualization/pyplot.html#subplots-만들기",
    "href": "visualization/pyplot.html#subplots-만들기",
    "title": "pyplot",
    "section": "subplots 만들기",
    "text": "subplots 만들기\n\nfig, (ax1, ax2, …) = plt.subplots(nrows = n, ncols = m, figsize = (x, y))\nax의 개수는 n * m"
  },
  {
    "objectID": "visualization/pyplot.html#선-그래프",
    "href": "visualization/pyplot.html#선-그래프",
    "title": "pyplot",
    "section": "선 그래프",
    "text": "선 그래프\n\n공식 문서\nplt.plot( x_value, y_value, color=, marker=, linestyle=, linewidth=, markersize=)\n축 명칭: plt.xlabel(‘x축 이름’), plt.ylabel(‘y축 이름’)\n축 눈금값 등: plt.xticks(ticks=np.arange(a, b, c), rotation=n) -> 최솟값, 최댓값, 간격"
  },
  {
    "objectID": "de.html",
    "href": "de.html",
    "title": "개발 환경",
    "section": "",
    "text": "Oct 14, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pkm.html",
    "href": "pkm.html",
    "title": "지식 관리",
    "section": "",
    "text": "Oct 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "books/tiny_python_project.html",
    "href": "books/tiny_python_project.html",
    "title": "목차",
    "section": "",
    "text": "Oct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nlazychoi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html",
    "title": "Pandas in Action 키워드",
    "section": "",
    "text": "생성자: data, index, dtype\ndata: 딕셔너리, 리스트, 튜플 자료형, numpy ndarray. but 집합 자료형은 안 됨(순서, 연관이 없기 때문)\nindex 사용자 정의\ndtype 지정으로 형변환\n결측값 입력: np.nan\n\n\n\n\n\n시리즈.index, 시리즈.dtype, 시리즈.size, 시리즈.shape, 시리즈.values\n시리즈.is_unique, 시리즈.is_monotonic\n\n\n\n\n\n시리즈.head([n]), 시리즈.tail([n])\n수학 연산:\n\n인덱스(라벨)가 같은 것끼리 연산.\n결측값 무시\n시리즈.count(), 시리즈.sum(skipna=True, min_count=0), 시리즈.product(skipna=True, min_count=0)\n시리즈.mean(), 시리즈.median(), 시리즈.std(), 시리즈.max(), 시리즈.min()\n시리즈.cumsum(skipna=True), 시리즈.pct_change([fill_method=])\n시리즈.describe(), 시리즈.sample(), 시리즈.unique(), 시리즈.nunique()\n산술 연산:\nNaN과 연산할 때 NaN 반환\n’+, -, *, /, //, %, ==, !=’ 연산자\n시리즈.add([스칼라 or 시리즈]), 시리즈.sub([스칼라 or 시리즈]), 시리즈.subtract([스칼라 or 시리즈]), 시리즈.mul([스칼라 or 시리즈]), 시리즈.multiply([스칼라 or 시리즈]), 시리즈.div([스칼라 or 시리즈]), 시리즈.divide([스칼라 or 시리즈]), 시리즈.floordiv([스칼라 or 시리즈]), 시리즈.mod([스칼라 or 시리즈]), 시리즈.eq([스칼라 or 시리즈]), 시리즈.ne([스칼라 or 시리즈])\n\n시리즈를 파이썬 함수 인자로 전달 가능: len(시리즈), list(시리즈), dict(시리즈), ‘값’ [not] in 시리즈.values\n\n주의!!!\n\nnp.nan == np.nan => False\nlen(시리즈) => NaN 포함\nNaT: not a time\n\n\n\n\n\n아래 모든 메서드는 새로운 시리즈 반환.\n자신을 바꾸려면 inplace=True 옵션 추가(None 반환) => 성능 이점 없으니 사용하지 말 것\npd.read_csv(‘csv파일명’):\n\nindex_col=‘열이름’\nsqueeze=True : 데이터프레임 자료형을 시리즈 자료형으로 변환. but deprecated\nparse_dates=[‘열이름’] : 날짜 형식의 문자열 -> 날짜 자료형\nusecols=[‘열이름, ’열이름’] : 가져올 열이름 지정. 시리즈로 가져올 때는 최대 2개\n\nvalue 기준 정렬:\n\n시리즈.sort_values(), 시리즈.sort_values(ascending=False)\nna_position=‘last/first’: NaN 배치(default=last)\n\nindex 기준 정렬: 날짜 인덱스일 때 주로 사용\n\n시리즈.sort_index(), 시리즈.sort_index(ascending=False)\n\n결측값 제거: 시리즈.dropna()\n최고[저]값 n개: 시리즈.nlargest(n), 시리즈.nsmallest(n)\n값 별 개수: 시리즈.value_counts()\n\nascending=False/True\nnormalize=False/True\nbins=[] : 구간을 정해 개수 세기. eg. bins = 5 or [0, 200, 400, 600, 800]\nsort=False : 인덱스 순으로 출력\ndropna=False: NaN 개수도 세기\n\n반올림: 시리즈.round(n) n=출력할 소숫점 자리수\n시리즈.apply(함수) : 시리지의 각 값에 대해 한 번씩 함수를 호출하고 반환값을 시리즈로 구성해 새 시리즈를 반환"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#dataframe",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#dataframe",
    "title": "Pandas in Action 키워드",
    "section": "DataFrame",
    "text": "DataFrame\n\n생성\n\n중복된 행, 중복된 열 인덱스를 허용하지만 가능한 고유값으로 하는 게 좋음\npd.DataFrame(data)\n\ndictionary, list, tuple, ndarray (iterable) -> DataFrame\ncolumns = [‘col1’,‘col2’,…]\n\n\n\n\n속성\n\ndf변수.index -> RangeIndex(start, end, steps) 반환\ndf변수.columns -> Index 반환\ndf변수.shape\ndf변수.size(NaN 포함) cf. NaN 포함한 개수 : df변수.count()\n\n\n\n메서드\n\ndf변수.sum([numeric_only=True]), df변수.mead([numeric_only=True]), df변수.median([numeric_only=True]), df변수.mode([numeric_only=True]), df변수.std([numeric_only=True])\ndf변수.max(), df변수.min()\ndf변수.nunique() : 열 별로 고윳값 개수 나타내는 Series 반환\ndf변수.nlargest(n, columns=[‘col1’, ‘col2’]), df변수.smallest()\n\n\n\n정렬 및 인덱스\n\n한 열 기준으로 정렬: df변수.sort_values(‘열이름’, ascending=True/False)\n여러 열 기준으로 정렬: df변수.sort_values([‘열이름’, ‘열이름’, …], ascending=True/False)\n각 열을 다른 순서로 정렬: df변수.sort_values([‘열이름’, ‘열이름’, …], ascending=[True, False])\n행 인덱스 기준으로 정렬: df변수.sort_index(ascending=True/False)\n열 인덱스 기준으로 정렬: df변수.sort_index(axis=‘columns’, ascending=True/False) or df변수.sort_index(axis=1)\ndf변수 정렬을 최초 상태로 되돌리기: df변수 = df변수.sort_index()\n새 인덱스 설정: df변수 = df변수.set_index(‘열이름’)\n인덱스를 일반 컬럼로 바꾸기: df변수.reset_index()\n기존 인덱스를 일반 컬럼으로 바꾸고 새 인덱스 설정: df변수 = df변수.reset_index().set_index(‘열이름’)\n\n\n\n열과 행 선택 및 이름 바꾸기\n\n열 선택\n\n다중 열 선택: df변수[‘열이름’], df변수[[‘열이름’,‘열이름’,…]]\n데이터 유형에 따라 열 선택(eg. 문자형 열만 선택): df변수.select_dtypes(include=‘object’)\n데이터 유형에 따라 열 선택(eg. 문자형 및 정수 열 제외한 모든 열 선택): df변수.select_dtypes(exclude=[‘object’, ‘int’])\n\n행 선택\n\n레이블 선택: df변수.loc[[‘행이름’, ‘행이름’, …]]\n슬라이싱 활용: df변수.loc[‘행이름’ : ], df변수.loc[ : ‘행이름’], df변수.loc[‘행이름’ : ‘행이름’]\n인덱스 위치 선택: df변수.iloc[n], df변수.iloc[n:m], df변수.iloc[n:m:step], df변수.iloc[[m, n, o, …]]\n\n열, 행 함께 고려하여 선택\n\n셀 값: df변수.loc[‘행이름’, ‘열이름’], df변수.iloc[m, n], df변수.at[‘행이름’, ‘열이름’], df변수.iat[행번호, 열번호]\n한 행의 여러 컬럼 값 선택: df변수.loc[‘행이름’, [‘열이름’, ‘컬러명’]], df변수[‘행이름’, ‘열이름’:‘열이름’], df변수.iloc[n, [m, o]], df변수.iloc[n, [m : o]]\n여러 행의 여러 컬럼 값 선택: df변수.loc[[‘행이름’, ‘행이름’], [‘열이름’, ‘열이름’]]\n\n이름 바꾸기\n\n열이름 가져오기: df변수.columns\n열이름 일부 변경: df변수 = df변수.rename(columns = {‘구이름’:‘새이름’})\n행이름 일부 변경: df변수 = df변수.rename(index = {‘구이름’:‘새이름’})\n\n열 삭제\n\ndf변수 = df변수.drop(labels=‘열이름’, axis=‘columns’)"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#데이터셋-변환으로-메모리-최적화",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#데이터셋-변환으로-메모리-최적화",
    "title": "Pandas in Action 키워드",
    "section": "데이터셋 변환으로 메모리 최적화",
    "text": "데이터셋 변환으로 메모리 최적화\n\n최적의 데이터 유형: 가장 적은 메모리 사용 or 가장 많은 유틸리티 제공 데이터 유형\n날짜/시간 유형으로 변환: pd.read_csv(parse_dates=[‘열이름’])\n데이터셋의 용량 확인: df변수.info()\n데이터 형변환: df변수[‘열이름’] = df변수[‘열이름’].astype(자료형)\nNaN이 있으면 정수값만 있어도 float64 -> NaN을 정수로 바꾼 뒤 정수형으로 변환: df변수[‘열이름’].fillna(0).astype(int)\n소수의 고유값으로 구성된 열 -> 범주형: df변수[‘gender’] = df변수[‘gender’].astype(‘category’)"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#dataframe-필터링",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#dataframe-필터링",
    "title": "Pandas in Action 키워드",
    "section": "Dataframe 필터링",
    "text": "Dataframe 필터링\n\n반환되는 boolean 시리즈 활용\n==(eq), !=(ne), <(lt), <=(le), >(gt), >=(ge), &, |, ~\n여러 개의 문자열이 포함된 행 필터링(or): df변수[‘열이름’].isin([‘찾을 문자열’, ‘찾을 문자열’, …])\n범위 내의 데이터 필터링(숫자, 날짜, 문자): df변수[‘열이름’].between(시작, 끝)\n결측값만 필터링: df변수[‘열이름’].isnull()\n결측값이 아닌 행만 필터링: df변수[‘열이름’].notnull()"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#결측값-다루기",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#결측값-다루기",
    "title": "Pandas in Action 키워드",
    "section": "결측값 다루기",
    "text": "결측값 다루기\n\n결측값이 포함된 행 삭제: df변수.dropna(how=‘any/all’)\n특정 열에 결측값이 있는 행 삭제: df변수.dropna(subset=[‘열이름’])\n비결측값이 최소 n개인 행만 남김: df변수.dropna(thresh = n)\n결측값를 특정값으로 바꾸기: df변수.fillna(바꿀값)"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#중복값-다루기",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#중복값-다루기",
    "title": "Pandas in Action 키워드",
    "section": "중복값 다루기",
    "text": "중복값 다루기\n\n반환되는 boolean 시리즈 활용\nduplicated\n열에서 이전에 한 번이라도 본 적이 있는 값은 모두 True 표시: df변수[‘열이름’].duplicated()\n특정 열에서 고유한 값의 첫 번째 행만 필터링: df변수[ ~df변수[‘열이름’].duplicated() ]\n<- duplicated()는 동일한 값 중 두번째 값부터 True를 반환하기 때문에 반대로 뒤집으면(~) 중복되지 않은 값 중 첫 번째 행만 출력됨\n행의 모든 값이 일치하는 행 제거: df변수.drop_duplicates()\n특정 열에서 중복값 제거(특정 값이 처음 나타나는 행만 유지): df변수.drop_duplicates(subset=[‘열이름’])\n특정 열에서 중복값 제거(특정 값이 마지막 나타나는 행만 유지): df변수.drop_duplicates(subset=[‘열이름’], keep=’last)\n특정 열에서 중복값 모두 제거(첫번째나 마지막 값도 삭제): df변수.drop_duplicates(subset=[‘열이름’], keep=False)"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-텍스트-데이터-다루기",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-텍스트-데이터-다루기",
    "title": "Pandas in Action 키워드",
    "section": "6장 텍스트 데이터 다루기",
    "text": "6장 텍스트 데이터 다루기\n\n랭글링(wrangling), 먼징(munging): 데이터를 정리하는 과정\n시리즈 객체의 str 속성 사용하면 강력한 문자열 처리 메서드를 제공하는 StringMethods 객체에 접근 가능: df변수[‘object 컬럼’].str\n공백 제거: df변수[‘object 컬럼’] = df변수[‘object 컬럼’].str.strip()/lstrip()/rstrip()\n모든 컬럼에 문자열 함수 적용: for column in df변수.columns: ; df[column] = df[column].str.strip()\ndf변수[‘object 컬럼’].str.upper()/lower()/capitalize()/title()\ndf변수[‘object 컬럼’].str.replace()\n슬라이싱은 파이썬과 같음: df변수[‘object 컬럼’].str[시작인덱스:끝인덱스]\n특정 단어가 포함된 행 필터링: has_pizza = df변수[‘object 컬럼’].str.lower().str.contains(‘pizza’) ; df변수[has_pizza] <- 대소문자 구분 없애기 위해 먼저 소문자로 변환\n특정 문자로 시작하는 단어 찾기: df변수[‘object 컬럼’].str.lower().str.startstwith(‘문자’)\n특정 문자로 끝나는 단어 찾기: df변수[‘object 컬럼’].str.lower().str.endstwith(‘문자’)\n문자열 크기: df변수[‘object 컬럼’].str.len()\n문자열 분할 개수 지정: df변수[‘object 컬럼’].str.split(pat = ” “, n = 1) -> 첫 번째 공백만 분할 -> 2개 요소를 지닌 리스트 반환\n문자열의 첫 번째 글자만 가져오기: df변수[‘object 컬럼’].str.get(0)\n공백으로 분할한 문자의 두 번째 단어만 가져오기: df변수[‘object 컬럼’].str.split(pat = ” “, n = 1).str.get(1)\n공백으로 분할한 문자의 마지막 단어만 가져오기: df변수[‘object 컬럼’].str.split(pat = ” “, n = 1).str.get(-1)\n공백으로 분할한 문자를 새로운 데이터프레임으로 반환: df변수[‘object 컬럼’].str.split(pat = ” “, n = 1, expand = True)\n정규표현식 지원: df변수[‘열이름’].str.repalce(to_replace, value, regex = True)"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-멀티-인덱스-데이터프레임",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-멀티-인덱스-데이터프레임",
    "title": "Pandas in Action 키워드",
    "section": "7장 멀티 인덱스 데이터프레임",
    "text": "7장 멀티 인덱스 데이터프레임\n\n멀티 인덱스, 멀티 컬럼 생성\n\n한 열의 값이 다른 열 값의 하위범주인 계층적 데이터 표현에 좋음\nMultiIndex : 각 레이블에 여러 값을 보유하는 컨테이너\n레벨: 레이블에서 동일한 위치에 있는 값\n멀티 row_index = pd.MultiIndex.from_tuples(tuples, names= [‘레벨1’, ’레벨2]) ; pd.DataFrame(row_index=row_index)\n멀티 column_index = pd.MultiIndex.from_tuples(tuples) ; pd.DataFrame(columns=column_index)\n멀티 인덱스와 헤더가 적용된 csv 파일 불러오기: read_csv(‘파일명’, index_col=[0, 1, 2, …], header = [0, 1, …])\n멀티 인덱스 이름 가져오기: df변수.index.names\n인덱스 레벨에 해당하는 이름 가져오기: df변수.index.get_level_values(인덱스/이름)\n멀티 컬럼에 이름 지정하기: df변수.columns.names = [‘Category’, ‘Subcategory’]\n컬럼 레벨에 해당하는 이름 가져오기: df변수.columns.get_level_values(인덱스/이름)\n\n\n\n멀티 인덱스 정렬 <- 데이터가 아니라 인덱스 이름 순으로 정렬\n\ndf변수.sort_index(): 가장 왼쪽의 인덱스부터 오름차순으로 정렬. 내림차순은 ascending=False 매개변수 추가\n각 레벨의 정렬 순서를 다르게 지정: df변수.sort_index(ascending = [True, False, True, …])\n지정한 레벨만 정렬: df변수.sort_index(level = [인덱스번호/이름, 인덱스번호/이름])\n열 정렬: df변수.sort_index(axis = 1/“columns”)\n\n\n\n멀티 인덱스 행, 열 선택\n\n공식 문서 참고\n서브카테고리 선택 -> 튜플로 감싼다: df변수[(‘주카테고리명’, ‘서브카테고리명’)]\n여러 개의 열 추출 -> 튜플을 대괄호로 감싼다: df변수[ [(‘주카테고리명’, ‘서브카테고리명’), (‘주카테고리명’, ‘서브카테고리명’)] ]\n인덱스명으로 행 추출 -> 왼쪽부터 적용: df변수.loc[ (‘인덱스명’, ‘인덱스명’, …)]\n행과 열을 이름으로 추출: df변수.loc[ (‘인덱스1레벨’, ‘인덱스2레벨’), (‘주카테고리’, ‘서브카테고리’) ]\ndf변수.iloc는 레벨에 걸쳐 인덱싱할 수 없다. 단순히 행, 열 순서에 따라 인덱싱, 슬라이싱 한다.\n특정 인덱스이름 값이 특정값인 데이터만 출력(eg. City 인덱스가 Seoul인 데이터만 출력): df변수.xs(key = ‘Seoul’, level = ‘City’)\n특정 열이름 값이 특정값인 데이터만 출력(eg. Subcategory가 Museum인 데이터만 출력): df변수.xs(axis = ‘columns’, key = ‘Museum’, level = ‘Subcategory’)\nxs 메서드에 비연속적인 key, level를 전달할 때는 튜플로 묶는다.\n\n\n\n멀티 인덱스 재설정\n\n멀티 인덱스를 지정한 순서대로 정렬: df변수.reorder_levels(order = [‘이름1’/번호, ‘이름2’/번호, …])\n멀티 인덱스를 새로운 열로 삽입하고 인덱스는 숫자로 대체: df변수.reset_index()\n\ncol_level = ‘Subcategory’ 열이름을 서브카데고리 레벨에 삽입\ncol_fill = ‘이름’ 빈 열이름에 지정한 이름 추가\nlevel = ‘인덱스명’ 지정한 인덱스명만 일반 열로 옮김. 인덱스명 여러 개를 리스트로 전달하면 지정한 레벨만 열로 이동.\nlevel = ‘인덱스명’, drop=True 지정한 레벨 삭제\n\n지정한 멀티 레벨 열을 인덱스로 설정: df변수.set_index(keys = (‘카테고리명’, ‘서브카테고리명’))"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-재구성과-피벗",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-재구성과-피벗",
    "title": "Pandas in Action 키워드",
    "section": "10장 재구성과 피벗",
    "text": "10장 재구성과 피벗\n\n피벗 테이블 생성\n\n특정 열(eg. 날짜) 별로 모든 숫자 열의 평균 집계: df변수.pivot_table()\n\nindex=‘열이름’ : 열이름을 인덱스명으로 사용. 열 리스트를 전달하면 MultiIndex\naggfunc = ‘mean/sum/max/min/std/median/count/size’ : 집계 함수 선택. size = count. 리스트로 여러 개 집계함수 지정[‘sum’, ‘count’]. 딕셔너리 형식으로 열별 다른 집계함수 지정{‘열이름’:‘집계함수’, ‘열이름’:‘집계함수’}\nvalues = ‘열이름’ : 집계 함수를 적용할 열 선택. 여러 열을 선택하려면 리스트로 지정\ncolumns = ‘열이름’ : 입력한 열의 고유값을 열 헤더로 지정\nfill_value = 숫자 : NaN을 지정한 값으로 대체\nmargins = True : 행별, 열별 합계 출력\nmargins_name = ‘Total’ : 합계 레이블 이름을 ’Total’로 지정\n\n\n\n\n인덱스 레벨 스택과 언스택\n\ndf변수.stack() : 열 인덱스 -> 행 인덱스. NaN은 사라짐\ndf변수.unstack() : 가장 우측 행 인덱스 -> 열 인덱스\n\n\n\nmelting, 피벗 해제\n\n넓은 데이터셋을 좁은 데이터셋으로 변환하는 과정\ndf변수.melt()\n\nid_vars = ‘식별자 열’\nvalue_vars = ‘피벗 해제되어 새 열에 저장될 열’ 여러 열을 지정하려면 리스트로 묶음 <- 생략 가능. 기본적으로 식별자 열을 제외한 모든 열을 피벗 해제\nvar_name = ‘열이름’\nvalue_name = ‘열이름’\n\n열에 있는 리스트 요소를 별도의 행으로 분리: df변수.explode(‘열이름’)"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-groupby-객체",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-groupby-객체",
    "title": "Pandas in Action 키워드",
    "section": "9장 GroupBy 객체",
    "text": "9장 GroupBy 객체\n\ndf변수.groupby(‘열이름’) -> DataFrameGroupBy 객체 반환. 열이름은 주로 범주형\n그룹명에 포함된 모든 행을 데이터프레임으로 반환 : GroupBy객체.get_group(‘그룹명’)\n각 그룹의 평균, 합계 등 계산 : GroupBy객체.mean()/sum()/max()/min()\n그룹과 행 개수를 알파벳 순서로 나열한 리스트로 구성된 시리즈 반환 : GroupBy객체.size()\n그룹을 key로, 그룹에 속한 행을 values 리스트로 구성된 딕셔너리 반환 : GroupBy객체.groups\n각 그룹의 첫 번째 행 추출. 부문별 가장 성과 높은 기업을 찾을 때 유용(매출액이 내림차순 정렬되었다면) : GroupBy객체.first()\n각 그룹의 마지막 행 추출 : GroupBy객체.last()\n각 그룹의 n번째 행 추출 : GroupBy객체.nth(n)\n각 그룹에서 n번째까지의 행 가져와 특정 수치형 열 기준으로 내림차순 정렬 : GroupBy객체.head(n)\n각 그룹에서 마지막에서 n번째까지의 행 가져와 특정 수치형 열 기준으로 내림차순 정렬 : GroupBy객체.tail(n)\n특정 열에 대해 그룹별로 합계 계산 : GroupBy객체[‘열이름’].sum()"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-병합-조인-연결",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-병합-조인-연결",
    "title": "Pandas in Action 키워드",
    "section": "10장 병합, 조인, 연결",
    "text": "10장 병합, 조인, 연결\n\ncsv 파일 불러올 때 특정 열의 데이터형의 변경 : pd.read_csv(‘파일명’, dtype = {‘열이름’:‘데이터형’})\n두 데이터프레임을 세로로 결합(인덱스 번호는 바뀌지 않아 중복됨) : pd.concat([df변수1, df변수2])\n\nignore_index = True : 원본 인덱스를 버리고 새로운 숫자 인덱스 만듦\nkey = [‘인덱스로 사용할 값’, ‘인덱스로 사용할 값’] : 원본 인덱스를 보존하기 위해 왼쪽에 멀티 인덱스 생성\naxis = 1/‘columns’ : 가로로 결합\n\n두 데이터프레임을 결합할 때 데이터셋이 서로 공유하지 않는 행 레이블과 열 레이블의 교차점에 NaN 입력됨\n\n\n조인\n\nleft join : df변수.merge(df변수, how=‘left’, on=‘연결할 공통열이름’)\n\nright_index = True, left_on=‘왼쪽 열이름’ : 왼쪽 df변수의 열과 오른쪽 df변수의 인덱스를 연결할 때\nleft_index = True, right_on=‘오른쪽 열이름’ : 왼쪽 df변수의 인덱스와 오른쪽 df변수의 열을 연결할 때\n\ninner join : df변수.merge(df변수, how=‘inner’, on=‘연결할 공통열이름’)\nouter join : df변수.merge(df변수, how=‘outer’)\n\nleft_on=‘연결할 왼쪽 df변수 열이름’, right_on=‘연결할 오른쪽 df변수 열이름’ : 연결할 공통열이름이 다른 경우\nindicator = True : 값이 어느 df에 속하는지 표시. _merge 레이블. 값은 양쪽에 포함되면 both, 왼쪽에만 포함되면 left_only, 오른쪽은 right_only"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-날짜-시간",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-날짜-시간",
    "title": "Pandas in Action 키워드",
    "section": "11장 날짜, 시간",
    "text": "11장 날짜, 시간\n\n파이썬 datetime 모듈\n\nimport datetime as dt\ndt.date(연, 월, 일) -> datetime.date 객체 반환\ndt.time(시, 분, 초) -> datetime.time 객체 반환. 24시간제. 빈괄호 -> 0시 0분 0초\ndt.datetime(연, 월, 일[, 시, 분, 초])\ndt.timedelta() : 총 시간 반환\n\n\n\n판다스 Timestamp 객체\n\npd.Timestamp(연, 월, 일[, 시, 분, 초])\n다양한 입력 허용(eg. 문자열): pd.Timestamp(‘2022-01-31’), pd.Timestamp(‘2022/01/31’), pd.Timestamp(‘01/31/2011’) 등\ndt.datetime 입력 가능\nDatetimeIndex : Timestamp 객체를 저장하는 인덱스\n다양한 비교 연산 가능: pd.Timestamp(‘2022-01-31’) < pd.Timestamp(‘2022-02-31’) -> True\n특정 열을 날짜/시간 유형으로 변환: df변수[‘날짜열이름’] = pd.to_datetime(df변수[‘날짜열이름’])\n\n\n\nDatetimeProperties 객체\n\n날짜/시간 시리즈는 DatetimeProperties 객체에 접근할 수 있는 특별한 속성 dt를 가짐: df변수[‘날짜열이름’].dt.day -> 날짜만 표시\n요일 숫자로 출력: df변수[‘날짜열이름’].dt.dayofweek -> 0부터 월요일\n요일 문자로 출력(영문): df변수[‘날짜열이름’].dt.day_name()\n월을 문자로 출력(영문): df변수[‘날짜열이름’].dt.month_name()\n행의 날짜가 각 분기의 시작일과 같으면 True 반환: df변수[‘날짜열이름’].dt.is_quarter_start\n행의 날짜가 각 분기의 마지막 날과 같으면 True 반환: df변수[‘날짜열이름’].dt.is_quarter_end\ndf변수[‘날짜열이름’].dt.is_month_start, df변수[‘날짜열이름’].dt.is_month_end, df변수[‘날짜열이름’].dt.is_year_start, df변수[‘날짜열이름’].dt_is_year_end\n\n\n\n일정 시간의 덧셈과 뺄셈 DateOffset\n\n날짜에 지정한 날짜/시간만큼 더하기: df변수[‘날짜열이름’] + pd.DateOffset( years=1, months=3, days=5, hours=6, minutes=3)\n초, 마이크로초, 나노초도 지원\n월별로 일수가 다른 경우 동적으로 날짜 덧셈/뺄셈(eg. 다음 달 말일): df변수[‘날짜열이름’] + pd.offsets.MonthEnd()\n이전 달 말일로 이동: df변수[‘날짜열이름’] - pd.offsets.MonthEnd()\n다음 달의 첫째 날로 이동. df변수[‘날짜열이름’] + pd.offsets.MonthBegin()\n이전 달의 첫째 날로 이동. df변수[‘날짜열이름’] - pd.offsets.MonthBegin(). 주의!! 1일은 이전 달의 1일로 이동\n비즈니스 관련 날짜: BMonthEnd() 해당 월의 마지막 영업일\npd.offsets 모듈 공식문서\n\n\n\nTimedelta 객체\n\n한 Timestamp - 다른 Timestamp -> Timedelta 반환\npd.Timedelta( days=8, hours=7, minutes=6, seconds=5 )\npd.to_timedelta(‘3 hours, 5 minutes, 12 seconds’) : 시간을 나타내는 문자열을 인수로 전달\n\nunit=‘hour’/‘day’/… : 숫자가 나타내는 시간 단위 정의 pd.to_timedelta(5, unit=‘hour’)\npd.to_timedelta([10, 20, 30], unit=‘day’) : 여러 시간차를 인수로 전달\n\ndf변수[‘날짜열이름’].sort_values(), df변수[‘날짜열이름’].max(), df변수[‘날짜열이름’].min(), df변수[‘날짜열이름’].mean()\n1년 넘게 걸린 기간만 필터링 : df변수[‘Timedelta변수’] > pd.Timedelta(days=365)\n2000일, 8시간, 4분 보다 오랜 기간 필터링 : df변수[‘Timedelta변수’] > “2000 days, 8 hours, 4 minutes”\n각 요일의 날짜를 월요일의 날짜로 변환: bike[‘날짜열이름’] - pd.to_timedelta(bike[‘날짜열이름’].dt.day_of_week, unit=‘day’)\n\n요일을 나타내는 숫자(day_of_week)는 월요일(0)로부터 떨어진 일수로 생각할 수 있음.\n따라서 현재 날짜에서 월요일로부터 떨어진 일수를 빼면 월요일 날짜를 구할 수 있다."
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#가져오기-내보내기",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#가져오기-내보내기",
    "title": "Pandas in Action 키워드",
    "section": "가져오기, 내보내기",
    "text": "가져오기, 내보내기\n\njson\n\njson 가져오기: pd.read_json(‘json파일명’)\npd.json_normalize(data=df변수[‘키’], record_path=‘하위레코드를 갖는 키’, meta=[‘최상위 키’, ‘최상위 키’, …])\n키가 없는 딕셔너리가 있는 경우 위 명령에 에러가 발생한다. 그래서 setdefalut()로 키를 설정한 뒤 apply() 이용하여 df에 적용한다.\n\ndef add_default_key(entry):\n    entry.setdefault('키가 없는 딕셔너리의 상위키', [])\n\ndf변수['최상위 키'].apply(add_default_key)\n\njson 내보내기: df변수.to_json(‘저장할json파일명’)\n\norient=‘records’ : 행 순서대로 키(열이름)-값(데이터)으로 구성된 json 배열 반환\norient=‘split’ : ’컬럼명 키, 인덱스 키, 데이터 값’으로 구성된 json 배열 반환\n이 외에도 index, columns, values, table\n\n\n\n\ncsv\n\ndf변수.to_csv(‘저장할 파일명’, index=False): 쉼표로 셀 구분, 줄바꿈 문자로 행 구분\n\n\n\nexcel\n\npd.read_excel(‘파일명’, sheet_name=None) : 모든 시트 가져오기"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#장-시각화",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#장-시각화",
    "title": "Pandas in Action 키워드",
    "section": "14장 시각화",
    "text": "14장 시각화\n\ncolormaps 이름 출력: print(plt.colormaps())"
  },
  {
    "objectID": "books/pandas_in_action/pandas_in_action_keywords.html#fake-데이터프레임-만들기",
    "href": "books/pandas_in_action/pandas_in_action_keywords.html#fake-데이터프레임-만들기",
    "title": "Pandas in Action 키워드",
    "section": "fake 데이터프레임 만들기",
    "text": "fake 데이터프레임 만들기\nimport fake\nfaker = fake.Faker()\ndata = [\n    {'name': fake.name(),\n     'company': fake.company(),\n     'phone': fake.phone_number(),\n     'salary': np.random.randint(50000, 200000)} for _ in range(1000)\n]\ndf = pd.DataFrame(data = data)"
  },
  {
    "objectID": "books/pandas_in_action/duplicated.html",
    "href": "books/pandas_in_action/duplicated.html",
    "title": "duplicated()",
    "section": "",
    "text": "employees.head(10)\n\n\n\n\nFirst Name\nGender\nStart Date\nSalary\nMgmt\nTeam\n\n\n\n\n0\nDouglas\nMale\n1993-08-06\nNaN\nTrue\nMarketing\n\n\n1\nThomas\nMale\n1996-03-31\n61933.0\nTrue\nNaN\n\n\n2\nMaria\nFemale\nNaT\n130590.0\nFalse\nFinance\n\n\n3\nJerry\nNaN\n2005-03-04\n138705.0\nTrue\nFinance\n\n\n4\nLarry\nMale\n1998-01-24\n101004.0\nTrue\nIT\n\n\n5\nDennis\nMale\n1987-04-18\n115163.0\nFalse\nLegal\n\n\n6\nRuby\nFemale\n1987-08-17\n65476.0\nTrue\nProduct\n\n\n7\nNaN\nFemale\n2015-07-20\n45906.0\nNaN\nFinance\n\n\n8\nAngela\nFemale\n2005-11-22\n95570.0\nTrue\nEngineering\n\n\n9\nFrances\nFemale\n2002-08-08\n139852.0\nTrue\nBusiness Dev\n\n\n\nemployee[‘Team’].duplicated().head(10)\n0    False\n1    False\n2    False  <- 처음 나온 중복값은 Fasle\n3     True  <- 두번째 나온 중복값부터 True\n4    False\n5    False\n6    False\n7     True\n8    False\n9    False\nName: Team, dtype: bool"
  },
  {
    "objectID": "books/pandas_in_action/duplicated.html#keep-매개변수",
    "href": "books/pandas_in_action/duplicated.html#keep-매개변수",
    "title": "duplicated()",
    "section": "keep 매개변수",
    "text": "keep 매개변수\n\n기본값: keep=‘first’ -> 첫 번째로 나타난 중복값은 False로 표시하여 값을 유지(중복되지 않은 것으로 표시)\nkeep=‘last’ -> 마지막 중복값을 False로 표시하여 값을 유지(중복되지 않은 것으로 표시)"
  },
  {
    "objectID": "books/This_is_coding_test/05stack_queue_recursion.html",
    "href": "books/This_is_coding_test/05stack_queue_recursion.html",
    "title": "05장 스택 큐 재귀함수",
    "section": "",
    "text": "스택(Stack, 선입후출)과 큐(queue, 선입선출)는 자료구조의 기초 개념으로 삽입(push)과 삭제(pop) 두 핵심적인 함수로 구성됨.\n파이썬에서 스택을 이용할 때는 append()와 pop() 메서드 사용함.\n파이썬에서 큐를 이용할 때는 from collections import deque 라이브러리 사용함.\n재귀함수는 종료 조건을 꼭 명시해야 함."
  },
  {
    "objectID": "books/This_is_coding_test/05stack_queue_recursion.html#deque-라이브러리",
    "href": "books/This_is_coding_test/05stack_queue_recursion.html#deque-라이브러리",
    "title": "05장 스택 큐 재귀함수",
    "section": "deque 라이브러리",
    "text": "deque 라이브러리\nfrom collections import deque\n\nqueue = deque()\n\nqueue.append(5)\nqueue.append(2)\nqueue.append(3)\nqueue.append(7)\nqueue.popleft()\nqueue.append(1)\nqueue.append(4)\nqueue.popleft()\n\nprint(queue)   # deque([3, 7, 1, 4])\ndeque 모듈은 속도가 빠르다. 코딩테스트는 대부분 기본 라이브러리 사용 허용"
  },
  {
    "objectID": "books/This_is_coding_test/05stack_queue_recursion.html#재귀함수",
    "href": "books/This_is_coding_test/05stack_queue_recursion.html#재귀함수",
    "title": "05장 스택 큐 재귀함수",
    "section": "재귀함수",
    "text": "재귀함수\n\n컴퓨터 내부에서 재귀 함수 수행은 스택 자료구조 이용. 마지막에 호출한 함수가 끝나야 그 앞의 함수 호출이 종료되기 때문.\n따라서 스택 자료구조를 활용해야 하는 상당수 알고리즘은 재귀 함수를 이용해 구현 => ==DFS==\n\nFactorial 구현 예제\n# 재귀함수 이용\ndef factorial_resursion(n):\n    if n <= 1:\n        print('1', end='')\n        return 1\n    print(n, '*', end=' ')\n    return n * factorial_resursion(n-1)\n\nprint(' = ', factorial_resursion(5) ) # 5 * 4 * 3 * 2 * 1 =  120\n위 print 출력 결과를 보면 작동 순서를 짐작할 수 있다. 함수 호출 역순으로 실행됨.\n# 반복문 이용\n\nn = 5\nresult = 1\n\nfor i in range(1, n+1):\n    print(i,' * ', result, end=' = ')\n    result *= i\n    print(result)\n\nprint(result)\n# 1  *  1 = 1\n# 2  *  1 = 2\n# 3  *  2 = 6\n# 4  *  6 = 24\n# 5  *  24 = 120\n# 120"
  },
  {
    "objectID": "books/This_is_coding_test/05stack_queue_recursion.html#오류",
    "href": "books/This_is_coding_test/05stack_queue_recursion.html#오류",
    "title": "05장 스택 큐 재귀함수",
    "section": "오류",
    "text": "오류\n\noverflow : 특정한 자료구조가 수용할 수 있는 데이터의 크기를 이미 가득 채운 상태에서 삽인 연산을 수행할 때 발생. #용어\nunderflow : 특정한 자료구조에 데이터가 전혀 들어 있지 않은 상태에서 삭제 연산을 수행할 때 발생. #용어"
  },
  {
    "objectID": "books/This_is_coding_test/06insertion_sort.html",
    "href": "books/This_is_coding_test/06insertion_sort.html",
    "title": "06장 삽입 정렬(Insertion Sort) 알고리즘",
    "section": "",
    "text": "array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]\nprint(array)\nfor i in range(1, len(array)):\n    print( '삽입지점=', array[i] )\n    \n    for j in range(i, 0, -1): # 인덱스 i부터 1까지 감소\n    \n        print( array[j-1], array[j] )\n        \n        if array[j] < array[j-1]: # 한 칸씩 왼쪽으로 이동\n            array[j], array[j-1] = array[j-1], array[j]\n            print('교환=>', array)\n        else:        # 자신보다 작은 값을 만나면 멈춤\n            print(array)\n            break\n            \nprint(array)\n    [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]\n    삽입지점= 5\n    7 5\n    교환=> [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]\n    삽입지점= 9\n    7 9\n    [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]\n    삽입지점= 0\n    9 0\n    교환=> [5, 7, 0, 9, 3, 1, 6, 2, 4, 8]\n    7 0\n    교환=> [5, 0, 7, 9, 3, 1, 6, 2, 4, 8]\n    5 0\n    교환=> [0, 5, 7, 9, 3, 1, 6, 2, 4, 8]\n    삽입지점= 3\n    9 3\n    교환=> [0, 5, 7, 3, 9, 1, 6, 2, 4, 8]\n    7 3\n    교환=> [0, 5, 3, 7, 9, 1, 6, 2, 4, 8]\n    5 3\n    교환=> [0, 3, 5, 7, 9, 1, 6, 2, 4, 8]\n    0 3\n    [0, 3, 5, 7, 9, 1, 6, 2, 4, 8]\n    삽입지점= 1\n    9 1\n    교환=> [0, 3, 5, 7, 1, 9, 6, 2, 4, 8]\n    7 1\n    교환=> [0, 3, 5, 1, 7, 9, 6, 2, 4, 8]\n    5 1\n    교환=> [0, 3, 1, 5, 7, 9, 6, 2, 4, 8]\n    3 1\n    교환=> [0, 1, 3, 5, 7, 9, 6, 2, 4, 8]\n    0 1\n    [0, 1, 3, 5, 7, 9, 6, 2, 4, 8]\n    삽입지점= 6\n    9 6\n    교환=> [0, 1, 3, 5, 7, 6, 9, 2, 4, 8]\n    7 6\n    교환=> [0, 1, 3, 5, 6, 7, 9, 2, 4, 8]\n    5 6\n    [0, 1, 3, 5, 6, 7, 9, 2, 4, 8]\n    삽입지점= 2\n    9 2\n    교환=> [0, 1, 3, 5, 6, 7, 2, 9, 4, 8]\n    7 2\n    교환=> [0, 1, 3, 5, 6, 2, 7, 9, 4, 8]\n    6 2\n    교환=> [0, 1, 3, 5, 2, 6, 7, 9, 4, 8]\n    5 2\n    교환=> [0, 1, 3, 2, 5, 6, 7, 9, 4, 8]\n    3 2\n    교환=> [0, 1, 2, 3, 5, 6, 7, 9, 4, 8]\n    1 2\n    [0, 1, 2, 3, 5, 6, 7, 9, 4, 8]\n    삽입지점= 4\n    9 4\n    교환=> [0, 1, 2, 3, 5, 6, 7, 4, 9, 8]\n    7 4\n    교환=> [0, 1, 2, 3, 5, 6, 4, 7, 9, 8]\n    6 4\n    교환=> [0, 1, 2, 3, 5, 4, 6, 7, 9, 8]\n    5 4\n    교환=> [0, 1, 2, 3, 4, 5, 6, 7, 9, 8]\n    3 4\n    [0, 1, 2, 3, 4, 5, 6, 7, 9, 8]\n    삽입지점= 8\n    9 8\n    교환=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    7 8\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "books/This_is_coding_test/05dfs.html",
    "href": "books/This_is_coding_test/05dfs.html",
    "title": "05장 DFS(깊이 우선 탐색)",
    "section": "",
    "text": "그래프 표현 방식:\n\n인접 행렬(Adjacency Matrix) 방식: 연결되어 있지 않은 노드는 무한비용(논리적으로 정답이 아닌 큰 값, eg. 999999999) 선언\n인접 리스트(Adjacency List) 방식\n파이썬에서는 모두 2차원 리스트로 표현한다.\n\nflowchart\n    A((0))\n    B((1))\n    C((2))\n    A --7---B\n    A ---|5|C\n\n\nINF = 999999999\n\ngraph = [\n    [0, 7, 5],\n    [7, 0, INF],\n    [5, INF, 0]\n]\n\n\n\nflowchart LR\nA(0)-->B(1_7)-->C(2_5)\nD(1)-->E(0_7)\nF(2)-->G(0_5)\n\n\n\ngraph\n    1(1)---2(2)---7(7)---6(6)\n    1(1)---3(3)---4(4)\n    3---5(5)\n    7---8(8)\n    1---8\n    4---5\n탐색 순서: 1 -> 2 -> 7 -> 6 -> 8 -> 3 -> 4 -> 5\n# DFS 메서드 정의\ndef dfs(graph, v, visited):\n    # 현재 노드를 방문 처리\n    visited[v] = True\n    print(v, end=' ')\n    \n    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문\n    for i in graph[v]:\n        if not visited[i]:\n            dfs(graph, i, visited)\n\n# 그래프 정보 맵\n# 각 노드가 연결된 정보를 리스트 자료형으로 표현(2차원 리스트)\ngraph = [\n    [],           # 0번 인덱스 비워둠\n    [2, 3, 8],    # 1과 연결된 노드\n    [1, 7],       # 2와 연결된 노드\n    [1, 4, 5],    # 3과 연결된 노드\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7]\n]\n\n# 방문 유무 확인 위한 맵 -> 초기값은 모두 False(방문 안 함)\n# 각 노드가 방문한 정보를 리스트 자료형으로 표현(1차원 리스트)\n# 노드 개수 + 1 (0번 인덱스 포함) => 인덱스 번호를 노드번호로 사용하기 위함\nvisited = [False] * 9\n\n# 정의된 DFS 함수 호출\ndfs(graph, 1, visited)\n# 1 2 7 6 8 3 4 5 \n실행 추적\ngraph[1] -> [2, 3, 8]\n    2 -> not visited\n            -> graph[2] -> [1, 7]\n                1 -> visitied\n                7 -> not visited\n                        -> graph[7] -> [2, 6, 8]\n                            2 -> visited\n                            6 -> not visited\n                                    -> graph[6] -> [7]\n                                        7 -> visited\n                                        return => None\n                            8 -> not visited\n                                    -> graph[8] -> [1, 7]\n                                        1 -> visited\n                                        7 -> visited\n                                        return => None\n                    return => None\n        return => None\n\n    3 -> not visited"
  },
  {
    "objectID": "books/This_is_coding_test/07binarySearch.html",
    "href": "books/This_is_coding_test/07binarySearch.html",
    "title": "07장 이진 탐색(Binary Search) p188",
    "section": "",
    "text": "배열 내부의 데이터가 정렬되어 있어야 사용 가능\n탐색 범위를 절반씩 좁혀가며 탐색\n시간 복잡도 O(NlogN)"
  },
  {
    "objectID": "books/This_is_coding_test/07binarySearch.html#부품-찾기-p197",
    "href": "books/This_is_coding_test/07binarySearch.html#부품-찾기-p197",
    "title": "07장 이진 탐색(Binary Search) p188",
    "section": "부품 찾기 p197¶",
    "text": "부품 찾기 p197¶\n# 내가 짠 것\n\nn = int(input())\nn_list = list(map(int, input().split()))\n              \nm = int(input())\nm_list = list(map(int, input().split()))\n              \nn_list.sort()\n\ndef binary_search(n_list, target, start, end):\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if n_list[mid] == target:\n            return 'yes'\n        elif n_list[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n\nfor target in m_list:\n    temp = binary_search(n_list, target, 0, n-1)\n    if temp == None:\n        temp = 'no'\n    print(temp, end=' ')\n    5\n    8 3 7 9 2\n    3 \n    5 7 9\n    no yes yes \n# 교재 코드\n\ndef binary_search(array, target, start, end):\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] > target:\n            end = mid -1\n        else:\n            start = mid + 1\n            \nn = int(input())\narray = list(map(int, input().split()))\narray.sort()\n\nm = int(input())\nx = list(map(int, input().split()))\n\nfor i in x:\n    result = binary_search(array, i, 0, n - 1)\n    if result != None:\n        print('yes', end=' ')\n    else:\n        print('no', end=' ')\n    5\n    8 3 7 9 2\n    3\n    5 7 9\n    no yes yes"
  },
  {
    "objectID": "books/This_is_coding_test/07binarySearch.html#set-자료형-이용한-풀이",
    "href": "books/This_is_coding_test/07binarySearch.html#set-자료형-이용한-풀이",
    "title": "07장 이진 탐색(Binary Search) p188",
    "section": "set 자료형 이용한 풀이",
    "text": "set 자료형 이용한 풀이\nn = int(input())\n# 가게의 전체 부품 번호를 입력받아 집합 자료형에 기록\narray = set(map(int, input().split()))\n\nm = int(input())\nx = list(map(int, input().split()))\n\nfor i in x:\n    if i in array:\n        print('yes', end=' ')\n    else:\n        print('no', end=' ')\n    5\n    8 3 7 9 2\n    3 \n    5 7 9\n    no yes yes"
  },
  {
    "objectID": "books/This_is_coding_test/07binarySearch.html#강사가-소개한-책",
    "href": "books/This_is_coding_test/07binarySearch.html#강사가-소개한-책",
    "title": "07장 이진 탐색(Binary Search) p188",
    "section": "강사가 소개한 책",
    "text": "강사가 소개한 책\n\n케빈 머피, Machine Learning\n토머스 코멘, introduction to Algorithms"
  },
  {
    "objectID": "books/This_is_coding_test/09floyd-warshall.html",
    "href": "books/This_is_coding_test/09floyd-warshall.html",
    "title": "09장 Floyd-Warshall Algorithm p251",
    "section": "",
    "text": "모든 지점에서 다른 모든 지점까지의 최단 경로 구하는 알고리즘\n2차원 리스트에 최단 거리 정보 저장\nO(N^3)"
  },
  {
    "objectID": "books/This_is_coding_test/09floyd-warshall.html#미래-도시-p259",
    "href": "books/This_is_coding_test/09floyd-warshall.html#미래-도시-p259",
    "title": "09장 Floyd-Warshall Algorithm p251",
    "section": "미래 도시 p259",
    "text": "미래 도시 p259\n\n입력 첫째 줄: 노드 개수, 간선 개수\n입력 둘째 줄 ~ 간선 개수: 서로 연결된 노드\n마지막 줄: 목적 노드(X), 목적 노드 도착 전에 꼭 들러야 하는 노드(K)\n\n# 입력 받은 간선 정보를 2차원 리스트로 만들기\n\n# 노드, 간선 개수 입력\nn, m = map(int, input().split())\n\nINF = int(1e9)\ngraph = [[INF] * (n+1) for _ in range(n + 1)]\n\n# 자신 -> 자신 비용 0으로 초기화\nfor i in range(1, n + 1):\n    for j in range(1, n + 1):\n        if i == j:\n            graph[i][j] = 0\n\n# 간선 정보 입력 -> 초기화\n# 간선 비용은 모두 1\nfor _ in range(m):\n    a, b = map(int, input().split())\n    graph[a][b] = 1 # a -> b\n    graph[b][a] = 1 # b -> a\n\n\ngraph\n\n#     5 7\n#     1 2\n#     1 3\n#     1 4\n#     2 4\n#     3 4\n#     3 5\n#     4 5\n# \n#     [[1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],\n#      [1000000000, 0, 1, 1, 1, 1000000000],\n#      [1000000000, 1, 0, 1000000000, 1, 1000000000],\n#      [1000000000, 1, 1000000000, 0, 1, 1],\n#      [1000000000, 1, 1, 1, 0, 1],\n#      [1000000000, 1000000000, 1000000000, 1, 1, 0]]\n# 목적지, 경유지 입력 받기\nx, k = map(int, input().split())\nx, k\n#    4 5\n#\n#    (5, 4)\n# 모든 노드를 경유지로 설정하고\n# 각 노드에서 경유지를 거쳐 모든 노드로 가는 거리 계산\n\nfor k in range(1, n + 1):\n    for i in range(1, n + 1): \n        for j in range(1, n + 1):\n            graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\ngraph\n#    [[1000000000, 1000000000, 1000000000, 1000000000, 1000000000, 1000000000],\n#     [1000000000, 0, 1, 1, 1, 2],\n#     [1000000000, 1, 0, 2, 1, 2],\n#     [1000000000, 1, 2, 0, 1, 1],\n#     [1000000000, 1, 1, 1, 0, 1],\n#     [1000000000, 2, 2, 1, 1, 0]]\n# 수행 결과 출력\nprint(graph[1][k], graph[k][x])\ndistance = graph[1][k] + graph[k][x]\n\n# 도달할 수 없는 경우 -1 출력\nif distance >= INF:\n    print('-1')\nelse:\n    print(distance)\n#    2 1\n#    3"
  },
  {
    "objectID": "books/This_is_coding_test/06quick_sort.html",
    "href": "books/This_is_coding_test/06quick_sort.html",
    "title": "06장 퀵 정렬(Quick Sort) 알고리즘",
    "section": "",
    "text": "애니메이션 설명(영어)\narray = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]\nprint(array,'\\n')\n\ndef quick_sort(array, start, end):\n    if start >= end:    # 원소가 1개일 경우 종료\n        return\n    pivot = start       # 첫번째 인덱스 = 피벗 인덱스\n    left = start + 1    # 우측으로 이동할 인덱스\n    right = end         # 좌측으로 이동할 인덱스\n    print(f'start={array[start]}({start}), left={array[left]}({left}), right={array[right]}({right})\\n')\n    \n    while left <= right: # left와 right이 엇갈리기 전까지 반복\n\n        # 피벗보다 큰 값을 찾을 때까지 반복. 피벗보다 작으면 인덱스 증가\n        # 피벗보다 작은 값은 왼쪽에 남기기 때문에 건너 뛰고, 큰 값은 오른쪽으로 보내기 위해 인덱스 저장\n        if left <= end and array[left] <= array[pivot]:\n            left += 1\n\n        # 피벗보다 작은 값을 찾을 때까지 반복. 피벗보다 크면 인덱스 감소\n        # 피벗보다 작은 값을 왼쪽으로 보내기 위해 찾음. 피벗보다 큰 값은 오른쪽에 남김\n        while right > start and array[right] >= array[pivot]:\n            right -= 1\n            \n#         print(f'left={array[left]}({left}), right={array[right]}({right})\\n')\n        \n        if left > right: # 인덱스가 엇갈리면 작은 값과 피벗 교환\n\n            array[right], array[pivot] = array[pivot], array[right]\n            print('피벗 교환=>', array, '\\n')\n        \n        else: # 인덱스가 엇갈리지 않았으면 작은 값과 큰 값 교환\n        \n            array[left], array[right] = array[right], array[left]\n            print('교환 후', array, '\\n')\n    \n    # 분할 이후 왼쪽 리스트, 오른쪽 리스트 각각 정렬 수행\n    quick_sort(array, start, right-1)\n    quick_sort(array, right+1, end)\n    \nquick_sort(array, 0, len(array)-1) # 0은 피벗, len(array)-1은 마지막 인덱스\nprint(array)\n    [7, 5, 9, 0, 3, 1, 6, 2, 4, 8] \n    \n    start=7(0), left=5(1), right=8(9)\n    \n    교환 후 [7, 5, 4, 0, 3, 1, 6, 2, 9, 8] \n    \n    교환 후 [7, 5, 4, 2, 3, 1, 6, 0, 9, 8] \n    \n    교환 후 [7, 5, 4, 2, 0, 1, 6, 3, 9, 8] \n    \n    교환 후 [7, 5, 4, 2, 0, 3, 6, 1, 9, 8] \n    \n    교환 후 [7, 5, 4, 2, 0, 3, 1, 6, 9, 8] \n    \n    교환 후 [7, 5, 4, 2, 0, 3, 1, 6, 9, 8] \n    \n    피벗 교환=> [6, 5, 4, 2, 0, 3, 1, 7, 9, 8] \n    \n    start=6(0), left=5(1), right=1(6)\n    \n    교환 후 [6, 5, 1, 2, 0, 3, 4, 7, 9, 8] \n    \n    교환 후 [6, 5, 1, 4, 0, 3, 2, 7, 9, 8] \n    \n    교환 후 [6, 5, 1, 4, 2, 3, 0, 7, 9, 8] \n    \n    교환 후 [6, 5, 1, 4, 2, 0, 3, 7, 9, 8] \n    \n    교환 후 [6, 5, 1, 4, 2, 0, 3, 7, 9, 8] \n    \n    피벗 교환=> [3, 5, 1, 4, 2, 0, 6, 7, 9, 8] \n    \n    start=3(0), left=5(1), right=0(5)\n    \n    교환 후 [3, 0, 1, 4, 2, 5, 6, 7, 9, 8] \n    \n    교환 후 [3, 0, 2, 4, 1, 5, 6, 7, 9, 8] \n    \n    교환 후 [3, 0, 2, 1, 4, 5, 6, 7, 9, 8] \n    \n    피벗 교환=> [1, 0, 2, 3, 4, 5, 6, 7, 9, 8] \n    \n    start=1(0), left=0(1), right=2(2)\n    \n    피벗 교환=> [0, 1, 2, 3, 4, 5, 6, 7, 9, 8] \n    \n    start=4(4), left=5(5), right=5(5)\n    \n    피벗 교환=> [0, 1, 2, 3, 4, 5, 6, 7, 9, 8] \n    \n    start=9(8), left=8(9), right=8(9)\n    \n    피벗 교환=> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \n    \n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\narray = [1, 5, 2, 4, 3]\n\ndef quick_sort(array, start, end):\n    if start >= end:\n        return\n    pivot = start\n    left = start + 1\n    right = end\n    \n    while left <= right:\n        \n        if left <= end and array[left] <= array[pivot]:\n            left += 1\n\n        while right > start and array[right] >= array[pivot]:\n            right -= 1\n        \n        if left > right:\n            print('교환 전', array)\n            print(f'인덱스 교차 left={left}, right={right}')\n            array[right], array[pivot] = array[pivot], array[right]\n            print('피벗 교환=>', array, '\\n')\n        \n        else:\n            print('교환 전', array)\n            print(f'left={array[left]}({left}) <=> right={array[right]}({right})')\n        \n            array[left], array[right] = array[right], array[left]\n            print('교환 후', array, '\\n')\n    \n    quick_sort(array, start, right-1)\n    quick_sort(array, right+1, end)\n    \nquick_sort(array, 0, len(array)-1)\nprint(array)\n    교환 전 [1, 5, 2, 4, 3]\n    인덱스 교차 left=1, right=0\n    피벗 교환=> [1, 5, 2, 4, 3] \n    \n    교환 전 [1, 5, 2, 4, 3]\n    left=4(3) <=> right=3(4)\n    교환 후 [1, 5, 2, 3, 4] \n    \n    교환 전 [1, 5, 2, 3, 4]\n    left=4(4) <=> right=4(4)\n    교환 후 [1, 5, 2, 3, 4] \n    \n    교환 전 [1, 5, 2, 3, 4]\n    인덱스 교차 left=5, right=4\n    피벗 교환=> [1, 4, 2, 3, 5] \n    \n    교환 전 [1, 4, 2, 3, 5]\n    left=3(3) <=> right=3(3)\n    교환 후 [1, 4, 2, 3, 5] \n    \n    교환 전 [1, 4, 2, 3, 5]\n    인덱스 교차 left=4, right=3\n    피벗 교환=> [1, 3, 2, 4, 5] \n    \n    교환 전 [1, 3, 2, 4, 5]\n    인덱스 교차 left=3, right=2\n    피벗 교환=> [1, 2, 3, 4, 5] \n    \n    [1, 2, 3, 4, 5]\n\n\n[7, 5, 9, 0, 3, 1, 6, 2, 4, 8]\n\n왼쪽: 7보다 큰 숫자 9 = left\n오른쪽: 7보다 작은 숫자 4 = right\n\n[7, 5, 4, 0, 3, 1, 6, 2, 9, 8]"
  },
  {
    "objectID": "books/This_is_coding_test/07sequentialSearch.html",
    "href": "books/This_is_coding_test/07sequentialSearch.html",
    "title": "07장 순차 탐색(Sequential Search) p186",
    "section": "",
    "text": "# 입력된 단어들 중에 찾는 단어의 위치 반환\n\ndef sequential_search(n, target, array):\n    for i in range(n):\n        if array[i] == target:\n            return i + 1 # 현재 위치 반환(인덱스는 0부터 시작하므로 1 더하기)\n        \nprint('생성할 원소 개수를 입력한 다음 한 칸 띄고 찾을 문자열을 입력하세요.')\ninput_data = input().split()\nn = int(input_data[0]) # 원소 개수\ntarget = input_data[1]\n\nprint('앞서 적은 원소 개수만큼 문자열을 입력하세요. 띄어쓰기 한 칸으로 구분합니다.')\narray = input().split()\n\n# 순차 탐색 수행 결과 출력\nprint(sequential_search(n, target, array))\n\n```text\n    생성할 원소 개수를 입력한 다음 한 칸 띄고 찾을 문자열을 입력하세요.\n    5 world\n    앞서 적은 원소 개수만큼 문자열을 입력하세요. 띄어쓰기 한 칸으로 구분합니다.\n    hello world in our space\n    2"
  },
  {
    "objectID": "books/This_is_coding_test/05bfs.html",
    "href": "books/This_is_coding_test/05bfs.html",
    "title": "5장 BFS",
    "section": "",
    "text": "from collections import deque\n\n# BFS 메서드 정의\ndef bfs(graph, start, visited):\n    \n    # 큐 구현을 위해 deque 라이브러리 사용\n    queue = deque([start])\n    # 현재 노드 방문 처리\n    visited[start] = True\n    \n    while queue:\n        # 큐에서 하나의 원소를 뽑아 출력\n        v = queue.popleft()\n        print(v, end=' ')\n        \n        # 뽑은 원소와 연결된 아직 방문하지 않은 원소들을 큐에 삽입\n        for i in graph[v]:\n            if not visited[i]:\n                queue.append(i)\n                visited[i] = True\n\ngraph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7],\n]\n\nvisited = [False] * 9\n\nbfs(graph, 1, visited)\n\n# 결과\n# 1 2 3 8 7 4 5 6\n\n\npop(1) -> v = 1 -> [2, 3, 8]\n    i = 2(visited) -> [2]\n    i = 3(visited) -> [2, 3]\n    i = 8(visited) -> [2, 3, 8]\npop(2) -> v= 2 -> [1, 7]\n    i = 1 -> visited\n    i = 7 -> [3, 8, 7]\npop(3) -> v = 3 -> [1, 4, 5]\n    i = 1 -> visited\n    i = 4 -> [8, 7, 4]\n    i = 5 -> [8, 7, 4, 5]\npop(8) -> v = 8 -> [1, 7]\n    i = 1 -> visited\n    i = 7 -> visited\npop(7) -> v = 7 -> [2, 6, 8]\n    i = 2 -> visited\n    i = 6 -> [4, 5, 6]\n    i = 8 -> visited\npop(4) -> v = 4 -> [3, 5]\n    i = 3 -> visited\n    i = 5 -> visited\npop(5) -> v = 5 -> [3, 4]\n    i = 3 -> visited\n    i = 4 -> visited\npop(6) -> v = 6 -> [7]\n    i = 7 -> visited\n\n\n\na = deque(1)\nprint(a)\n\n# 결과\n# ------------------------------------------------------------------\n# TypeError                    Traceback (most recent call last)\n# Input In [29], in <cell line: 1>()  \n# ----> 1 a = deque(1)  \n#       2 a\n# \n# TypeError: 'int' object is not iterable\nb = deque([1])\nprint(b)\n\n# deque([1])"
  },
  {
    "objectID": "books/This_is_coding_test/05bfs.html#미로-탈출-p152",
    "href": "books/This_is_coding_test/05bfs.html#미로-탈출-p152",
    "title": "5장 BFS",
    "section": "미로 탈출 p152",
    "text": "미로 탈출 p152\nfrom collections import deque\n\n# n, m을 공백으로 구분하여 입력받기\n# n, m = map(int, input().split())\n\n# 2차원 리스트 맵 정보 입력받기\n# graph = []\n# for i in range(n):\n#     graph.append(\n#         list(map(int, input()))\n#     )\n\nn, m = 3, 3\ngraph = [[1, 1, 0], [0, 1, 0], [0, 1, 1]]\n\n# 이동할 네 방향 정의(상, 하, 좌, 우)\ndx = [-1, 1, 0, 0]\ndy = [0, 0, -1, 1]\n\n# BFS 구현\ndef bfs(x, y):\n    \n    # deque 객체 선언\n    queue = deque()\n    queue.append((x, y))\n    \n    # 큐가 빌 때까지 반복\n    while queue:\n        x, y = queue.popleft()\n        \n        # 현재 위치에서 상,하,좌,우 확인\n        for i in range(4):\n            nx = x + dx[i]\n            ny = y + dy[i]\n            \n            # 맵 공간을 벗어나면 무시. 괄호 안은 시작점으로 돌아가는 문제 수정. 수정하지 않아도 정답에는 영향 무\n            if nx < 0 or nx >= n or ny < 0 or ny >= m or ( nx == 0 and ny == 0 ):\n                continue\n            # 벽인 경우 무시\n            if graph[nx][ny] == 0:\n                continue\n            \n            # 해당 노드를 처음 방문한 경우에만 최단 거리 기록\n            if graph[nx][ny] == 1:\n                graph[nx][ny] = graph[x][y] + 1\n                queue.append((nx, ny))\n                \n    # 가장 오른쪽 아래까지의 최단 거리 반환\n    return graph[n-1][m-1]   # n, m 행렬의 끝 인덱스는 각각의 크기 - 1\n\nprint( bfs(0, 0) )\n# 5\nprint(graph)\n# [[1, 2, 0], \n#  [0, 3, 0], '\n#  [0, 4, 5]]\n\n미로 탈출 실행 추적\npopleft(0,0) -> 상 -> 지도 밖 무시\n             -> 하 -> 0 만나 무시\n             -> 좌 -> 지도 밖 무시\n             -> 우(0,1) -> graph[0][1] = 2 -> [(0, 1)]\npopleft(0,1) -> 상 -> 지도 밖 무시\n             -> 하(1,1) -> graph[1][1] = 2 -> [(1,1)]\n             -> 좌(0,0) -> graph[0][0] = 2 -> [(1,1), (0,0)]\n             -> 우 -> 0 만나 무시\npopleft(1,1) -> 상 -> 2 만나 무시\n             -> 하(2,1) -> graph[2][1] = 3 -> [(0, 0), (2,1)]\n             -> 좌 -> 0 만나 무시\n             -> 우 -> 0 만나 무시\npopleft(0,0) -> 상 -> 지도 밖 무시\n             -> 하 -> 0 만나 무시\n             -> 좌 -> 지도 밖 무시\n             -> 우 -> 2 만나 무시\npopleft(2,1) -> 상 -> 2 만나 무시\n             -> 하 -> 지도 밖 무시\n             -> 좌 -> 0 만나 무시\n             -> 우 -> graph[2][2] = 4 -> [(2,2)]\npopleft(2,2) -> 상 -> 0 만나 무시\n             -> 하 -> 지도 밖 무시\n             -> 좌 -> 3 만나 무시\n             -> 우 -> 지도 밖 무시\n이동 가능한 모든 셀, 즉 값이 1인 셀을 방문하여 +1로 바꾼다. 그러면, 이미 방문한 셀을 재방문하지 않게 된다."
  },
  {
    "objectID": "books/This_is_coding_test/08dynamicProgramming.html",
    "href": "books/This_is_coding_test/08dynamicProgramming.html",
    "title": "08장 Dynamic Programming(동적 계획법) p208",
    "section": "",
    "text": "메모리 공간을 약간 더 사용하면 연산 속도를 비약적으로 증가시킬 수 있는 방법 중 하나\n피보나치 수열 => 재귀함수를 사용하면 큰 수가 입력되면 시간 복잡도가 기하급수적으로 증가\n메모이제이션(Memoization) 기법 = Caching : 한 번 구한 결과를 메모리 공간에 저장해두고 같은 식을 다시 호출하면 저장한 결과를 가져오는 기법\nmeoization 구현 = 구한 정보를 리스트에 저장\nTop-Donw 방식 : 큰 문제 해결 위해 작은 문제 호출. 재귀함수 이용\nBottom-Up 방식 : 작은 문제부터 차근차근 답을 도출. 반복문 이용"
  },
  {
    "objectID": "books/This_is_coding_test/08dynamicProgramming.html#로-만들기-p217",
    "href": "books/This_is_coding_test/08dynamicProgramming.html#로-만들기-p217",
    "title": "08장 Dynamic Programming(동적 계획법) p208",
    "section": "1로 만들기 p217",
    "text": "1로 만들기 p217\n답을 보고 유추한 풀이 과정\n\n계산 횟수가 0인 리스트를 만든다. 크기는 입력 허용 범위 + 1 (0인덱스 제외하여 숫자와 인덱스 일치시키기 위해)\n2부터 차례대로 1이 될 때까지의 계산횟수를 입력한다.\n기본 계산 횟수는 문제 조건에 따라 “숫자 - 1”의 계산횟수에 1을 더한 것이다. 1을 더하는 까닭은 자신을 계산한 횟수를 포함하기 위해서다.\n문제에서 제시된 수(2 or 3 or 5)로 나누어 떨어지면 “몫 + 1” 한 계산횟수와 “숫자 - 1”의 계산횟수를 비교하여 작은 것을 계산횟수로 입력한다.\n\n=> 위 과정을 2부터 “계산할 수 + 1”까지 반복한다.\nx = 6\n\n# 앞서 계산된 결과를 저장하기 위햔 DP table 초기화\n# 문제에 제시된 입력범위 30000\n# d 리스트에는 계산 횟수가 입력됨\nd = [0] * 30001 \n\n\n# 1이 나올 때까지 빼는 것이기 때문에 2부터 시작\nfor i in range(2, x+1):\n    \n    # 현재 수에서 1을 빼는 경우\n    # 자신보다 1 작은 수의 계산횟수 + 자신을 호출한 횟수(1) 더하기\n    d[i] = d[i - 1] + 1\n    \n    \n    # 나누어 떨어지는 수가 없으면 자신의 인덱스를 그대로 추가하고,\n    # 2로 나누어 떨어지면 몫에 해당하는 값에 횟수를 가리키는 +1 \n    \n    # 현재 수가 2로 나누어 떨어지는 경우\n    if i % 2 == 0:\n        d[i] = min(d[i], d[i // 2] + 1)\n\n    # 현재 수가 3으로 나누어 떨어지는 경우\n    if i % 3 == 0:\n        d[i] = min(d[i], d[i // 3] + 1)\n    \n    # 현재 수가 5로 나누어 떨어지는 경우\n    if i % 5 == 0:\n        d[i] = min(d[i], d[i // 5] + 1)\n        \nprint(d[x])\n#    2\nd 변수의 각 인덱스에 1로 만드는 최소한의 횟수가 저장됨\nd1 = 0\nd2 : d1 + 1 -> 1 -> 2로 나누어 떨어짐 min(d2, d1+1) -> (1, 1) -> 1\nd3 : d2 + 1 -> 2 -> 3으로 나누어 떨어짐 min(d3, d1 + 1) -> (2, 1) -> 1\nd4 : d3 + 1 -> 2 -> 2로 나누어 떨어짐 min(d4, d2 + 1) -> (2, 2) -> 2\nd5 : d4 + 1 -> 3 -> 5로 나누어 떨어짐 min(d5, d1 + 1) -> (3, 1) -> 1\nd6 : d5 + 1 -> 2 -> 2로 나누어 떨어짐 min(d6, d3 + 1) -> (2, 2) -> 2\n                    3으로 나누어 떨어짐 min(d6, d2 + 1) -> (2, 2) -> 2\nd7 : d6 + 1 -> 3\nd8 : d7 + 1 -> 4 -> 2로 나누어 떨어짐 min(d8, d4 + 1) -> (4, 3) -> 3\nd9 : d8 + 1 -> 4 -> 3으로 나누어 떨어짐 min(d9, d3 + 1) -> (4, 2) -> 2"
  },
  {
    "objectID": "books/This_is_coding_test/08dynamicProgramming.html#개미-전사-p220",
    "href": "books/This_is_coding_test/08dynamicProgramming.html#개미-전사-p220",
    "title": "08장 Dynamic Programming(동적 계획법) p208",
    "section": "개미 전사 p220",
    "text": "개미 전사 p220\nd <- 이전까지 숫자 합계 중 가장 큰 합계 저장\n\nd[0] <- 변수의 초기값\nd[1] <- d[0], d[1] 중 큰 값\nd[n] <- d[n-1]과 d[n-2]+d[n] 중 큰 값 저장 왜냐면, -1 인덱스를 쓰거나(자신을 더할 수 없음) -2 인덱스를 써야하기(자신 더할 수 있음) 때문에\n\n# 내 코드 -> 틀림\n# 입력 숫자 크기 +1의 리스트 변수 만들기\n# 3부터 크기 만큼 반복\n# 인덱스에 -2까지의 합계 저장\n\n\nk = [1,3,1,5, 1, 1, 5]\nn = len(k)\n\nd = [0] * (n + 1)\n\nfor i in range(2, n):\n    \n    d[1] = k[0] + k[1]\n    d[i] = k[i-2] + k[i]\n    d[i] = max( d[i], d[i-1])\n    \nprint(d[n-1])\n#    8\n# 교재 코드\n\nn = int(input())\n# 모든 식량 정보 입력\narray = list(map(int, input().split()))\n\n# 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화\nd = [0] * 100\n\nd[0] = array[0]\nd[1] = max(array[0], array[1])\nfor i in range(2, n):\n    d[i] = max(d[i-1], d[i-2]+array[i])\n    \nprint(d[n-1])\n#    7\n#    1 3 1 5 1 1 5\n#    13"
  },
  {
    "objectID": "books/This_is_coding_test/08dynamicProgramming.html#바닥-공사-p223",
    "href": "books/This_is_coding_test/08dynamicProgramming.html#바닥-공사-p223",
    "title": "08장 Dynamic Programming(동적 계획법) p208",
    "section": "바닥 공사 P223",
    "text": "바닥 공사 P223\n# 못 품\nn = int(input())\n\nd = [0] * 1001\nd[1] = 1  # 세로 1개\nd[2] = 3  # 가로 2개, 세로 2개, 정방형 1개\n\nfor i in range(3, n+1):\n    \n    if i % 2 == 1:\n        d[i] = d[i-1] + 1 # 홀수번째는 세로 1개 넣을 공간만 남음\n    else:\n        d[i] = d[i-2] + 3\n\nprint(d[n])\n#    3\n#    4\n# 교재 풀이\n\nn = int(input())\n\nd = [0] * 1001\nd[1] = 1  # 세로 1개\nd[2] = 3  # 가로 2개, 세로 2개, 정방형 1개\n\nfor i in range(3, n+1):\n    d[i] = ( d[i-1] + 2 * d[i-2] ) % 796796 \n\nprint(d[n])\n#    4\n#    11"
  },
  {
    "objectID": "books/This_is_coding_test/08dynamicProgramming.html#효율적인-화폐-구성-p226",
    "href": "books/This_is_coding_test/08dynamicProgramming.html#효율적인-화폐-구성-p226",
    "title": "08장 Dynamic Programming(동적 계획법) p208",
    "section": "효율적인 화폐 구성 p226",
    "text": "효율적인 화폐 구성 p226\n# 화폐 가치가 큰 것부터 정렬\n# 3으로 나눈 나머지가 2로 나누어 떨어져야 함\n\nn, m = map(int, input().split())\np = [ int(input()) for _ in range(n) ]\n\nresult = 0\np.sort(reverse=True)\n\nfor i in range(0, len(p)-1):\n    a = (m % p[i])\n    b = p[i+1]\n    if a % b == 0:\n        result += ( (m // p[i]) + (m % p[i]) // p[i+1] )\n    else:\n        result = -1\n\nprint(result)\n#    2 10000\n#    2\n#    3\n#    -1\n# 교재 답\n\nn, m = map(int, input().split())\n\n# n 개의 화폐 단위\narray = []\nfor i in range(n):\n    array.append(int(input()))\n    \n# 한 번 계산된 결과를 저장하기 위한 DP table 초기화\nd = [10001] * (m + 1) # 인덱스와 숫자를 맞추기 위해 + 1\n\nd[0] = 0\nfor i in range(n): # 화폐 단위 작은 것부터 \n    for j in range(array[i], m + 1): #  화폐 단위(array)마다 합계 금액(m)을 0부터 순회하여 화폐 개수 입력\n        if d[j-array[i]] != 10001:\n            d[j] = min(d[j], d[j-array[i]] + 1)\n            \n# 계산된 결과 출력\nif d[m] == 10001: # 최종적으로 m원을 만들 방법이 없으면\n    print(-1)\nelse:\n    print(d[m])\n#    2 15\n#    2\n#    3\n#    5"
  },
  {
    "objectID": "books/This_is_coding_test/09dijkstra.html",
    "href": "books/This_is_coding_test/09dijkstra.html",
    "title": "09장 다익스트라(Dijkstra) 최단 경로(Shortest Path) 알고리즘",
    "section": "",
    "text": "jupyter 에서는 stdin 이 제대로 구성되어 있지 않기 때문에 stdin.readline()을 실행하면 입력을 받지 못하고 빈 문자열이 반환됨. input() 사용해야 함"
  },
  {
    "objectID": "books/This_is_coding_test/09dijkstra.html#우선순위-큐-이용",
    "href": "books/This_is_coding_test/09dijkstra.html#우선순위-큐-이용",
    "title": "09장 다익스트라(Dijkstra) 최단 경로(Shortest Path) 알고리즘",
    "section": "우선순위 큐 이용",
    "text": "우선순위 큐 이용\nimport heapq\n\n# n, m = map(int, input().split())\n# start = int(input())\ngraph = [[] for i in range(n + 1)]  # 노드 개수\ndistance = [INF] * (n + 1)\nn, m, start = 6, 11, 1\n\n# 모든 간선 정보\ngraph = [[], [(2,2),(3,5),(4,1)],[(3,3),(4,2)],[(2,3),(6,5)],[(3,3),(5,1)],[(3,1),(6,2)],[]]\n# for _ in range(m):\n#     a, b, c = map(int, input().split())\n#     graph[a].append((b,c))\n\n\ndef dijkstra(start):\n    q = []  # 우선순위 큐\n    # 시작 노드로 가기 위한 최단 경로는 0으로 설정. 큐에 삽입\n    heapq.heappush(q, (0, start))\n    distance[start] = 0\n    while q:  # 큐가 비어있지 않다면\n        # 최단거리가 가장 작은 노드에 대한 정보 꺼내기\n        dist, now = heapq.heappop(q)\n        # 현재 노드가 이미 처리된 적이 있으면 무시. 저장된 거리가 꺼낸 거리보다 짧은 경우\n        if distance[now] < dist:\n            continue\n        # 현재 노드와 연결된 다른 노드 확인\n        for i in graph[now]:\n            cost = dist + i[1]  # 기존 거리 + 현재 거리\n            # 현재 노드를 거쳐서 다른 노드로 이동하는 거리가 더 짧은 경우\n            if cost < distance[i[0]]:\n                distance[i[0]] = cost\n                heapq.heappush(q, (cost, i[0]))\ndijkstra(start)\n\n# 모든 노드로 가는 최단거리 출력\nfor i in range(1, n + 1):\n    if distance[i] == INF:\n        print('INFINITY')\n    else:\n        print(distance[i])\n#    0\n#    2\n#    3\n#    1\n#    2\n#    4"
  },
  {
    "objectID": "books/This_is_coding_test/09dijkstra.html#전보-p262",
    "href": "books/This_is_coding_test/09dijkstra.html#전보-p262",
    "title": "09장 다익스트라(Dijkstra) 최단 경로(Shortest Path) 알고리즘",
    "section": "전보 p262",
    "text": "전보 p262\n\n입력: 노드 개수, 간선 개수, 시작 노드\n입력: 출발 노드, 도착 노드, 소요 시간\n출력: 메시지 받는 총 노드 개수, 최장 거리의 노드가 메시지 받는데 걸리는 최소 시간\n\n# 입력 구현\nINF = int(1e9)\nn, m, start = map(int, input().split())\n\n# 간선과 소요 시간 입력\ngraph = [[] for _ in range(n + 1)]\nfor _ in range(m):\n    x, y, z = map(int, input().split())\n    graph[x].append([y, z])\ngraph\n#    3 2 1\n#    1 2 4\n#    1 3 2\n#    [[], [[2, 4], [3, 2]], [], []]\n# 방문 표시, 거리 \nd = [INF] * (n + 1)\nd\n#    [1000000000, 1000000000, 1000000000, 1000000000]\n# 시작 노드 거리=0, 방문=True\nimport heapq\n\ndef dijk(start):\n    q = []\n    heapq.heappush(q, (0, start))\n    d[start] = 0\n    while q:\n        # 가장 짧은 노드 정보 꺼내기\n        shortest_d, now_node = heapq.heappop(q)\n\n        if shortest_d > d[now_node]:\n            continue\n        # 현재 노드와 연결된 다른 노드 확인\n        for i in graph[now_node]:\n            cost = shortest_d + i[1]\n            if cost < d[i[0]]:\n                d[i[0]] = cost\n                heapq.heappush(q, (cost, i[0]))\n    return d\n\ndijk(start)\n#    [1000000000, 0, 4, 2]\n# 출력\n\n# 도달할 수 있는 노드 개수\ncount = 0\n\n# 도달할 수 있는 노드 중 가장 멀리 있는 노드와의 최단 거리\nmax_distance = 0\nfor i in d:\n    if i != INF:\n        count += 1\n        max_distance = max(max_distance, i)\n\nprint('노드 개수: ', count - 1) # 시작 노드 제외\nprint('모두 메시지 받는 데까지 걸린 시간: ', max(d[1:]))\n#    노드 개수:  2\n#    모두 메시지 받는 데까지 걸린 시간:  4"
  },
  {
    "objectID": "books/This_is_coding_test/04implementation.html",
    "href": "books/This_is_coding_test/04implementation.html",
    "title": "04장 구현",
    "section": "",
    "text": "if nx < 1 or ny < 1 or nx > N or ny > N 부분 인덴트 오률에 대한 저자 답변"
  },
  {
    "objectID": "books/This_is_coding_test/10disjoint.html",
    "href": "books/This_is_coding_test/10disjoint.html",
    "title": "10장 서로소 집합(Disjoint Sets) p268",
    "section": "",
    "text": "union-find 자료구조\nunion 연산: 2개의 원소가 포함된 집합을 하나의 집합으로 합치는 연산\nfind 연산: 특정한 원소가 속한 집합이 어떤 집합인지 알려주는 연산\n트리 자료구조 이용"
  },
  {
    "objectID": "books/This_is_coding_test/10disjoint.html#특정-원소가-속한-집합-찾기parent-부모-테이블-x-노드-번호",
    "href": "books/This_is_coding_test/10disjoint.html#특정-원소가-속한-집합-찾기parent-부모-테이블-x-노드-번호",
    "title": "10장 서로소 집합(Disjoint Sets) p268",
    "section": "특정 원소가 속한 집합 찾기(parent = 부모 테이블, x = 노드 번호)",
    "text": "특정 원소가 속한 집합 찾기(parent = 부모 테이블, x = 노드 번호)\ngraph RL\n  4(4) --> 3(3) --> 2(2) --> 1(1)\n  6(6) --> 5(5)\n\n\n\n노드 번호\n1\n2\n3\n4\n5\n6\n\n\n\n\n부모\n1\n1\n2\n1\n5\n5\n\n\n\ndef find_parent(parent, x):\n\n    # 루트 노드가 아니면, 루트 노드를 찾을 때까지(원소가 자신을 부모로 가질 때까지) 재귀적으로 호출\n    if parent[x] != x:   # 부모 테이블 인덱스가 자기 자신을 부모로 가지지 않으면 \n        return find_parent(parent, parent[x])  # 부모의 노드 번호를 인자로 입력\n    \n    return x\n\n두 원소가 속한 집합 합치기\n부모 번호가 작은 쪽인 부모가 된다.\ndef union_parent(parent, a, b): \n    \n    a = find_parent(parent, a) # 부모 노드 찾기\n    b = find_parent(parent, b) # 부모 노드 찾기\n    \n    # 부모 번호가 작은 쪽이 상대방의 부모가 된다\n    if a < b:\n        parent[b] = a\n    else:\n        parent[a] = b\n\n\n노드 개수와 간선(union 연산) 개수 입력 받아 부모 테이블 만들기\nv, e = map(int, input().split())\nparent = [0] * (v + 1)   # 부모 테이블을 0으로 초기화\n\nfor i in range(1, v + 1):\n    parent[i] = i  # 부모 테이블을 자기 자신으로 초기화\n\n\nunion 연산 수행할 값 입력\n1 4, 2 3, 2 4, 5 6\nfor i in range(e):\n    a, b = map(int, input().split())\n    union_parent(parent, a, b)\n\nparent\n\n[0, 1, 1, 2, 1, 5, 5]\n\n\n\n각 원소가 속한 집합 출력\nprint('각 원소가 속한 집합: ', end=' ')\nfor i in range(1, v + 1):\n    print(find_parent(parent, i), end=' ')\nprint()\n\n각 원소가 속한 집합: 1 1 1 1 5 5\n\n\n\n부모 테이블 내용 출력\nprint('부모 테이블: ', end=' ')\nfor i in range(1, v + 1):\n    print(parent[i], end=' ')\n\n부모 테이블: 1 1 2 1 5 5"
  },
  {
    "objectID": "books/This_is_coding_test/05gcd.html",
    "href": "books/This_is_coding_test/05gcd.html",
    "title": "05장 최대공약수 계산",
    "section": "",
    "text": "수학 공식: 유클리드 호제법\n\n두 자연수 A, B에 대해(A>B) A를 B로 나눈 나머지를 R이라고 할 때\nA와 B의 최대공약수 = B와 R의 최대공약수\n\ndef gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(192, 162))"
  },
  {
    "objectID": "books/This_is_coding_test/06count_sort.html",
    "href": "books/This_is_coding_test/06count_sort.html",
    "title": "06장 계수 정렬(Count Sort) 알고리즘",
    "section": "",
    "text": "최악의 경우에도 O(N+K)를 보장. N=데이터 개수, K=최대값 크기\n특정 조건에 부합할 때만 사용할 수 있지만 매우 빠름\n일반적으로 가장 큰 데이터와 가장 작은 데이터의 차이가 1,000,000을 넘지 않을 때 효과적임\n계수 정렬을 이용할 때는 ‘모든 범위를 담을 수 있는 크기의 리스트(배열)를 선언해야 함’\n선언할 리스트 크기는 모든 범위 + 1. 왜냐면 0부터 시작하기 때문\n기존 리스트의 값을 새로운 리스트의 인덱스로 사용하여 +1 저장.\n새로운 리스트의 인덱스를 이용해 정렬하기 때문에 저장과 동시에 자동 정렬됨\n0 0 1 1 2 2 3 4 5 5 6 7 8 9 9"
  },
  {
    "objectID": "books/This_is_coding_test/06count_sort.html#부품-찾기-p199",
    "href": "books/This_is_coding_test/06count_sort.html#부품-찾기-p199",
    "title": "06장 계수 정렬(Count Sort) 알고리즘",
    "section": "부품 찾기 p199",
    "text": "부품 찾기 p199\n# me\n\n# n = int(input())\n# n_list = list(map(int, input().split()))\n              \n# m = int(input())\n# m_list = list(map(int, input().split()))\n\nn = 5\nn_list = [8,3,7,9,2]\nm = 3\nm_list = [5,7,9]\n\n# n_list 계수정렬\nresult = [0] * ( max(n_list)+1 )\nfor i in n_list:\n    result[i] += 1\n\nsorted = []\nfor i in range(len(result)):\n    if result[i] > 0:\n        sorted.append(i)\nprint(sorted)\n\ndef binary_search(n_list, target, start, end):\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if n_list[mid] == target:\n            return 'yes'\n        elif n_list[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n\nfor target in m_list:\n    temp = binary_search(sorted, target, 0, n-1)\n    if temp == None:\n        temp = 'no'\n    print(temp, end=' ')\n[2, 3, 7, 8, 9]\nno yes yes \n# 교재\n\n# 가게의 부품 개수 입력받기\nn = int(input())\narray = [0] * 1000001\n\n# 가게에 있는 전체 부품 번호를 입력받아서 기록\nfor i in input().split():\n    array[int(i)] = 1\n    \n# 손님이 요청한 부품 개수 입력받기\nm = int(input())\n# 손님이 확인 요청한 전체 부품 번호를 공백으로 구분하여 입력\nx = list(map(int, input().split()))\n\n# 손님이 확인 요청한 부품 번호를 하나씩 확인\nfor i in x:\n    # 해당 부품이 존재하는지 확인\n    if array[i] == 1:\n        print('yes', end=' ')\n    else:\n        print('no', end=' ')\n    5\n    8 3 7 9 2\n    3\n    5 7 9\n    no yes yes"
  },
  {
    "objectID": "books/This_is_coding_test/07parametricSearch.html",
    "href": "books/This_is_coding_test/07parametricSearch.html",
    "title": "07장 Parametric Search p202",
    "section": "",
    "text": "원하는 조건을 만족하는 가장 알맞은 값을 찾는 문제\n보통 이진 탐색을 이용해 해결"
  },
  {
    "objectID": "books/This_is_coding_test/07parametricSearch.html#떡볶이-떡-만들기-p201",
    "href": "books/This_is_coding_test/07parametricSearch.html#떡볶이-떡-만들기-p201",
    "title": "07장 Parametric Search p202",
    "section": "떡볶이 떡 만들기 p201",
    "text": "떡볶이 떡 만들기 p201\n# 교재 설명 읽고 짠 코드\n\nn, m = 4, 6\narray = [19,15,10,17]\n\nstart = 0\nend = max(array)\n\ndef remainder(array, mid):\n    result = []\n    for i in array:\n        if i > mid:\n            result.append(i - mid)\n    return sum(result)\n\ndef bi_search(array, m, start, end):\n    while start <= end:\n        mid = (start + end) // 2\n        if remainder(array, mid) == m:\n            return mid\n        elif remainder(array, mid) > m:\n            start = mid + 1\n        else:\n            end = mid - 1\n        \nprint(bi_search(array, m, start, end))\n# 15\n# 교재 코드\n\n# 떡의 개수(n)와 요청한 떡의 길이(m) 입력받기\nn, m = list(map(int, input().split()))\n# 각 떡의 개별 높이 정보 입력받기\narray = list(map(int, input().split()))\n\n# 이진 탐색 위한 시작점, 끝점 설정\nstart = 0\nend = max(array)\n\n# 이진 탐색 수행\nresult = 0\nwhile(start <= end):\n    total = 0\n    mid = (start + end) // 2\n    for x in array:\n        # 잘랐을 때의 양 계산\n        if x > mid:\n            total += x - mid\n    # 떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)\n    if total < m:\n        end = mid - 1\n    # 떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)\n    else:\n        result = mid # 최대한 덜 잘랐을 때가 정답이므로 여기에서 result 기록\n        start = mid + 1\n        \nprint(result)\n#    4 6\n#    19 15 10 17\n#    15"
  },
  {
    "objectID": "books/This_is_coding_test/06selection_sort.html",
    "href": "books/This_is_coding_test/06selection_sort.html",
    "title": "06장 선택 정렬(Selection Sort) 알고리즘",
    "section": "",
    "text": "array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]\nprint(array)\n\nfor i in range(len(array)):\n    print('정렬 안 된 첫 번째 값=', array[i])\n    \n    # 왼쪽부터 비교하기 때문에 시작할 때는 첫 번째 인덱스를 최소값으로 가정한다.\n    # 교환이 이루어진 뒤에는 최소값이 가장 왼쪽에 온다.\n    min_index = i  \n    \n    for j in range(i+1, len(array)):\n        print('기존 최소값=', array[min_index], end=' => ')\n        print('j=', array[j], end=' ')\n        \n        # 첫 번째 인덱스값이 뒤의 인덱스값보다 크면 뒤의 인덱스를 최소값 인덱스(min_index)에 넣는다.\n        # 새로 부여한 최소값과 이후 숫자를 비교하여 더 작은 수가 나오면 최소값 인덱스(min_index)에 넣는다.\n        if array[min_index] > array[j]:\n            min_index = j\n            print('바뀐 최소값=', array[min_index])\n        print()\n    \n    # 첫 번째 인덱스와 두 번째 이후 인덱스 중 최소값의 인덱스 교환\n    array[i], array[min_index] = array[min_index], array[i]\n    print('\\n', array, '\\n')\n\narray\n    [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]\n    정렬 안 된 첫 번째 값= 7\n    기존 최소값= 7 => j= 5 바뀐 최소값= 5\n    \n    기존 최소값= 5 => j= 9 \n    기존 최소값= 5 => j= 0 바뀐 최소값= 0\n    \n    기존 최소값= 0 => j= 3 \n    기존 최소값= 0 => j= 1 \n    기존 최소값= 0 => j= 6 \n    기존 최소값= 0 => j= 2 \n    기존 최소값= 0 => j= 4 \n    기존 최소값= 0 => j= 8 \n    \n     [0, 5, 9, 7, 3, 1, 6, 2, 4, 8] \n    \n    정렬 안 된 첫 번째 값= 5\n    기존 최소값= 5 => j= 9 \n    기존 최소값= 5 => j= 7 \n    기존 최소값= 5 => j= 3 바뀐 최소값= 3\n    \n    기존 최소값= 3 => j= 1 바뀐 최소값= 1\n    \n    기존 최소값= 1 => j= 6 \n    기존 최소값= 1 => j= 2 \n    기존 최소값= 1 => j= 4 \n    기존 최소값= 1 => j= 8 \n    \n     [0, 1, 9, 7, 3, 5, 6, 2, 4, 8] \n    \n    정렬 안 된 첫 번째 값= 9\n    기존 최소값= 9 => j= 7 바뀐 최소값= 7\n    \n    기존 최소값= 7 => j= 3 바뀐 최소값= 3\n    \n    기존 최소값= 3 => j= 5 \n    기존 최소값= 3 => j= 6 \n    기존 최소값= 3 => j= 2 바뀐 최소값= 2\n    \n    기존 최소값= 2 => j= 4 \n    기존 최소값= 2 => j= 8 \n    \n     [0, 1, 2, 7, 3, 5, 6, 9, 4, 8] \n    \n    정렬 안 된 첫 번째 값= 7\n    기존 최소값= 7 => j= 3 바뀐 최소값= 3\n    \n    기존 최소값= 3 => j= 5 \n    기존 최소값= 3 => j= 6 \n    기존 최소값= 3 => j= 9 \n    기존 최소값= 3 => j= 4 \n    기존 최소값= 3 => j= 8 \n    \n     [0, 1, 2, 3, 7, 5, 6, 9, 4, 8] \n    \n    정렬 안 된 첫 번째 값= 7\n    기존 최소값= 7 => j= 5 바뀐 최소값= 5\n    \n    기존 최소값= 5 => j= 6 \n    기존 최소값= 5 => j= 9 \n    기존 최소값= 5 => j= 4 바뀐 최소값= 4\n    \n    기존 최소값= 4 => j= 8 \n    \n     [0, 1, 2, 3, 4, 5, 6, 9, 7, 8] \n    \n    정렬 안 된 첫 번째 값= 5\n    기존 최소값= 5 => j= 6 \n    기존 최소값= 5 => j= 9 \n    기존 최소값= 5 => j= 7 \n    기존 최소값= 5 => j= 8 \n    \n     [0, 1, 2, 3, 4, 5, 6, 9, 7, 8] \n    \n    정렬 안 된 첫 번째 값= 6\n    기존 최소값= 6 => j= 9 \n    기존 최소값= 6 => j= 7 \n    기존 최소값= 6 => j= 8 \n    \n     [0, 1, 2, 3, 4, 5, 6, 9, 7, 8] \n    \n    정렬 안 된 첫 번째 값= 9\n    기존 최소값= 9 => j= 7 바뀐 최소값= 7\n    \n    기존 최소값= 7 => j= 8 \n    \n     [0, 1, 2, 3, 4, 5, 6, 7, 9, 8] \n    \n    정렬 안 된 첫 번째 값= 9\n    기존 최소값= 9 => j= 8 바뀐 최소값= 8\n    \n    \n     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \n    \n    정렬 안 된 첫 번째 값= 9\n    \n     [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \n    \n\n\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "books/This_is_coding_test/09heap.html",
    "href": "books/This_is_coding_test/09heap.html",
    "title": "09장 Heap 자료 구조",
    "section": "",
    "text": "최댓값과 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조\nA가 B의 부모노드이면, A 키값과 B 키값 사이에는 대소관계가 성립한다.\n최대 힙: 부모노드 키값 > 자식노드 키값\n최소 힙: 부모노드 키값 < 자식노드 키값\n형제 사이에는 대소관계가 정해지지 않는다."
  },
  {
    "objectID": "books/This_is_coding_test/09heap.html#파이썬-구현-p454",
    "href": "books/This_is_coding_test/09heap.html#파이썬-구현-p454",
    "title": "09장 Heap 자료 구조",
    "section": "파이썬 구현 p454",
    "text": "파이썬 구현 p454\n\nheapq 라이브러리\n최소 힙으로 구성\nheappush(), heappop()"
  },
  {
    "objectID": "books/This_is_coding_test/09heap.html#heap-sort-힙-정렬",
    "href": "books/This_is_coding_test/09heap.html#heap-sort-힙-정렬",
    "title": "09장 Heap 자료 구조",
    "section": "Heap Sort 힙 정렬",
    "text": "Heap Sort 힙 정렬\n# 오름차순\n\nimport heapq\n\ndef heapsort(iterable):\n    h = []\n    result = []\n    for i in iterable:\n        heapq.heappush(h, i)   # 모든 원소를 h 변수에 삽입\n        print('push', h)\n    for _ in range(len(h)):\n        result.append(heapq.heappop(h)) # 힙에 삽입된 모든 변수를 차례대로 꺼내기\n        print('pop', h)\n    return result\n\nprint( heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8]) )\n    push [1]\n    push [1, 3]\n    push [1, 3, 5]\n    push [1, 3, 5, 7]\n    push [1, 3, 5, 7, 9]\n    push [1, 3, 2, 7, 9, 5]\n    push [1, 3, 2, 7, 9, 5, 4]\n    push [1, 3, 2, 6, 9, 5, 4, 7]\n    push [1, 3, 2, 6, 9, 5, 4, 7, 8]\n    pop [2, 3, 4, 6, 9, 5, 8, 7]\n    pop [3, 6, 4, 7, 9, 5, 8]\n    pop [4, 6, 5, 7, 9, 8]\n    pop [5, 6, 8, 7, 9]\n    pop [6, 7, 8, 9]\n    pop [7, 9, 8]\n    pop [8, 9]\n    pop [9]\n    pop []\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]"
  },
  {
    "objectID": "books/This_is_coding_test/09heap.html#최대-힙-구현",
    "href": "books/This_is_coding_test/09heap.html#최대-힙-구현",
    "title": "09장 Heap 자료 구조",
    "section": "최대 힙 구현",
    "text": "최대 힙 구현\n# 내림차순\n\nimport heapq\n\ndef heapsort(iterable):\n    h = []\n    result = []\n    for i in iterable:\n        heapq.heappush(h, -i) # 부호를 바꾸어서 입력\n    for _ in range(len(h)):\n        result.append( -heapq.heappop(h) )  # 출력값의 부호를 바꾸어 부호 원상 복귀\n    return result\n\nprint(heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8]))        \n#    [9, 8, 7, 6, 5, 4, 3, 2, 1]"
  },
  {
    "objectID": "books/This_is_coding_test/06sorting_quiz.html",
    "href": "books/This_is_coding_test/06sorting_quiz.html",
    "title": "06장 정렬 실전 문제",
    "section": "",
    "text": "n = int(input())\nper = []\nfor _ in range(n):\n    per.append(int(input()))\n\nfor i in sorted(per, reverse=True):\n    print(i, end=' ')\n    3\n    15\n    27\n    12\n    27 15 12"
  },
  {
    "objectID": "books/This_is_coding_test/06sorting_quiz.html#성적이-낮은-순서로-학생-출력하기-p180",
    "href": "books/This_is_coding_test/06sorting_quiz.html#성적이-낮은-순서로-학생-출력하기-p180",
    "title": "06장 정렬 실전 문제",
    "section": "성적이 낮은 순서로 학생 출력하기 p180",
    "text": "성적이 낮은 순서로 학생 출력하기 p180\n\n리스트 내 리스트의 두 번째 변수 기준으로 오름차순 정렬\n\n==기억할 것== : sorted(리스트, key= 정렬기준 지정 함수)\nn = int(input())\narray = []\nfor _ in range(n):\n    name, score = input().split()\n    array.append((name, int(score)))\n\ndef sort_key(data):\n    return data[1]\n    \nsorted_scores = sorted(array, key = sort_key)\n\nfor stu in sorted_scores:\n    print(stu[0], end=' ')\n    3\n    홍길동 80\n    이순신 70\n    김구 90\n    이순신 홍길동 김구 \n# 함수를 별도로 만들지 않고 람다함수 이용\n\nn = int(input())\n\narray = []\nfor i in range(n):\n    input_data = input().split()\n    array.append( (input_data[0], int(input_data[1])))\n    \narray = sorted(array, key=lambda student:student[1])\n\nfor student in array:\n    print(student[0], end=' ')\n    3\n    홍길도 60\n    이순신 75\n    김구 90\n    홍길도 이순신 김구"
  },
  {
    "objectID": "books/This_is_coding_test/06sorting_quiz.html#두-배열의-원소-교체-p182",
    "href": "books/This_is_coding_test/06sorting_quiz.html#두-배열의-원소-교체-p182",
    "title": "06장 정렬 실전 문제",
    "section": "두 배열의 원소 교체 p182",
    "text": "두 배열의 원소 교체 p182\n# k 번만큼 A의 가장 작은 숫자와 B의 가장 큰 숫자를 교환\n\nn, k = map(int, input().split())\na = [ int(i) for i in input() ]\nb = [ int(i) for i in input() ]\n\na, b = sorted(a), sorted(b, reverse=True)\n\nfor i in range(k):\n    a[i], b[i] = b[i], a[i]       # <- a[i] 가 a[i] 보다 큰 경우를 생각하지 못함.\n    \nsum(a)\n    5 3\n    12543\n    55665\n\n    26\n# 교재 코드\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na.sort()\nb.sort(reverse=True)\n\nfor i in range(k):\n    # A의 원소가 B의 원소보다 작은 경우\n    if a[i] < b[i]:\n        a[i], b[i] = b[i], a[i]\n    else:\n        break\n\nprint(sum(a))\n    5 3\n    1 2 5 4 3\n    5 5 6 6 5\n    26"
  },
  {
    "objectID": "books/This_is_coding_test/03greedy.html",
    "href": "books/This_is_coding_test/03greedy.html",
    "title": "03장 Greedy 알고리즘",
    "section": "",
    "text": "n: 거스름돈, count: 동전 개수\n가장 큰 돈부터 내림차순으로 coin_types 리스트 만듦. 왜냐면, 거스름돈을 줄 때 큰 돈부터 세기 때문.\n‘//’ 연산자는 몫 반환\n‘%’ 연자자는 나머지 반환\n\nn = 1260\ncount = 0\n\ncoin_types = [500, 100, 50, 10]\nfor coin in coin_types:\n    count += n // coin\n    n %= coin\n    \nprint(count)\n#    6\n\n큰 수의 법칙 p.92\n# 내가 푼 것 => 틀림\n# 나누어 떨어지지 않을 때를 고려 못 함\n\nn, m, k = map(int, input().split())\nx = list(map(int, input().split()))\n# n = 5\n# m = 8\n# k = 3\n# x = [2,4,5,4,6]\nresult = 0\n\nx.sort(reverse=True)\nfor _ in range(m//k):\n    result += x[0] * k\n    result += x[1]\n\nprint(result)\n#    5 9 3\n#    2 4 5 4 6\n#    69\n# 교재 풀이\n\nn, m, k = map(int, input().split())\ndata = list(map(int, input().split()))\n\ndata.sort()            # 오름차순 정렬\nfirst = data[n-1]      # 가장 큰 수 = 마지막 인덱스\nsecond = data[n-2]     # 두 번째로 큰 수\n\ncount = int(m / (k+1)) * k   # 가장 큰 수가 곱해지는 횟수\ncount += m % (k+1)           # k+1로 나누어 떨어지지 않을 때 나머지 만큼 큰 수가 더해짐\n\nresult = 0\nresult += count * first         # 큰 수가 더해짐\nresult += (m - count) * second  # 큰 수가 더해지는 횟수에서 남은 만큼 두 번째 큰 수가 더해짐 \n\nprint(result)\n#    5 9 3\n#    2 4 5 4 6\n#    52\n\n\n숫자 카드 게임 p96\n# 입력 코드(me)\n\nn, m = map(int, input().split())\nlist2d = []\nfor _ in range(n):\n    temp = list(map(int, input().split()))\n    list2d.append(temp)\nprint(list2d)\n#    2 4\n#    7 3 1 8\n#    3 3 3 4\n#    [[7, 3, 1, 8], [3, 3, 3, 4]]\n# min() 함수는 내부 리스트 첫 번째 요소로 크기 비교\n\nx = [[3, 1, 2], [4, 1, 4], [2, 2, 2]]\nprint(min(x))\ny = [[7,3,1,8],[3,3,3,4], [10,10,1,1]]\nprint(min(y))\n#    [2, 2, 2]\n#    [3, 3, 3, 4]\n# 내부 리스트의 최소값을 비교해서 가장 큰 내부 리스트 선택하는 코드를 짜야 할 듯\n# -> 내부 리스트를 소트하면 가장 작은 값이 첫 번째 요소로 온다.\n# -> max() -> 가장 큰 값 출력\n\nfor i in x:\n    i.sort()\n\nprint(max(x))\n#    [2, 2, 2]\n# 최종 코드(me)\n\nn, m = map(int, input().split())\nlist2d = []\nfor _ in range(n):\n    temp = list(map(int, input().split()))\n    list2d.append(temp)\n\nfor i in list2d :\n    i.sort()\n\nprint(max(list2d)[0])\n#    3 3\n#    3 1 2 \n#    4 1 4\n#     2 2 2\n#    2\n# 교재 min() 이용 답안\n\nn, m = map(int, input().split())\n\nresult = 0\n\nfor i in range(n):\n    data = list(map(int, input().split()))\n    min_value = min(data)\n    result = max(result, min_value)\nprint(result)\n#    3 3\n#    3 1 2\n#    4 1 4\n#    2 2 2\n#    2\n# 교재 2중 반복문 이용 답안\n\nn, m = map(int, input().split())\n\nresult = 0\n\nfor i in range(n):\n    data = list(map(int, input().split()))\n    min_value = 10001\n    for a in data:\n        min_value = min(min_value, a)\n    result = max(result, min_value)\n    \nprint(result)\n#    3 3\n#    3 1 2\n#    4 1 4\n#    2 2 2\n#    2\n\n\n1이 될 때까지 p99\n# 내가 푼 코드\n\nn, k = map(int, input().split())\ncount = 0\n\nimport time\n\nstart = time.time()\n\nwhile n > 1:\n    if n % k == 0:\n        n = n / k\n        count += 1\n    else:\n        n -= 1\n        count += 1\n        \nend = time.time()\n\nprint(count)\nprint(end - start)\n#    123456789 17\n#    42\n#    0.00013494491577148438\n# 교재 답\n\nn, k = map(int, input().split())\nresult = 0\n\nimport time\nstart = time.time()\n\nwhile True:\n    # (n == k로 나누어떨어지는 수)가 될 때까지 1씩 빼기\n    target = (n // k) * k       # n보다 작은 수 중에 k로 나누어 떨어지는 가장 큰 수\n    result += (n - target)      # n에서 target에 도달할 때까지 -1을 뺀 횟수\n    n = target\n    # n이 k보다 적을 때(더 이상 나눌 수 없을 때) 반복문 탈출\n    if n < k:\n        break\n    # k로 나누기\n    result += 1\n    n //= k\n    \n# 마지막으로 남은 수에 대해 1씩 빼기\nresult += (n - 1)\n\nend = time.time()\n\nprint(result)\nprint(end-start)\n#    123456789 17\n#    42\n#    0.0002512931823730469"
  },
  {
    "objectID": "books/pandas_in_action.html",
    "href": "books/pandas_in_action.html",
    "title": "목차",
    "section": "",
    "text": "Oct 10, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "books/tiny_python_project/01_ot.html",
    "href": "books/tiny_python_project/01_ot.html",
    "title": "👀",
    "section": "",
    "text": "created: 2022-10-10\n\n\n$ pytest -xv test.py\n\n저자가 작성한 test.py를 실행한다.\nv 옵션은 테스트 결과를 상세히 보여준다.\nx 옵션은 테스트 실패 시점에 실행을 중단한다.\n\n\n\n\nOS가 해당 파일을 어떤 언어로 처리할지 정하기 위해 사용한다. 파이썬은 무시한다. 파일 첫 줄에 아래 문장 추가한다.\n#!/usr/bin/env python3\n\n이후 ==python 명령 없이 바로 실행 가능.== eg. $ ./hello.py로 실행\n파일이 실행가능한 권한이 있어야 함(chmod -x 파일명)\n\n\n\n\n\nPC의 환경 출력: SHELL, USER, HOME, PATH, ….\n환경값만 출력하려면: $ echo $SHELL 등 명령 사용\n특정 프로그램을 찾아서 실행할 때 사용: $ env python\n\n\n\n\n$ ./hello.py -h 명령어를 입력하면 도움말이 출력되도록 설정한다.\nargparse 모듈은 프로그램에 인수를 전달하는 기능을 한다.\n\n\n\n프로그램에서 변경하고자 하는 부분을 찾아서 그곳에 들어갈 값을 인수로 전달한다.\n\n대시(-)로 시작하는 것은 옵션(option) 인수로, 지정하지 않아도 동작하며 기본값을 가짐\n대시가 없는 것은 위치(position) 인수로, 반드시 지정해야 하며 기본값을 갖지 않음\n\n#! /usr/bin/env python\n# 셔뱅은 이 코드를 실행할 때 어떤 프로그램을 사용할지 os에게 알려줌\n\n# 인수를 전달할 때 사용하는 모듈\nimport argparse\n\n# 이 parser가 모든 인수를 인지한다. description에 있는 내용이 도움말로 표시됨\nparser = argparse.ArgumentParser(description='Say hello')\n\n# 인사할 사람의 이름('name')을 인수로 전달한다고 파서에게 알려줌\n# parser.add_argument('name', help='Name to greet')\n\n# '-n'과 '--name'을 각각 축약형(short)과 일반형(long) 인수명으로 추가\n# 인수명을 추가하지 않을 경우 기본값인 'world'가 출력됨\n# 'metavar'는 인수명\nparser.add_argument('-n', '--name', metavar='name', default='world', help='Name to greet')\n\n# 인수를 프로그램에게 전달하라고 파서에게 지시\nargs = parser.parse_args()\n\n# args.name 값을 사용해 인사 메시지 출력(metavar에 지정한 이름)\nprint(\"Hello, \" + args.name + \"!\")\n\n\n# 실행 결과 ======================================\n# $ ./hello.py => Hello, World!\n# $ ./hello.py -n Jun => Hello, Jun!\n# $ ./hello.py -h => 도움말 출력\n# usage: hello.py [-h] [-n name]\n#\n# Say hello\n#\n# optional arguments:\n#   -h, --help            show this help message and exit\n#   -n name, --name name  Name to greet\n\n\n\n프로그램은 main()이라는 위치에서 시작하는 게 일반적이다.\n#! /usr/bin/env python\n# 셔뱅은 이 코드를 실행할 때 어떤 프로그램을 사용할지 os에게 알려줌\n\n# 인수를 전달할 때 사용하는 모듈\nimport argparse\n\ndef get_args():\n    '''\n    인수 전용 함수\n    '''\n    # 이 parser가 모든 인수를 인지한다. description에 있는 내용이 도움말로 표시됨\n    parser = argparse.ArgumentParser(description='Say hello')\n\n    # 인사할 사람의 이름('name')을 인수로 전달한다고 파서에게 알려줌\n    # parser.add_argument('name', help='Name to greet')\n\n    # '-n'과 '--name'을 각각 축약형(short)과 일반형(long) 인수명으로 추가\n    # 인수명을 추가하지 않을 경우 기본값인 'world'가 출력됨\n    # 'metavar'는 인수명\n    parser.add_argument('-n', '--name', metavar='name', default='World', help='Name to greet')\n\n    return parser.parse_args()\n\n\ndef main():\n    args = get_args()\n    \n    # args.name 값을 사용해 인사 메시지 출력(metavar에 지정한 이름)\n    print(\"Hello, \" + args.name + \"!\")\n\n\n# 모든 프로그램과 모듈은 __name__이라는 변수로 접근할 수 있는 이름을 갖고 있다.\n# 프로그램이 실행될 때 __name__이 __main__이라는 값으로 설정된다.\nif __name__ == '__main__':\n    main()\n    \n\n\n\nblack 또는 YAPF 실행\n$ black hello.py\nflake8\n$ flake8 hello.py\nhello.py:7:1: E302 expected 2 blank lines, found 1      <- 함수 사이는 두 줄 띄우기\nhello.py:20:80: E501 line too long (94 > 79 characters) <- 코드 길이가 79자 이상\nhello.py:27:1: W293 blank line contains whitespace      <- 빈 줄에 공백문자 있음\npylint\n❯ pylint hello.py\n************* Module hello\nhello.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nhello.py:27:0: C0116: Missing function or method docstring (missing-function-docstring)\n\n-----------------------------------\nYour code has been rated at 8.00/10\n셔뱅 다음 줄과 함수 선언 다음 줄에 문서 정보 추가 후 다시 실행하면 점수가 만점으로 오른다."
  },
  {
    "objectID": "books/tiny_python_project/05_howler.html",
    "href": "books/tiny_python_project/05_howler.html",
    "title": "05장 파일 및 STDOUT 사용",
    "section": "",
    "text": "인자를 반환할 때 인자가 파일명이면 내용을 반환한다는 생각을 전혀 못 했다.\n위치 인자와 옵션 인자는 순서에 관계 없이 입력해도 된다.\nsys.stdout 명령어를 배웠다. 터미널 출력이다.\n그런데, 저자의 코드도 마지막 테스트는 통과하지 못했다. ??\n\n#!/usr/bin/env python3\n\"\"\"\nAuthor : Me <me@foo.com>\nDate   : today\nPurpose: Howler (upper-cases input)\n\"\"\"\n\nimport os, sys\nimport argparse\n\n\n# --------------------------------------------------\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Howler (upper-cases input)',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('text',           # 위치 인수는 문자열일 수도 파일명일 수도 있다.\n                        metavar='text',\n                        type=str,\n                        help='Input string or file')\n\n    parser.add_argument('-o',\n                        '--outfile',\n                        help='Output filename',\n                        metavar='str',\n                        type=str,\n                        default='')\n\n    args = parser.parse_args()\n\n    # args.text가 존재하는 파일명이라면 파일 내용을 반환한다.\n    if os.path.isfile(args.text):\n        args.text = open(args.text).read().rstrip()\n\n    return args\n\n# --------------------------------------------------\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n    args = get_args()\n\n    # outfile 인자가 있으면 파일에 쓰고, 그렇지 않으면 화면에 출력한다.\n    # 파일에 쓸 때는 대문자로 쓴다.\n    out_fh = open(args.outfile, 'wt') if args.outfile else sys.stdout\n    out_fh.write(args.text.upper() + '\\n')\n    out_fh.close()\n        \n# --------------------------------------------------\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "books/tiny_python_project/02_crowsnest.html",
    "href": "books/tiny_python_project/02_crowsnest.html",
    "title": "👀",
    "section": "",
    "text": "created: 2022-10-10\n\n\n\nstatement: 반환값이 없음. eg. word = ‘narwhal’\nexpresstion: True 또는 False 반환. eg. word == ‘narwhal’\n\n\n\n\n단어의 첫글자가 모음이면 an, 그렇지 않으면 a 할당\narticle = 'an' if word[0].lower() in 'aeiou' else 'a'\n#!/usr/bin/env python3\n\"\"\"\nAuthor : jun <jun@localhost>\nDate   : 2022-10-10\nPurpose: Crow's Nest\n\"\"\"\n\nimport argparse\n\n\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description=\"Crow's Nest -- choose the correct article\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n    )\n\n    parser.add_argument(\"word\", help=\"A word\")\n\n    return parser.parse_args()\n\n\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n    args = get_args()\n    word = args.word\n\n    # if else문을 한 줄에 쓰기\n    article = \"an\" if word[0].lower() in \"aeiou\" else \"a\"\n    # print('Ahoy, Captain, {} {} off the larboard bow!'.format(article, word))\n    print(f\"Ahoy, Captain, {article} {word} off the larboard bow!\")\n\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "objectID": "books/tiny_python_project/04_jump.html",
    "href": "books/tiny_python_project/04_jump.html",
    "title": "04장 딕셔너리",
    "section": "",
    "text": "문제가 어렵지 않았다. 딕셔너리.get('검색할 key', 'key가 없을 때 반환값') 함수와 str.translation(str.maketrans(문자 변환 규칙 딕셔너리)) 함수를 배웠다."
  },
  {
    "objectID": "books/tiny_python_project/04_jump.html#내가-짠-코드",
    "href": "books/tiny_python_project/04_jump.html#내가-짠-코드",
    "title": "04장 딕셔너리",
    "section": "내가 짠 코드",
    "text": "내가 짠 코드\n#!/usr/bin/env python3\n\"\"\"\nAuthor : Me <me@foo.com>\nDate   : today\nPurpose: Jump the Five \n\"\"\"\n\nimport argparse\n\n\n# --------------------------------------------------\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='jump',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    \n    parser.add_argument('text',\n                metavar='str',\n                help='Input text')\n   \n    return parser.parse_args()\n\n\n# --------------------------------------------------\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n    jumper = {'1':'9','2':'8','3':'7','4':'6','5':'0','6':'4','7':'3','8':'2','9':'1','0':'5'}\n\n    args = get_args()\n    new_text = ''\n    for char in args.text:\n        new_text += jumper.get(char, char)\n    print(new_text)\n\n    text = 'Jenny = 867-5309'\n    print( text.translate(str.maketrans(jumper)) )\n\n# --------------------------------------------------\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "books/tiny_python_project/03_picnic.html",
    "href": "books/tiny_python_project/03_picnic.html",
    "title": "3장 리스트",
    "section": "",
    "text": "$ ./picnic.py chips\nYou are bringing chips.\n\n$ ./picnic.py \"potato chips\" chips \nYou are bringing potato chips and chips.\n\n$ ./picnic.py \"potato chips\" chips soda cupcakes\nYou are bringing potato chips, chips, soda, and cupcakes.\n\n$ ./picnic.py --sorted salad soda cupcakes \nYou are bringing cupcakes, salad, and soda.\n\n한 단어 입력하면 그대로 출력\n두 단어 입력하면 사이에 and 추가\n세 단어 이상 입력하면 사이에 쉼표 추가하고, 마지막에는 and도 추가\n--sorted 또는 -s 를 입력하면 정렬한 뒤 출력\n\nargparse 정리 문서: argparse\n==내가 짠 코드==\n#!/usr/bin/env python3\n\"\"\"\nAuthor : playdata <playdata@localhost>\nDate   : 2022-10-11\nPurpose: Picnic game\n\"\"\"\n\nimport argparse\n\nparser = argparse.ArgumentParser(\n    description=\"Argparse Python script\",\n    formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n)\n\n\n# --------------------------------------------------\ndef get_args():\n    \"\"\"get args\"\"\"\n\n    parser.add_argument(\n        \"items\",\n        metavar=\"str\",\n        nargs=\"+\",  # 인수 1개 이상 입력하라\n        type=str,  # 각 값은 정수로 변환될 수 있어야 하며, 그렇지 않으면 오류 처리\n        help=\"item(s) you want to bring\",\n    )\n\n    parser.add_argument(\n        \"-s\",\n        \"--sorted\",\n        help=\"sort items\",\n        action=\"store_true\",  # 옵션이 지정되면 arg.sorted 값에 True 입력\n    )\n\n    return parser.parse_args()\n\n\n# --------------------------------------------------\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n\nargs = get_args()\nif args.sorted:\n    items = sorted(args.items)\nelse:\n    items = args.items\n\n    if len(items) == 1:\n        print(f\"You are bringing {items[0]}.\")\n    elif len(items) == 2:\n        items = \" and \".join(items)\n        print(f\"You are bringing {items}.\")\n    else:\n        items[-1] = \"and \" + items[-1]\n        items = \", \".join(items)\n        print(f\"You are bringing {items}.\")\n\n\n# --------------------------------------------------\nif __name__ == \"__main__\":\n    main()\n==교재 코드==\n#!/usr/bin/env python3\n\"\"\"Picnic game\"\"\"\n\nimport argparse\n\n\n# 파이썬에서는 함수 순서가 중요하지 않다. 단지 읽는 사람을 배려해서 가장 앞에 놓는다.\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Picnic game',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('item',\n                        metavar='str',\n                        nargs='+',     # 하나 이상의 위치 인수(문자열)을 받는다\n                        help='Item(s) to bring')\n\n    parser.add_argument('-s',          # 옵션 인수(축약형) \n                        '--sorted',    # 옵션 인수\n                        action='store_true',   # 옵션이 있으면 True\n                        help='Sort the items')\n\n    return parser.parse_args()\n\n\n# 프로그램 시작 위치\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n    args = get_args()\n    items = args.item   # args에 있는 item 변수를 items에 저장\n    num = len(items)    # 리스트에 포함된 아이템 개수를 가져온다. nargs='+'를 사용했으므로 0개인 경우는 없다.\n\n    if args.sorted:     # args.sorted가 True 이면\n        items.sort()    # 아이템 정렬한다. 원본 변환. 반환값 없음\n\n    bringing = ''       # 가져올 아이템을 저장한 변수를 빈 문자열로 초기화\n    if num == 1:\n        bringing = items[0]\n    elif num == 2:\n        bringing = ' and '.join(items)\n    else:\n        items[-1] = 'and ' + items[-1]\n        bringing = ', '.join(items)\n\n    print('You are bringing {}.'.format(bringing))\n\n\n# --------------------------------------------------\nif __name__ == '__main__': # 여기서 main 네임스페이스에 있는지 확인해서 main() 함수 실행.\n    main()"
  },
  {
    "objectID": "books/tiny_python_project/07_gashlycrumb.html",
    "href": "books/tiny_python_project/07_gashlycrumb.html",
    "title": "07장 특정 단어로 시작하는 텍스트 출력",
    "section": "",
    "text": "텍스트 문서의 맨 앞 4줄만 출력: head -4 문서.txt\n인수로 입력한 파일이 존재하지 않으면 오류 메시지 출력하며 처리 중단: type=argparse.FileType('rt')"
  },
  {
    "objectID": "books/tiny_python_project/07_gashlycrumb.html#코드",
    "href": "books/tiny_python_project/07_gashlycrumb.html#코드",
    "title": "07장 특정 단어로 시작하는 텍스트 출력",
    "section": "코드",
    "text": "코드\nimport datetime\nh, m, s = map(int, input().split())\np = int(input())\nstart = datetime.datetime(100, 1, 1, h, m, s)\nend = start + datetime.timedelta(seconds=p)\nprint(end.strftime(\"%-H %-M %-S\"))"
  },
  {
    "objectID": "books/tiny_python_project/06_wc.html",
    "href": "books/tiny_python_project/06_wc.html",
    "title": "06장 단어 세기 프로그램 만들기",
    "section": "",
    "text": "argparse: 하나 이상의 핸들로 구성된 리스트 반환\n\n여러 개 인자를 받는 옵션이 3가지다. nargs=‘?’(0 또는 1개), ’*‘(0개 이상),’+’(1개 이상)\n파일을 인자로 받을 때 유효성 검증: type=argparse.FileType('rt')\n인수의 기본값을 표준 입력이 포함된 리스트로 설정: default=[sys.stdin]\n\narg.file: 파일 열기 핸들로 구성된 리스트\n\n인자로 입력한 파일 개수 출력: len(args.file)\n파일 인자를 변수에 받으면(파일 핸들, for fh in args.file) fh.name에 경로와 파일명이 저장된다.\n텍스트 파일 줄 개수 -> for line in fh(파일 핸들 내의 각 줄을 읽어나간다) -> 반복할 때마다 count 증가\n한 줄의 바이트 수 -> len(line)\n한 줄의 단어 개수 -> 공백으로 분리(문장부호 없다고 가정) -> 리스트 반환 -> len(line.split())\n스트링 포맷(str.format()): 각 항목 너비 설정 -> {항목:숫자} 항목이 숫자이면 오른쪽, 문자면 왼쪽 정렬"
  },
  {
    "objectID": "books/tiny_python_project/06_wc.html#코드",
    "href": "books/tiny_python_project/06_wc.html#코드",
    "title": "06장 단어 세기 프로그램 만들기",
    "section": "코드",
    "text": "코드\n#!/usr/bin/env python3\n\"\"\"\nAuthor : playdata <playdata@localhost>\nDate   : 2022-10-18\nPurpose: Emulate (word count)\n\"\"\"\n\nimport sys\nimport argparse\n\n\n# --------------------------------------------------\ndef get_args():\n    \"\"\"Get command-line arguments\"\"\"\n\n    parser = argparse.ArgumentParser(\n        description='Emulate (word count)',\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n\n    parser.add_argument('file',\n                        metavar='FILE',\n                        nargs=\"*\",   # 0개 이상의 인수를 받는다. '?'= 0 or 1개, '+'=1개 이상\n                        type=argparse.FileType('rt'), # argparse가 유효한 파일인지 검증한다. 문제 있으면 argparse가 프로그램을 멈추고 오류 메시지를 출력한다.\n                        help='Input file(s)', \n                        default=[sys.stdin]) # 기본값으로 sys.stdin이 포함된 리스트를 설정하면 STDIN(표준입력)을 사용할 수 있다.\n\n    return parser.parse_args()\n\n\n# --------------------------------------------------\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n    args = get_args()\n    \n\n    total_lines, total_words, total_bytes = 0, 0, 0\n    for fh in args.file:   # fh라는 변수를 사용해서 STDIN과 파일 핸들을 사용한다는 사실을 상기시킨다.\n        num_lines, num_words, num_bytes = 0, 0, 0\n        for line in fh:   # 파일 핸들을 한 줄씩 읽는다.\n            num_lines += 1\n            num_words += len(line.split()) # 공백을 기준으로 텍스트를 분리해 리스트로 저장 -> 리스트 크기 = 단어 개수. 문장 부호가 포함된 경우에는 오류 발생 -> 정규표현식 필요\n            num_bytes += len(line)         # 라인별 바이트 수를 더한다\n        total_lines += num_lines\n        total_words += num_words\n        total_bytes += num_bytes    \n        \n        print(f'{num_lines:8}{num_words:8}{num_bytes:8} {fh.name:8}') # {:8} 각 항목 너비가 8글자. 숫자는 오른쪽, 문자는 왼쪽 정렬된다.\n\n    if len(args.file) > 1:\n        print(f'{total_lines:8}{total_words:8}{total_bytes:8} total')\n\n# --------------------------------------------------\nif __name__ == '__main__':\n    main()"
  },
  {
    "objectID": "books/This_is_coding_test.html",
    "href": "books/This_is_coding_test.html",
    "title": "목차",
    "section": "",
    "text": "Oct 10, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pkm/gitignore_not_working.html",
    "href": "pkm/gitignore_not_working.html",
    "title": "gitignore가 적용 안 될 때",
    "section": "",
    "text": "원인: 캐시\n해결: 캐시를 삭제한다. $ git rm -r --cached ."
  },
  {
    "objectID": "pkm/ananconda_settings_in_window.html",
    "href": "pkm/ananconda_settings_in_window.html",
    "title": "ananconda settings in window",
    "section": "",
    "text": "윈도우 키 >>> 설정 >>> 시스템 >>> 정보 >>> 고급 시스템 설정 >>> ‘환경변수’ 버튼 클릭\n상단의 사용자 변수 블록 >>> 변수 열의 Path 선택 >>> ‘편집’ 버튼 클릭\n‘새로만들기’ 버튼 클릭 후 아래 경로 입력\n\nC: C: C:\n주의!!! 시스템에 따라 설치 경로가 다를 수 있으니, ananconda 설치 과정에서 보여지는 경로를 잘 기억하자.\n\n‘확인’ 버튼을 누르고 나온다."
  },
  {
    "objectID": "pkm/ananconda_settings_in_window.html#powershell에서-작업",
    "href": "pkm/ananconda_settings_in_window.html#powershell에서-작업",
    "title": "ananconda settings in window",
    "section": "powershell에서 작업",
    "text": "powershell에서 작업\n\n윈도우 기본 파워셀에서 작업하면 conda 가상환경이 실행되지 않았다.\n아나콘다파워셀을 실행시켜서 작업한다.\nvscode를 실행할 때도 아나콘다파워셀에서 coda .을 입력해 실행해야 터미널에서 아나콘다파워셀이 뜬다."
  },
  {
    "objectID": "pkm/PATH.html",
    "href": "pkm/PATH.html",
    "title": "리눅스 PATH",
    "section": "",
    "text": "의미: OS가 특정 프로그램을 찾기 위해 사용하는 디렉토리들의 집합\n현재 PATH에 잡혀있는 디렉토리 보기: $ echo $PATH\n특정 폴더(eg. ~/bin)를 PATH에 추가하기: $ PATH=~/bin:$PATH or $ export $PATH=/bin\n특정 폴더를 영구적으로 PATH에 포함하려면 ~/.bashrc에 추가"
  },
  {
    "objectID": "pkm/PATH.html#기능",
    "href": "pkm/PATH.html#기능",
    "title": "리눅스 PATH",
    "section": "기능",
    "text": "기능\n\n파일을 $PATH에 지정한 경로 중 한 곳에 놓으면 어느 경로에서든 실행할 수 있다.\n대부분 프로그램은 /usr/local/bin/에 설치된다.\nPATH 경로에 놓인 프로그램은 $ which 명령으로 위치를 찾을 수 있다."
  },
  {
    "objectID": "pkm/Material_for_MkDocs.html",
    "href": "pkm/Material_for_MkDocs.html",
    "title": "Material for MkDocs",
    "section": "",
    "text": "conda 가상환경 만들기: $ conda create -n mkdocs\n가상환경 들어가기: $ conda activate mkdocs\n설치: $ pip install mkdocs-material"
  },
  {
    "objectID": "pkm/Material_for_MkDocs.html#사이트-만들기",
    "href": "pkm/Material_for_MkDocs.html#사이트-만들기",
    "title": "Material for MkDocs",
    "section": "사이트 만들기",
    "text": "사이트 만들기\n$ mkdir 폴더이름 : 사이트로 구성할 폴더 만들기\n$ cd 폴더이름\n$ mkdocs new . : 사이트 기본 파일 생성. 아래와 같은 폴더와 파일을 만든다.\n.\n├─ docs/\n│  └─ index.md\n└─ mkdocs.yml"
  },
  {
    "objectID": "pkm/Material_for_MkDocs.html#mkdocs.yml-설정",
    "href": "pkm/Material_for_MkDocs.html#mkdocs.yml-설정",
    "title": "Material for MkDocs",
    "section": "mkdocs.yml 설정",
    "text": "mkdocs.yml 설정\nvscode에 Yaml extension 설치\nsettings >>> yaml.schemas 아래 코드 추가\n{\n  \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  }\n}"
  },
  {
    "objectID": "pkm/Material_for_MkDocs.html#사이트-미리보기",
    "href": "pkm/Material_for_MkDocs.html#사이트-미리보기",
    "title": "Material for MkDocs",
    "section": "사이트 미리보기",
    "text": "사이트 미리보기\n$ mkdocs serve\nINFO - Option search.lang ‘kr’ is not supported, falling back to ‘en’ ERROR - Config value: ‘plugins’. Error: The “roamlinks” plugin is not installed Aborted with 1 Configuration Errors!\n=> 해당 코드 모두 주석처리한 뒤 실행하니 일단 뜨기는 함"
  },
  {
    "objectID": "pkm/Material_for_MkDocs.html#사이트-만들기-1",
    "href": "pkm/Material_for_MkDocs.html#사이트-만들기-1",
    "title": "Material for MkDocs",
    "section": "사이트 만들기",
    "text": "사이트 만들기\n\ngithub actions 이용하기(선택)\n설명서\n\n\n로컬에서 build한 후에 올리기\n$ mkdocs build\n=> site/ 폴더가 만들어진 뒤 그 안에 변환된 html 파일을 넣음 => site/ 폴더를 깃허브에 올리면 됨."
  },
  {
    "objectID": "pkm/Material_for_MkDocs.html#기타-설정-방법",
    "href": "pkm/Material_for_MkDocs.html#기타-설정-방법",
    "title": "Material for MkDocs",
    "section": "기타 설정 방법",
    "text": "기타 설정 방법\n\n링크 문서 새 창으로 열기"
  },
  {
    "objectID": "pkm/vscode_extension.html",
    "href": "pkm/vscode_extension.html",
    "title": "vscode extension",
    "section": "",
    "text": "캡처한 이미지를 문서에 붙여넣을 때 경로와 파일명 자동 작성됨.\n\n일반 붙여넣기 단축키 말고 vscode 안에서 설정한 단축키로 붙여넣어야 한다.\n\n설정 방법:\n\nPaste Image: Base Path -> 문서 파일에 입력할 경로 -> 이미지가 저장된 위치를 현재 파일 기준으로 상대경로로 입력하려면 ${currentFileDir}를 입력하고, 프로젝트 루트부터 절대경로로 입력하려면 ${projectRoot}를 입력한다.\nPaste Image: Path -> 이미지 파일이 저장될 위치  -> 모든 이미지를 한 폴더 저장하려면 ${projectRoot}/docs/images처럼 프로젝트 루트부터 경로를 입력한다. 현재 문서 파일과 같은 위치에 이미지 파일을 저장하려면 ${currentFileDir}를 입력하고, 현재 문서 파일 아래에 images 폴더를 만들어 저장하려면 ${currentFileDir}/images를 입력한다.\n\n \n\n\n\nxclip 클론하고 그 폴더를 PATH에 포함\n\n> cd ~/bin\n> git clone https://github.com/Konfekt/win-bash-xclip-xsel\n> cp xclip ~/bin"
  },
  {
    "objectID": "pkm/obsidian to github.html",
    "href": "pkm/obsidian to github.html",
    "title": "Obsidian to github pages",
    "section": "",
    "text": "Pasted image 20221006093140.png\n\n\n나의 레포지토리에 가서 깃헙 페이지로 설정\n\n\n\nPasted image 20221006092242.png\n\n\n이 레포지토리를 pc로 clone 한다.\ndocs 폴더를 옵시디언 볼트로 지정한다.\ndocs 폴더 안에 공개하려고 하는 노트를 넣는다.\ngit commit, git push 하면 Github actions가 웹페이지를 만든다.\nActions 버튼을 누르면 변환 과정을 확인할 수 있다.\n깃헙 주소로 가면 웹페이지 볼 수 있다."
  },
  {
    "objectID": "pkm/vundle.html",
    "href": "pkm/vundle.html",
    "title": "VI Vundle",
    "section": "",
    "text": "Vundle 홈페이지"
  },
  {
    "objectID": "pkm/vundle.html#vundle-설치",
    "href": "pkm/vundle.html#vundle-설치",
    "title": "VI Vundle",
    "section": "Vundle 설치",
    "text": "Vundle 설치\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim"
  },
  {
    "objectID": "pkm/vundle.html#설정-아래-코드를-.vimrc-파일의-맨-위에-추가한다",
    "href": "pkm/vundle.html#설정-아래-코드를-.vimrc-파일의-맨-위에-추가한다",
    "title": "VI Vundle",
    "section": "설정: 아래 코드를 .vimrc 파일의 맨 위에 추가한다",
    "text": "설정: 아래 코드를 .vimrc 파일의 맨 위에 추가한다\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\" Plugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/playdata/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Install L9 and avoid a Naming conflict if you've already installed a\n\" different version somewhere else.\n\" Plugin 'ascenator/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\ncall vundle#begin()과 call vundle#end() 사이에 설치할 Plugin을 지정한다."
  },
  {
    "objectID": "pkm/vundle.html#플러그인-설치-vim-실행-후-plugininstall",
    "href": "pkm/vundle.html#플러그인-설치-vim-실행-후-plugininstall",
    "title": "VI Vundle",
    "section": "플러그인 설치: vim 실행 후 :PluginInstall",
    "text": "플러그인 설치: vim 실행 후 :PluginInstall\n에러 발생: Plugin ‘file:///home/playdata/path/to/plugin’"
  },
  {
    "objectID": "pkm/vundle.html#추가한-플러그인",
    "href": "pkm/vundle.html#추가한-플러그인",
    "title": "VI Vundle",
    "section": "추가한 플러그인",
    "text": "추가한 플러그인\n\nnerdtree: .vimrc의 플러그인 정의 영역에 Plugin ‘scrooloose/nerdtree’ 추가 -> 단축키 설정(.vimrc에 추가) nmap nerd :NERDTreeToggle -> vi 명령모드에서 ’nerd’를 키보드로 치면 실행됨"
  },
  {
    "objectID": "pkm/git.html",
    "href": "pkm/git.html",
    "title": "git",
    "section": "",
    "text": "기존 환경 설정 파일 삭제: git config --unset 이메일 주소\n이메일 주소는 git이 개발자를 구별하는 고유의 키 값으로 사용: git config user.email \"이메일 주소\"\n환경설정 파일 보기: 먼저 ls .git 명령으로 config 파일 존재 유무 확인 >>> vi .git/config 글로벌 사용자 등록을 했다면 vi ~/.gitconfig"
  },
  {
    "objectID": "pkm/git.html#로그",
    "href": "pkm/git.html#로그",
    "title": "git",
    "section": "로그",
    "text": "로그\n\n로그 보기 명령: git log --graph --pretty=oneline >>> show-grpah 별칭으로 등록: git config --global alias.show-graph 'log --graph --pretty=oneline'"
  },
  {
    "objectID": "pkm/git.html#기타",
    "href": "pkm/git.html#기타",
    "title": "git",
    "section": "기타",
    "text": "기타\n\ngitignore가 적용 안 될 때"
  },
  {
    "objectID": "pkm/quarto.html",
    "href": "pkm/quarto.html",
    "title": "quarto",
    "section": "",
    "text": "quarto 홈페이지에서 운영체제에 맞는 파일을 받아 실행\n맥 Homebrew 설치: brew install --cask quarto"
  },
  {
    "objectID": "pkm/quarto.html#vscode에서-사용-tutorial",
    "href": "pkm/quarto.html#vscode에서-사용-tutorial",
    "title": "quarto",
    "section": "vscode에서 사용 tutorial",
    "text": "vscode에서 사용 tutorial\n공식 문서\n\nvscode에서 quarto vscode extension 설치\n\n\n\n\n익스텐션 설치\n\n\n\nquarto 문서 만들기\n\n\n\n\n새 문서 만들기\n\n\nwalkthrough.qmd 문서가 열린다.\n\nwalkthrough.qmd 파일을 렌더링하여 html 파일로 변환한다.\n\n\n\n\n변환\n\n\n변환하면 같은 폴더에 walkthrough.html 파일과 walkthrough_files 폴더가 만들어진다."
  },
  {
    "objectID": "pkm/quarto.html#주피터-노트북-사용-tutorial",
    "href": "pkm/quarto.html#주피터-노트북-사용-tutorial",
    "title": "quarto",
    "section": "주피터 노트북 사용 tutorial",
    "text": "주피터 노트북 사용 tutorial\n\nyml 설정\n\n코드 블록 숨기기/보이기 설정\n코드 블록 숨기기/보이기 버튼 우측 상단에 보이게 설정"
  },
  {
    "objectID": "pkm/quarto.html#웹사이트-만들기",
    "href": "pkm/quarto.html#웹사이트-만들기",
    "title": "quarto",
    "section": "웹사이트 만들기",
    "text": "웹사이트 만들기\n\n공식 문서\n\n==주의할 점!!!== 나는 깃허브에 quarto 리포를 먼저 만들고 로컬에 클론했다. 그래서 Website Project를 선택한 뒤 나타는 창에서 반드시 quarto 폴더의 부모 폴더를 선택해야 한다. 그러고 나서 뜨는 입력 창에 웹사이트의 홈 폴더로 사용할 깃허브 폴더명인 quarto를 입력한다. 그러면 quarto 폴더 안에 아래처럼 _quarto.yml, index.qmd, about.qmd, style.css 파일이 만들어진다.\n\n\n\n폴더명 입력\n\n\n\n미리보기 : 문서 우측 위의 render 버튼 클릭한다. 변경한 후 다시 render 버튼을 눌러야 반영된다.\n최종 html 파일 만들기: 터미널에서 quarto render -> _site 폴더에 html 파일이 만들어진다."
  },
  {
    "objectID": "pkm/quarto.html#깃허브-페이지를-호스팅-서버로-사용하기",
    "href": "pkm/quarto.html#깃허브-페이지를-호스팅-서버로-사용하기",
    "title": "quarto",
    "section": "깃허브 페이지를 호스팅 서버로 사용하기",
    "text": "깃허브 페이지를 호스팅 서버로 사용하기\n공식 문서\n3가지 방법이 있다.\n\ndocs 폴더에 사이트 문서들을 렌더링하고 깃허브가 docs 폴더를 웹페이지로 출판하도록 설정\nquarto publish 명령으로 직접 웹페이지로 출판\n코드를 깃허브에 올리면 자동으로 깃허브 액션이 렌더링해서 출판하도록 설정\n\n\ndocs 폴더 이용 방법"
  },
  {
    "objectID": "pkm/create_vscode_snippets.html",
    "href": "pkm/create_vscode_snippets.html",
    "title": "VS Code에서 snippets 만들기",
    "section": "",
    "text": "vscode에서 user snippet(사용자 코드 조각)을 입력할 yml 파일을 연다.\n\n\n\n사용자 코드 조각 구성\n\n\n마크다운 파일에 사용할 코드 조각을 작성할 예정이므로 markdown.json을 선택한다.\n아래와 같이 yaml 양식으로 작성한다.\n\n전체 설정은 중괄호{} 안에 snippet 단위로 입력한다.\n무엇에 관한 코드 조각인지 간결하지만 알기 쉬울만큼 자세하게 이름을 적는다. 아래는 “today’s log”, “python code block” 두 개의 이름을 만들었다.\n각 이름 뒤에 콜론을 붙이고 다시 중괄호를 쓴다. {“today’s log”:{}, “python code block”:{}}. 중괄호 안에 구체적인 설정 사항을 입력한다.\n“prefix”에는 전체 코드의 약자로 사용할 문자열을 입력한다. 아래에서는 tlog와 cpy로 정의했다. tlog는 today’s log를, cpy는 code block python을 줄인 것이다.\n“body”에는 실제로 입력될 문자열을 입력한다. 위의 공식 설명서를 열면 사용할 수 있는 변수 목록과 설명을 볼 수 있다.\n아래와 같이 설정한 뒤 마크다운 문서에서 tlog를 입력하고 ctrl+spacebar를 누르면 body에 정의한 내용대로 입력된다.\n\n{\n  \"today's log\":{\n    \"prefix\": \"tlog\",\n    \"body\": [\n      \"# $TM_FILENAME_BASE($CURRENT_DAY_NAME_SHORT)\",\n      \"created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE\",\n      \"\\n\\n## \"\n    ]\n  },\n  \"python code block\":{\n    \"prefix\": \"cpy\",\n    \"body\": [\n      \"```python\",\n      \"${1}\",\n      \"```\",\n      \"\"\n    ]\n  }\n}\ncpy 입력 후 ctrl + spacebar를 누른 뒤 엔터를 치면 아래처럼 입력된다.\n커서가 여기에 위치함"
  },
  {
    "objectID": "pkm/markdown_link_new_window.html",
    "href": "pkm/markdown_link_new_window.html",
    "title": "mkdocs에서 링크된 문서를 새 창으로 열기",
    "section": "",
    "text": "먼저 mkdocs.yml 파일을 수정한다. markdown_extensions 부분에 attr_list를 추가한다.\n\nmarkdown_extensions: \n  - attr_list\n\n마크다운 문서에서 새 창으로 띄울 문서의 링크를 아래처럼 뒤에 {target=_blank}를 추가한다.\n\n[내 홈페이지](https://lazychoi.github.io){target=_blank}"
  },
  {
    "objectID": "pkm/obsidian_template.html",
    "href": "pkm/obsidian_template.html",
    "title": "Obsidian template 사용",
    "section": "",
    "text": "기본 템플릿 문법\ntemplater plugin 문법"
  },
  {
    "objectID": "pkm/obsidian_template.html#기본-template-사용",
    "href": "pkm/obsidian_template.html#기본-template-사용",
    "title": "Obsidian template 사용",
    "section": "기본 template 사용",
    "text": "기본 template 사용\n\n환경 설정\n\nSettings >>> Core plugins >>> Templates 활성화\n템플릿 파일 저장할 폴더 만들기. eg. DOCS/templates\n\n\n\n수동으로 템플릿 적용\n\n문서를 만들고\n왼쪽 사이드바에서 “insert template” 아이콘 선택\n삽입할 템플릿 선택(템플릿이 2개 이상인 경우)\n\n\n\n틀정 폴더에 자동으로 템플릿 적용\n\nOptions(톱니 버튼) >>> Template folder location 에 1번에서 만들 폴더 지정\ntemplates 폴더 .gitignore에 추가\ntemplates 폴더에 템플릿으로 사용할 파일 작성\n로그 템플릿 작성 dailylog"
  },
  {
    "objectID": "pkm/obsidian_template.html#templater-plugin-사용",
    "href": "pkm/obsidian_template.html#templater-plugin-사용",
    "title": "Obsidian template 사용",
    "section": "templater plugin 사용",
    "text": "templater plugin 사용\n\nSettings >>> Community Plugins >>> Templater\nTemplate folder location 지정\nTrigger Templater on new file creation 활성화\n\n\n\n특정 폴더에서 새 노트를 만들 때 적용할 템플릿 파일 지정"
  },
  {
    "objectID": "blog/posts/22-10-25.html",
    "href": "blog/posts/22-10-25.html",
    "title": "22-10-25(화)",
    "section": "",
    "text": "pandas"
  },
  {
    "objectID": "blog/posts/22-10-25.html#reading",
    "href": "blog/posts/22-10-25.html#reading",
    "title": "22-10-25(화)",
    "section": "reading",
    "text": "reading\n\nPandas in Aciton 키워드 정리\n파이썬 머신러닝 완벽 가이드 10장 시각화"
  },
  {
    "objectID": "blog/posts/22-10-11.html",
    "href": "blog/posts/22-10-11.html",
    "title": "22-10-11(화)",
    "section": "",
    "text": "반복문 - 별 찍기\n사용자 정의 함수: 반환값 유무, 매개변수 유무, 매개변수 초기값 유무, 가변인자, 키워드인자, 여러 개의 반환값을 변수에 따로 저장"
  },
  {
    "objectID": "blog/posts/22-10-11.html#개인-공부",
    "href": "blog/posts/22-10-11.html#개인-공부",
    "title": "22-10-11(화)",
    "section": "개인 공부",
    "text": "개인 공부\n\n이것이_코딩_테스트다 : greedy\n외부 글 - a=1 의 의미 요약\n외부 글 - 파이썬에서 모든 것이 객체다\n외부 글 - 파이썬 메모리 관리와 좋은 코딩 습관\nTiny_Python_project 3장 리스트\nargparse"
  },
  {
    "objectID": "blog/posts/22-10-21.html",
    "href": "blog/posts/22-10-21.html",
    "title": "22-10-21(금)",
    "section": "",
    "text": "pandas.Series 인덱스 지정\npandas.Series 인덱싱, 슬라이싱, 연산\n\n숫자 인덱스의 뒷쪽 숫자는 포함되지 않음: s[0:2] => s[0], s[1]\n라벨 인덱스의 뒷쪽 라벨은 포함: s[‘a’:‘c’] => s[‘a’], s[‘b’], s[‘c’]\n\npandas.DataFrame 생성, 인덱스 생성, 수정, 삭제\npandas.DataFrame 인덱싱, 슬라이싱, 열, 행 추가"
  },
  {
    "objectID": "blog/posts/22-10-21.html#읽고-구현하기",
    "href": "blog/posts/22-10-21.html#읽고-구현하기",
    "title": "22-10-21(금)",
    "section": "읽고 구현하기",
    "text": "읽고 구현하기\n\nPandas in Aciton 키워드 정리\n읽을 만한 글 - python 실행 속도 개선 방법"
  },
  {
    "objectID": "blog/posts/22-10-31.html",
    "href": "blog/posts/22-10-31.html",
    "title": "22-10-31(월)",
    "section": "",
    "text": "미니 프로젝트를 다시 돌아보다 인구 계산에 오류가 있었다는 걸 발견했다. csv 파일을 자세히 살피지 않은 것이 원인이다. 시군구 데이터가 읍면동 데이터를 포함한 값인 것을 모르고 그냥 합쳐버려 인구가 두 배로 뛰었다. 더 황당한 것은 어디가 잘못됐는지 수원시 인구가 천 만명이 넘게 나왔다. 그래프 그리는 연습을 하다 발견했다. 테이블로만 작업할 때는 전혀 알아채지 못한 잘못이 그래프를 그리니 확연하게 드러났다. 시각화의 중요성을 체험했다."
  },
  {
    "objectID": "blog/posts/22-10-31.html#qmd의-기능",
    "href": "blog/posts/22-10-31.html#qmd의-기능",
    "title": "22-10-31(월)",
    "section": "qmd의 기능",
    "text": "qmd의 기능\n\n코드 블록에 언어를 중괄호로 감싸 선언하면(eg. {python}), 코드를 실행할 수 있다."
  },
  {
    "objectID": "blog/posts/22-10-31.html#빅분기-단답형-기출",
    "href": "blog/posts/22-10-31.html#빅분기-단답형-기출",
    "title": "22-10-31(월)",
    "section": "빅분기 단답형 기출",
    "text": "빅분기 단답형 기출\n4회\n\nJSON\n최소제곱법\n차원 축소\nBox-Cox\n드롭아웃\nSOM\nSVM\nSqoop\n정규성\n0.686 (Precision과 Recall 값을 주고 F1-score 구하기)\n\n3회\n\n연관성분석에서 규칙이 우연에 의해 발생한 것인지 판단하기 위해 연관성의 정도를 측정하는 척도는? 향상도(Lift)\n분포나 표준편차로 예상(확실치 않음)\n범주화\n최소최대정규화(Min-Max Scaling)\n투표(보팅), 예측 결과를 결합하여 분석? 앙상블\n중심 거리계산, 가중평균을 계산하여 새로운 중심을… ? 중심연결법\n사상된 경계, 회귀 분류 다 되는 지도학습, 경계의 가장 큰 폭을 평가 지표로 하는 알고리즘? SVM\n마지막 은닉층 두개(0.2, 0.3), 가중치 두개(0.3,-0.1), 바이어스bias(=상수항의 가중치) 0.1 들의 값은 이러하다. 마지막 출력에 입력되는 선형합값은? 은닉층 노드 계산 0.13 (인공신경망 계산문제는 필수로 나오는 것 같다.)\nknn은 ( )을/를 계산? 거리\n순서형 말고, 예를 들어 국가별 코드 값을 가진 이러한 특징을 가진 것을 ( )데이터 라고 한다? 명목형\n일일 건수를 월별로 또는 분기별로 그룹화하는 방법은?\n\n2회\n\n이상치\n평균대치법\n비지도학습\n부스팅\n그래디언트 부스트- 그래디언트 부스팅인데 부스트라고 적어서 오답처리 될 줄 알았는데 맞다고해줌\n하이퍼파라미터\n후진제거법\n과대적합\nroc curve\n은닉층 계산 문제- 정확한 문제는 아님. 대충 비슷하게 복원."
  },
  {
    "objectID": "blog/posts/22-10-05.html",
    "href": "blog/posts/22-10-05.html",
    "title": "22-10-05(수)",
    "section": "",
    "text": "문자열 타입, 문자열 연산, 인덱싱, 슬라이싱, 내장함수\n리스트\n백준 파이썬 배우기"
  },
  {
    "objectID": "blog/posts/22-10-05.html#개인",
    "href": "blog/posts/22-10-05.html#개인",
    "title": "22-10-05(수)",
    "section": "개인",
    "text": "개인\n\nbook - 21개의 작고 재미난 파이썬 프로젝트\n\n백지에서 코드를 작성하는 게 아니라 저자의 깃에 있는 코드를 수정하며 공부해야 한다는 걸 알았다.\n1장을 마치고 2장 초입까지 공부함\n테스트코드를 어떻게 작성하는지 몰라도 되나보다. 그저 사용하며 내가 수정한 코드가 맞는지 확인하는 용도로 사용하는 듯.\n오늘 공부의 핵심은 argparse 모듈이다. 정리하려니 책 전체를 옮기는 꼴이 되어 핵심만 적는다.\n(???) new.py가 작동되다 안 되다 한다."
  },
  {
    "objectID": "blog/posts/22-10-14.html",
    "href": "blog/posts/22-10-14.html",
    "title": "22-10-14(금)",
    "section": "",
    "text": "알라딘 크롤링\nrequests 라이브러리 사용\nhttp header 출력: res = requests.get(‘url’) ; res.headers\n구조체와 클래스"
  },
  {
    "objectID": "blog/posts/22-10-14.html#개인-공부",
    "href": "blog/posts/22-10-14.html#개인-공부",
    "title": "22-10-14(금)",
    "section": "개인 공부",
    "text": "개인 공부\n\n이것이 코딩 테스트다 5장 스택 큐 재귀함수\n이것이 코딩 테스트다 5장 DFS/BFS\nwsl2\nmermaid 설명서\n최대공약수 계산\n줄번호 출력: 출력 위치를 파악해서 코드 실행 흐름 파악 용이"
  },
  {
    "objectID": "blog/posts/22-10-20.html",
    "href": "blog/posts/22-10-20.html",
    "title": "22-10-20(목)",
    "section": "",
    "text": "주피터 노트북 셀 실행시간 측정(주석 포함 셀의 가장 상단에 입력): %%time\nnumpy.sort doc : np.sort(array[, axis=-1/0]), array.sort()\nnumpy.argsort doc: np.argsort(array)\nindexing on ndarrays doc:\n\nrow: array[n], array[[n,m]]\ncolumn: array[:, n], array[:, [n,m]]\nscalar: array[n][m], array[n, m]\n\nnumpy.copy doc: array.copy(), np.copy(array)\nArray manipulation doc : np.T, np.ravel(array), array.ravel(), array.reshape(), np.reshape(array, new_shape), np.resize(), array.resize(), np.append(array1, array2[, axis=0/1]), np.insert(), np.delete(), np.concatenate(), np.split()\nPandas: 판다스 개발자가 쓴 책 Python for Data Analysis\npd.Series docs"
  },
  {
    "objectID": "blog/posts/22-10-20.html#book",
    "href": "blog/posts/22-10-20.html#book",
    "title": "22-10-20(목)",
    "section": "book",
    "text": "book\n\n이것이 코딩 테스트다 09장 최단 경로: Dijkstra Algorithm, 힙 자료구조"
  },
  {
    "objectID": "blog/posts/22-10-30.html",
    "href": "blog/posts/22-10-30.html",
    "title": "22-10-30(일)",
    "section": "",
    "text": "Quarto로 깃허브 페이지 만들기 사흘째\n알고리즘 3문제 풀기\n빅분기 단답형 문제 Anki 정리"
  },
  {
    "objectID": "blog/posts/22-10-30.html#기존-깃허브-페이지-quarto로-옮기기",
    "href": "blog/posts/22-10-30.html#기존-깃허브-페이지-quarto로-옮기기",
    "title": "22-10-30(일)",
    "section": "기존 깃허브 페이지 quarto로 옮기기",
    "text": "기존 깃허브 페이지 quarto로 옮기기\n\n과제\n\nqmd 파일이 md 파일과 다른 점 찾기\n웹사이트에 블로그 페이지를 포함시키는 방법\n리스트 페이지가 설명서대로 출력되지 않는 문제 해결: 문서 yml 설정에 date를 추가하니 해결됨\nyml 파일에 설정하지 않고 링크로 연결된 파일에서는 사이드바가 뜨지 않는 문제 해결\n\n가끔 주피터 노트북이 아무런 이상이 없는데도 오류는 뿜는 경우가 있다. 그럴 때는 같은 행동을 반복하며 울화통을 키우지 말고 커널을 죽이고 재실행한다."
  },
  {
    "objectID": "blog/posts/22-10-04.html",
    "href": "blog/posts/22-10-04.html",
    "title": "22-10-04(화)",
    "section": "",
    "text": "아나콘다 설치\n주피터 노트북 사용법\n마크다운 문법\n데이터 타입: 숫자형, 정수형, 실수형\n연산자: 산술, 비교, 논리, 할당\n백준 파이썬 배우기"
  },
  {
    "objectID": "blog/posts/22-10-04.html#개인",
    "href": "blog/posts/22-10-04.html#개인",
    "title": "22-10-04(화)",
    "section": "개인",
    "text": "개인\n\n새로 사용할 노트북 개발 환경 설정\nwsl 설치, git 설치. ssh 등록. doksan repository 만듦"
  },
  {
    "objectID": "blog/posts/22-10-24.html",
    "href": "blog/posts/22-10-24.html",
    "title": "22-10-24(월)",
    "section": "",
    "text": "pandas"
  },
  {
    "objectID": "blog/posts/22-10-24.html#reading",
    "href": "blog/posts/22-10-24.html#reading",
    "title": "22-10-24(월)",
    "section": "reading",
    "text": "reading\n\nPandas in Aciton 키워드 정리"
  },
  {
    "objectID": "blog/posts/22-10-10.html",
    "href": "blog/posts/22-10-10.html",
    "title": "22-10-10(월)",
    "section": "",
    "text": "공휴일로 수업이 없다. “Tiny Python Project(켄 유엔스-클락)”을 읽는다."
  },
  {
    "objectID": "blog/posts/22-10-17.html",
    "href": "blog/posts/22-10-17.html",
    "title": "22-10-17(월)",
    "section": "",
    "text": "self 의미\n생성자 __init__ 역할: 객체를 생성할 때 반드시 입력해야 하는 요소 정의"
  },
  {
    "objectID": "blog/posts/22-10-17.html#book",
    "href": "blog/posts/22-10-17.html#book",
    "title": "22-10-17(월)",
    "section": "book",
    "text": "book\n\n이것이 코딩 테스트다 6장 계수 정렬, 실전문제\n21개의 작고 재미난 파이썬 프로젝트 4장\n21개의 작고 재미난 파이썬 프로젝트 5장\nstr.stranslate() - 딕셔너리에 정의한 문자로 변환\n21개의 작고 재미난 파이썬 프로젝트 5장 os 모듈"
  },
  {
    "objectID": "blog/posts/22-10-17.html#오늘-만난-오류",
    "href": "blog/posts/22-10-17.html#오늘-만난-오류",
    "title": "22-10-17(월)",
    "section": "오늘 만난 오류",
    "text": "오늘 만난 오류\n\njupyter notebook 두 개 설치되어 nbconvert, nbextensions가 제대로 작동하지 않음 in wsl2\n우분투에서 파이썬 특정 버전 삭제"
  },
  {
    "objectID": "blog/posts/22-10-23.html",
    "href": "blog/posts/22-10-23.html",
    "title": "22-10-23(일)",
    "section": "",
    "text": "이것이 코딩 테스트다 09장 최단 경로: Floyd-Warshall Algorithm 미래 도시, Dijkstra Algorithm 전보\n이것이 코딩 테스트다 10장 그래프 이론: 서로소 집합\nmkdocs 링크 문서를 새 창으로 열기\nvscode 사용자 코드 조각 만들기"
  },
  {
    "objectID": "blog/posts/22-10-07.html",
    "href": "blog/posts/22-10-07.html",
    "title": "22-10-07(금)",
    "section": "",
    "text": "dictionary element 삭제, [[Dictionary Methods List]]\n조건문\nwhile 반복문\nfor 반복문, range\n백준 코딩테스트"
  },
  {
    "objectID": "blog/posts/22-10-07.html#개인",
    "href": "blog/posts/22-10-07.html#개인",
    "title": "22-10-07(금)",
    "section": "개인",
    "text": "개인\n\nGIL 개념\nobsidian 템플릿 사용\n리눅스 shell prompt 변경"
  },
  {
    "objectID": "blog/posts/22-10-27.html",
    "href": "blog/posts/22-10-27.html",
    "title": "22-10-27(목)",
    "section": "",
    "text": "내 프로젝트 깃허브 주소\n조원에게 깃 기본 사용법 설명\n\n작업 중인 폴더 안에 들어가\n현재 폴더 리포지토리 설정 : git init\n깃 허브(remote)와 로컬 리포 연결:\n\ngit remote add origin git@github.com:doksan-tech/project_pet.git\n\n리모트에 있는 파일 내려받기: git pull origin main\n내가 작업할 브랜치 만들기: git branch 브랜치명\n브랜치로 변경: git checkout 브랜치명\n작업을 마친 뒤 깃허브에 올리는 3 단계\n\ngit add . : 변경된 파일 전부 staging\ngit commit -m “메시지” : 어떤 수정사항이 있었는지 간단히 써서 업로드 준비\ngit push : 실제 업로드\n\n\n다른 조 발표에서 배운 것\n\nparse_function.maked2 <- 크롤링한 테이블 태그를 표로 쉽게 변환해주는 라이브러리\nplotly 라이브러리 -> 동적 그래프 표현 가능"
  },
  {
    "objectID": "blog/posts/22-10-13.html",
    "href": "blog/posts/22-10-13.html",
    "title": "22-10-13(목)",
    "section": "",
    "text": "크롤링 후 텍스트 파일로 저장\ncsv 파일 입출력\nselenium으로 문서의 특정 요소 찾는 명령어(영문)\n교보문고 순회 크롤링\n알라딘 크롤링"
  },
  {
    "objectID": "blog/posts/22-10-13.html#개인-공부",
    "href": "blog/posts/22-10-13.html#개인-공부",
    "title": "22-10-13(목)",
    "section": "개인 공부",
    "text": "개인 공부\n\n이것이 코딩 테스트다 4장 구현\n리눅스 특정 이름 파일 찾아 삭제 명령어: $ find -name \"*.pdf\" | xargs rm -f (한글명 파일 일부 삭제 안 됨)\njson 데이터 크롤링: json_dict = json.load( res.text )"
  },
  {
    "objectID": "blog/posts/22-10-26.html",
    "href": "blog/posts/22-10-26.html",
    "title": "22-10-26(수)",
    "section": "",
    "text": "영화진흥위원회 오픈 API 사용\n미니 프로젝트"
  },
  {
    "objectID": "blog/posts/22-10-26.html#reading",
    "href": "blog/posts/22-10-26.html#reading",
    "title": "22-10-26(수)",
    "section": "reading",
    "text": "reading\n\njupyter notebook to web pages Quarto"
  },
  {
    "objectID": "blog/posts/22-10-26.html#미니-프로젝트",
    "href": "blog/posts/22-10-26.html#미니-프로젝트",
    "title": "22-10-26(수)",
    "section": "미니 프로젝트",
    "text": "미니 프로젝트\n주제 논의\n\n반려동물\n로또 당첨번호 기존 것 받아 새로운 번호 예측\nnba 전술 흐름: 스타 의존 -> 전원 열심히 뛰는 팀이 좋은 성적 내는지 비교(활동량 지수) nba.com\n영화 평점 크롤링 후 추천\n따릉이, 지하철 최적 경로\n공장, 토양 오염, 미세먼지, 수질 데이터\n따릉이 유입, 유출, 지역별, 시간대별, 경제적 관점 효율적 운영 방안"
  },
  {
    "objectID": "blog/posts/22-10-12.html",
    "href": "blog/posts/22-10-12.html",
    "title": "22-10-12(수)",
    "section": "",
    "text": "selenium\nBeautifulSoup\n교보문고 베스트 셀러 목록 크롤링\ncodecs library"
  },
  {
    "objectID": "blog/posts/22-10-12.html#개인-공부",
    "href": "blog/posts/22-10-12.html#개인-공부",
    "title": "22-10-12(수)",
    "section": "개인 공부",
    "text": "개인 공부\n\n크롤링 in wsl\n블로그 도구로 Material for MKDocs 선택한 이유\n\n기술 변화 속도가 빠르기 때문에 특정 어플에 얽매이지 않아야 오랫동안 유지할 수 있다.\n표준 markdown 문법을 사용하고 특정 OS나 편집기에 구애받지 않는다.\n\nvscode extension"
  },
  {
    "objectID": "blog/posts/22-10-16.html",
    "href": "blog/posts/22-10-16.html",
    "title": "22-10-16(일)",
    "section": "",
    "text": "이것이 코딩 테스트다 5장 BFS 미로 탈출\n이것이 코딩 테스트다 6장 선택 정렬 삽입 정렬 퀵 정렬"
  },
  {
    "objectID": "blog/posts/22-10-16.html#오늘-만난-오류-메시지",
    "href": "blog/posts/22-10-16.html#오늘-만난-오류-메시지",
    "title": "22-10-16(일)",
    "section": "오늘 만난 오류 메시지",
    "text": "오늘 만난 오류 메시지\n\n중요 사항\n주피터 노트북 확장 프로그램(.js) 위치: /opt/homebrew/lib/python3.9/site-packages/widgetsnbextension/static\n주피터 노트북 경로 출력 명령어: jupyter –path\n\n\n주피터 노트북 관련 오류\nConfig option template_path not recognized by ExporterCollapsibleHeadings. Did you mean one of: extra_template_paths, template_name, template_paths?\n해결책 출처\n오류 원인은 nbconvert가 6 버전으로 업데이트 되면서 ’template_path’를 ’template_paths’로 변경했기 때문이라고 한다. 6 버전을 삭제하고(conda uninstall nbconvert) 6 이하 버전을 설치하니 오류가 사라졌다.(conda install “nbconvert<6”)\n404 GET /nbextensions/widgets/notebook/js/extension.js (::1) 5.700000ms referer=http://localhost:8888/notebooks/doksan/book/%EC%9D%B4%EA%B2%83%EC%9D%B4%20%EC%BD%94%EB%94%A9%20%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%8B%A4/bfs.ipynb\n원인 모를 오류가 발생해 ~/.jupyter 폴더를 통째로 삭제한 게 원인인 듯하다. 그런데, extension.js 파일을 찾는 설정 파일은 어디에 있지?\n[시도1]jupyter notebook config 파일 만들기 => 해결 안 됨\n$ jupyter notebook --generate-config\nWriting default config to: /Users/jun/.jupyter/jupyter_notebook_config.py\n[시도2]주피터 노트북 위젯을 활성화시키라는 명령을 실행 -> 해결 안 됨\n$ jupyter nbextension enable --py widgetsnbextension\nEnabling notebook extension jupyter-js-widgets/extension...\n      - Validating: problems found:\n        - require?  X jupyter-js-widgets/extension\n[시도3]ipywidgets를 설치 -> 해결 안 됨\n[해결] 주피터 명령어로 위젯 설치하고 활성화\n❯ jupyter nbextension install --py widgetsnbextension --user\nInstalling /opt/homebrew/lib/python3.9/site-packages/widgetsnbextension/static -> jupyter-js-widgets\nMaking directory: /Users/jun/Library/Jupyter/nbextensions/jupyter-js-widgets/\nCopying: /opt/homebrew/lib/python3.9/site-packages/widgetsnbextension/static/extension.js.map -> /Users/jun/Library/Jupyter/nbextensions/jupyter-js-widgets/extension.js.map\nCopying: /opt/homebrew/lib/python3.9/site-packages/widgetsnbextension/static/extension.js -> /Users/jun/Library/Jupyter/nbextensions/jupyter-js-widgets/extension.js\n- Validating: OK\n\n    To initialize this nbextension in the browser every time the notebook (or other app) loads:\n    \n          jupyter nbextension enable widgetsnbextension --user --py\n    \n❯ jupyter nbextension enable widgetsnbextension --user --py\nEnabling notebook extension jupyter-js-widgets/extension...\n      - Validating: OK\n\njupyter notebook extension 작동 안 됨\n[시도1] jupyter-contrib-nbextensions 삭제 후 conda로 재설치 => 확장 탭이 나타나지 않음\n> pip uninstall jupyter-contrib-nbextensions\n> conda install -c conda-forge jupyter_contrib_nbextensions\n> jupyter notebook --version\n6.3.0\n[시도2] jupyter contrib nbextension install –sys-prefix -> 해결 안 됨\n[해결] 아나콘다 삭제 후 재설치 =>\nconda install -c conda-forge jupyter_contrib_nbextensions -> Solving environment: failed with initial frozen solve. Retrying with flexible solve. Soving environment: 무한루프\npip install jupyter_contrib_nbextensions -> 성공\n아나콘다를 삭제하지 않고 pip로 재설치했으면 되지 않았을까?"
  },
  {
    "objectID": "blog/posts/22-10-22.html",
    "href": "blog/posts/22-10-22.html",
    "title": "22-10-22(토)",
    "section": "",
    "text": "빅분기 실기 학습방법 게시물 21-12-23\n빅분기 실기 학습방법 게시물 21-12-23\n빅분기 대비 캐글 사이트\n데이터마님\n구름 IDE"
  },
  {
    "objectID": "blog/posts/22-10-06.html",
    "href": "blog/posts/22-10-06.html",
    "title": "22-10-06(목)",
    "section": "",
    "text": "리스트 함수: append, extend, insert\n연산자 in\n리스트 아이템 수정: 인덱싱, 슬라이싱 이용\n리스트 아이템 삭제: 슬라이싱, del, 리스트.remove(값), 리스트.pop(인덱스)\n리스트 아이템 정렬: 리스트.sort(), 리스트.reverse()\n리스트 아이템 개수 세기: 리스트.count(값), len(리스트)\n리스트 복사: stack vs heap, shallow_copy-deep_copy\n튜플 생성, 연산자, 인덱싱, 슬라이싱\n딕셔너리 생성, 인덱싱, 데이터 추가\n백준 코딩테스트"
  },
  {
    "objectID": "blog/posts/22-10-06.html#개인",
    "href": "blog/posts/22-10-06.html#개인",
    "title": "22-10-06(목)",
    "section": "개인",
    "text": "개인\n\n옵시디언으로 깃헙 블로그 만들기"
  },
  {
    "objectID": "blog/posts/22-10-29.html#quarto로-깃허브-페이지-만들기-테스트",
    "href": "blog/posts/22-10-29.html#quarto로-깃허브-페이지-만들기-테스트",
    "title": "22-10-29(토)",
    "section": "Quarto로 깃허브 페이지 만들기 테스트",
    "text": "Quarto로 깃허브 페이지 만들기 테스트\nQuarto가 R 계열에서 만든 도구라고 한다. 다른 도구에 비해 사용하기 쉽게 만들어져 있다. yml 파일로 원하는 기능을 설정하는 건 다른 도구와 같지만 훨씬 직관적이고 예상대로 작동했다.\n다만 왼쪽 사이드바 목록을 만드는 데 애를 먹었다. _quarto.yml 파일의 nav 영역에 입력한 text 키값과 sidebar 영역의 title 키값이 같아야 하고, nav 영역의 file 키값과 sidebar 영역의 contents 첫 번째 파일명이 같아야 한다는 걸 한참을 헤맨 뒤에 알았다. 이에 관한 설명이 없어 사이드바를 구현하는 데 한나절이나 걸렸다.\nbootstrap을 지원하는 것도 탁월한 장점이다. 마크다운으로 멀티 컬럼 페이지를 만들지 못해 아쉬웠는데 이제 쉽게 만들 수 있게 됐다. 내일은 mkdocs로 만든 기존 페이지를 Quarto로 옮겨야겠다."
  },
  {
    "objectID": "blog/posts/22-10-19.html",
    "href": "blog/posts/22-10-19.html",
    "title": "22-10-19(수)",
    "section": "",
    "text": "정규분포, 평균, 표준편차 의미\n정규분포 평균, 표준편차를 그래프로 보여주는 사이트\nnp.random.normal(), np.random.rand(), np.random.randn(), np.random.randint(), np.random.seed()\nplt.hist()\nnp.add(), np.substract(), np.divide(), np.multiply(), np.exp(), np.sqrt(), np.log(), np.dot(), np.array_equal()\narray.sum([axis=0/1]), np.sum(변수[, axis=0/1])), arrry.min([axis=0/1]), np.min(변수[, axis=0/1]), array.max([axis=1/o]), np.max(array[, axis=1/o])\naxis = 1(가로), 0(세로)\narray.cumsum([axis=1/0]), np.cumsum(array[, axis=1/o])\narray.mean([axis=1/0]), np.mean(array[, axis=1/0]), array.std([axis=1/0]), np.std(array[, axis=1/o])\nnp.median(array[, axis=1/0]) <- array.median()은 안 됨\nnp.corrcoef(array1, array2)\nBroadCasting"
  },
  {
    "objectID": "blog/posts/22-10-19.html#book",
    "href": "blog/posts/22-10-19.html#book",
    "title": "22-10-19(수)",
    "section": "book",
    "text": "book\n\n이것이 코딩 테스트다 8장 다이나믹 프로그래밍"
  },
  {
    "objectID": "blog/posts/22-10-09.html",
    "href": "blog/posts/22-10-09.html",
    "title": "22-10-09(일)",
    "section": "",
    "text": "이틀 내내 obsidian을 github pages에 올릴려고 삽질했다. 하지만 금요일에 구현한 방법으로 되돌아왔다. 이틀 동안의 고생이 성과 없이 끝났지만, mkdocs가 어떻게 작동하는지 조금 알았다.\n삽질한 이유는 obsidian의 dataview 플러그인 출력화면이 깃허브에 보이지 않고 소스가 그대로 출력됐기 때문이다. 하루를 꼬박 검색한 끝에 dataview 출력화면을 깃허브에 올리려면 obsidian에서 지원을 해야 한다는 걸 알았다. 그 기능을 구현한 플러그인이 Github Publisher다.\n요약하면, obsidian에서 출력 화면을 깃허브에 올리면 github action가 작동해 웹문서로 변환한다. 깃허브 액션은 obsidian-mkdocs-publisher-template 을 이용한다. 옵시디언과 깃허브 두 군데 모두 환경설정을 해야 한다.\n하지만 작동원리를 모르는 상태에서 부실한 설명서만 읽고 원하는 대로 만들기란 쉽지 않았다. 결국 dataview는 출력했지만 링크는 작동하지 않았다. 여기에 더 매달리다가는 지금 할 일에 지장이 되어 멈추기로 했다.\n언젠가 Typescript를 공부해 플러그인을 만들겠다."
  },
  {
    "objectID": "blog/posts/22-10-18.html",
    "href": "blog/posts/22-10-18.html",
    "title": "22-10-18(화)",
    "section": "",
    "text": "오버라이딩\nnumpy: np.array(), np.array(리스트, dtype=자료형), ndarray.shape, ndarray.ndim, ndarray.size, ndarray.dtype, ndarray.astype(), ndarray.reshape()\nnumpy: np.zeros(), np.ones(), np.full(), np.eye(), np.empty(), np.zeros_like(), np.ones_like(), np.full_like()\nnumpy: np.linspace(), np.arange(), np.logspace(), np.random.normal(), np.random.rand(), np.random.randn(), np.random.randint(), np.random.random()"
  },
  {
    "objectID": "blog/posts/22-10-18.html#book",
    "href": "blog/posts/22-10-18.html#book",
    "title": "22-10-18(화)",
    "section": "book",
    "text": "book\n\n이것이 코딩 테스트다 7장 순차탐색, 이진 탐색, Parametric Search\n21가지 작고 재미난 파이썬 프로젝트 6장 단어 세기\n21가지 작고 재미난 파이썬 프로젝트 7장 딕셔너리에서 아이템 찾기"
  },
  {
    "objectID": "blog/posts/22-10-18.html#참고서",
    "href": "blog/posts/22-10-18.html#참고서",
    "title": "22-10-18(화)",
    "section": "참고서",
    "text": "참고서\n\nNumpy Learn"
  },
  {
    "objectID": "blog/posts/22-10-28.html",
    "href": "blog/posts/22-10-28.html",
    "title": "22-10-28(금)",
    "section": "",
    "text": "지금 사용 중인 mkdocs는 주피터 노트북을 매번 마크다운 파일로 변환해야 하는 게 번거롭다. 게다가 링크로 연결할 수 있지만 메뉴가 나오지 않아 전혀 다른 페이지로 보인다. 웹 검색 중에 간간히 주피터 노트북으로 만든 웹 페이지가 보여 방법을 찾아봤다. 깃허브의 기본 블로그 제작 도구인 지킬로 만든 것은 제외하고 찾은 게 Quarto다. 쿠알토로 읽어야 하나? 인쇄 용어이고 우리말로는 두번 접기라고 한다.(출처) 인쇄백과사전에 인쇄물을 두번 돌려가며 직각으로 접어서 8페이지 접장이 되게 하는 것이라고 풀이되어 있다. 개발자가 왜 이름을 붙였는지 궁금하다. Quarto는 주피터 노트북 파일을 별도로 조작하지 않고 바로 깃허브 페이지로 바꿀 수 있다. 홈페이지에 설명이 비교적 상세하게 되어있어 쉽게 주피터 노트북 파일을 html로 바꿀 수 있게 됐다.\n설명서를 읽다가 오타를 발견했다. 전 같으면 그냥 넘어갈 일을 오픈 소스 공헌자가 되는 제일 쉬운 방법이 오타를 제보하는 거라는 파이썬 강사님 말이 떠올라 이슈에 글을 남겼다. 놀랍게도 당일 바로 답장이 왔다. 개발자들은 이렇게 이슈로 소통한다는 걸 알게 됐다."
  },
  {
    "objectID": "blog/posts/22-10-28.html#folium-코로플레스-지도-만들기-개요",
    "href": "blog/posts/22-10-28.html#folium-코로플레스-지도-만들기-개요",
    "title": "22-10-28(금)",
    "section": "folium 코로플레스 지도 만들기 개요",
    "text": "folium 코로플레스 지도 만들기 개요\n\n설치:\n기본 지도 띄우기\n원하는 지역의 지도 띄우기\n지도에 마커 표시하기\n코로플레스 지도 만들기\n\n행정구역 경계 정보 파일 구하기\n지도에 표시할 데이터 만들기\n코드로 구현하기"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "일일 학습 로그",
    "section": "",
    "text": "Oct 31, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 29, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 28, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 27, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 25, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 24, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 22, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 20, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 19, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 18, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 10, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 7, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 5, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 4, 2022\n\n\nlazychoi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "👀",
    "section": "",
    "text": "기대와 불안, 희망과 염려 없이 그저 불확실함 속으로, 뚜벅 뚜벅"
  },
  {
    "objectID": "index.html#읽고-있는-책",
    "href": "index.html#읽고-있는-책",
    "title": "👀",
    "section": "읽고 있는 책",
    "text": "읽고 있는 책\n이것이 취업을 위한 코딩 테스트다\n21개의 작고 재미난 파이썬 프로젝트\n판다스 인 액선"
  },
  {
    "objectID": "index.html#오답노트",
    "href": "index.html#오답노트",
    "title": "👀",
    "section": "오답노트",
    "text": "오답노트\n파이썬\n판다스\n넘파이"
  },
  {
    "objectID": "index.html#지식관리",
    "href": "index.html#지식관리",
    "title": "👀",
    "section": "지식관리",
    "text": "지식관리\nQuarto\nObsidian"
  },
  {
    "objectID": "index.html#개발환경",
    "href": "index.html#개발환경",
    "title": "👀",
    "section": "개발환경",
    "text": "개발환경\n맥 & 리눅스\n도커"
  },
  {
    "objectID": "index.html#시각화",
    "href": "index.html#시각화",
    "title": "👀",
    "section": "시각화",
    "text": "시각화\nfolium Choropleth Map"
  },
  {
    "objectID": "index.html#일일로그",
    "href": "index.html#일일로그",
    "title": "👀",
    "section": "일일로그",
    "text": "일일로그\n2022년 10월"
  },
  {
    "objectID": "review/python.html",
    "href": "review/python.html",
    "title": "파이썬 오답노트",
    "section": "",
    "text": "lazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 13, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 31, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 14, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2022\n\n\nlazychoi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 11, 2022\n\n\nlazychoi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "review/python/list_comprehension.html",
    "href": "review/python/list_comprehension.html",
    "title": "리스트 내장 함수",
    "section": "",
    "text": "if문만 쓸 때는 for문 오른쪽에, if else문을 쓸 때는 for문 왼쪽에 쓴다.\nfor문을 중첩해서 쓸 수 있다.\nif문을 중첩해 쓸 수 있다.\n사용자 정의 함수를 사용할 수 있다.\n\n\n\n\n1에서 10까지 수 중 3의 배수만 출력 -> for if문 사용\n\n\n[i for i in range(2, 10) if  i % 3 == 0]\n\n[3, 6, 9]\n\n\n\n짝수일 때는 ‘짝수’를, 홀수일 때는 ’홀수’ 출력 -> if else for문 사용\n\n\n[ '짝수' if i % 2 == 0 else '홀수' for i in range(1, 10)]\n\n['홀수', '짝수', '홀수', '짝수', '홀수', '짝수', '홀수', '짝수', '홀수']\n\n\n\n구구단에서 짝이 되는 숫자 출력(2단만) -> for문 중첩 사용\n\n\n[ [i, j] for i in range(2, 3) for j in range(1, 10)]\n\n[[2, 1], [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9]]\n\n\n\n성적에 따라 수우미양가 출력 -> 사용자 정의 함수 사용\n\n\nimport numpy as np\n\ndef grade(num):\n    if num >= 90:\n        return '수'\n    elif num >= 80:\n        return '우'\n    elif num >= 70:\n        return '미'\n    elif num >= 60:\n        return '양'\n    else:\n        return '가'\n[grade(i) for i in np.random.randint(1, 100, size=10)]\n\n['미', '가', '가', '양', '가', '수', '우', '가', '가', '양']"
  },
  {
    "objectID": "review/python/class.html",
    "href": "review/python/class.html",
    "title": "구조체와 클래스",
    "section": "",
    "text": "클래스를 정의하면 힙에 저장.\n객체를 선언한 뒤에야 기능 작동"
  },
  {
    "objectID": "review/python/argparse.html",
    "href": "review/python/argparse.html",
    "title": "argparse",
    "section": "",
    "text": "출처: tiny python project 부록 pp.457~481\nargparse 자습서"
  },
  {
    "objectID": "review/python/argparse.html#인수-종류",
    "href": "review/python/argparse.html#인수-종류",
    "title": "argparse",
    "section": "인수 종류",
    "text": "인수 종류\n\n위치 인수(positional argument): 인수의 순서와 숫자가 의미 결정\n명명된 옵션 인수(named option): 대시 하나(-) 또는 두 개(–)로 인수 정의하고 그 뒤에 값을 지정. 기본값을 설정하는 게 좋음.\n플래그(flag): yes/no, True/False."
  },
  {
    "objectID": "review/python/argparse.html#parser-만들기",
    "href": "review/python/argparse.html#parser-만들기",
    "title": "argparse",
    "section": "parser 만들기",
    "text": "parser 만들기\nimport argparse\n\nparser = argparse.ArgumentParser(\n    description='Argparse Python script',\n    formatter_class=argparse.ArgumentDefaultHelpFormatter\n)\n\nparse : 인수로 전달된 텍스트의 구조와 순서에서 특정 의미를 추출하는 처리\n==명령줄의 모든 인수는 문자열=="
  },
  {
    "objectID": "review/python/argparse.html#위치-인수-만들기",
    "href": "review/python/argparse.html#위치-인수-만들기",
    "title": "argparse",
    "section": "위치 인수 만들기",
    "text": "위치 인수 만들기\nparser.add_argument(\n    'positional',       # 앞에 대시(-)가 없으면 위치 인수. 이름은 아무 거나\n    metavar='str',      # 데이터 타입 힌트. 모든 인수의 기본값은 문자열\n    help='A positional argument'  # 인수에 대한 간단한 설명\n)"
  },
  {
    "objectID": "review/python/argparse.html#두-개의-위치-인수가-필요한-경우",
    "href": "review/python/argparse.html#두-개의-위치-인수가-필요한-경우",
    "title": "argparse",
    "section": "두 개의 위치 인수가 필요한 경우",
    "text": "두 개의 위치 인수가 필요한 경우\nparser.add_argument(\n    'color',\n    metavar='color',\n    type=str,\n    help='The color of the garment'\n)\n\nparser.add_argument(\n    'size',\n    metavar='size',\n    type=int,\n    help='The size of the garment'\n)"
  },
  {
    "objectID": "review/python/argparse.html#미리-지정한-값-내에서만-입력-choices",
    "href": "review/python/argparse.html#미리-지정한-값-내에서만-입력-choices",
    "title": "argparse",
    "section": "미리 지정한 값 내에서만 입력: choices",
    "text": "미리 지정한 값 내에서만 입력: choices\nparser.add_argument(\n    'color',\n    metavar='color',\n    type=str,\n    help='The color of the garment',\n    choices=['red', 'yellow', 'blue']\n)\n\nparser.add_argument(\n    'size',\n    metavar='size',\n    type=int,\n    help='The size of the garment',\n    choices=range(1, 11)\n)"
  },
  {
    "objectID": "review/python/argparse.html#두-숫자-받아-더하기.-두-개의-동일-위치-인수",
    "href": "review/python/argparse.html#두-숫자-받아-더하기.-두-개의-동일-위치-인수",
    "title": "argparse",
    "section": "두 숫자 받아 더하기. 두 개의 동일 위치 인수",
    "text": "두 숫자 받아 더하기. 두 개의 동일 위치 인수\n#!/usr/bin/env python3\n\"\"\"\nAuthor : playdata <playdata@localhost>\nDate   : 2022-10-11\nPurpose: Picnic game\n\"\"\"\n\nimport argparse\nfrom secrets import choice\n\nparser = argparse.ArgumentParser(\n    description='Argparse Python script',\n    formatter_class=argparse.ArgumentDefaultsHelpFormatter\n)\n\n\n# --------------------------------------------------\ndef get_args():\n    '''get args'''\n\n    parser.add_argument(\n        'numbers',\n        metavar='int',\n        nargs=2,       # 인수 2개 입력하라\n        type=int,      # 각 값은 정수로 변환될 수 있어야 하며, 그렇지 않으면 오류 처리\n        help='numbers',\n    )\n\n    return parser.parse_args()\n\n\n# --------------------------------------------------\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n    args = get_args()\n    n1, n2 = args.numbers\n    print(f'{n1} + {n2} = {n1 + n2}')\n\n\n# --------------------------------------------------\nif __name__ == '__main__':\n    main()\n==nargs = 2==, type=int 추가"
  },
  {
    "objectID": "review/python/argparse.html#하나-이상의-동일한-위치-인수-입력",
    "href": "review/python/argparse.html#하나-이상의-동일한-위치-인수-입력",
    "title": "argparse",
    "section": "하나 이상의 동일한 위치 인수 입력",
    "text": "하나 이상의 동일한 위치 인수 입력\n#!/usr/bin/env python3\n\"\"\"\nAuthor : playdata <playdata@localhost>\nDate   : 2022-10-11\nPurpose: Picnic game\n\"\"\"\n\nimport argparse\nfrom secrets import choice\n\nparser = argparse.ArgumentParser(\n    description='Argparse Python script',\n    formatter_class=argparse.ArgumentDefaultsHelpFormatter\n)\n\n\n# --------------------------------------------------\ndef get_args():\n    '''get args'''\n\n    parser.add_argument(\n        'numbers',\n        metavar='int',\n        nargs='+',     # 인수 1개 이상 입력하라\n        type=int,      # 각 값은 정수로 변환될 수 있어야 하며, 그렇지 않으면 오류 처리\n        help='numbers',\n    )\n\n    return parser.parse_args()\n\n\n# --------------------------------------------------\ndef main():\n    \"\"\"Make a jazz noise here\"\"\"\n\n    args = get_args()\n    numbers = args.numbers\n    print('{} = {}'.format(' + '.join(map(str, numbers)), sum(numbers)))\n\n\n# --------------------------------------------------\nif __name__ == '__main__':\n    main()\n==nargs=‘+’== : 가변 인수\n리스트 안의 모든 숫자를 더하는 식과 결과값 표시:\n\nprint('{} = {}'.format(' + '.join(map(str, numbers)), sum(numbers)))"
  },
  {
    "objectID": "review/python/argparse.html#옵션-있으면-리스트-정렬-없으면-입력-순으로",
    "href": "review/python/argparse.html#옵션-있으면-리스트-정렬-없으면-입력-순으로",
    "title": "argparse",
    "section": "옵션 있으면 리스트 정렬, 없으면 입력 순으로",
    "text": "옵션 있으면 리스트 정렬, 없으면 입력 순으로\nparser.add_argument(\n    '-s', \n    '--sorted',\n    help='sort items',\n    action='store_true'  # 옵션이 지정되면 arg.sorted 값에 True 입력. 지정하지 않으면 False 입력\n)\n\nargs = parser.parse_args()\nif args.sorted:\n    items = sorted(args.items)\nelse:\n    items = args.items"
  },
  {
    "objectID": "review/python/str-translate.html",
    "href": "review/python/str-translate.html",
    "title": "str.translate()",
    "section": "",
    "text": "jumper = {'1':'9','2':'8','3':'7','4':'6','5':'0','6':'4','7':'3','8':'2','9':'1','0':'5'}\n\ntext = 'Jenny = 867-5309'\nprint( text.translate(str.maketrans(jumper)) )\n\n# 결과\n# Jenny = 243-0751"
  },
  {
    "objectID": "review/python/show_line.html",
    "href": "review/python/show_line.html",
    "title": "줄번호 출력",
    "section": "",
    "text": "코드 실행 흐름을 파악하기 위해 종종 print()문을 코드 중간에 넣어 사용한다. 문제는 출력 위치를 나타내기 위해 따옴표 안에 고유한 문자열을 넣어 다른 print()문과 구분하는 게 여간 성가신 일이 아니다. 다음 코드는 호출한 곳의 줄번호를 반환하여 어느 곳에 위치한 print()문인지 쉽게 파악하게 해준다.\ndef line_info(return_type=None):\n    import inspect\n    \n    # 여기를 호출한 곳의 라인위치(라인번호)를 리턴한다.\n    cf = inspect.currentframe()\n    return cf.f_back.f_lineno\n    \n\ndef gcd(a, b):\n    if a % b == 0:\n        print(a, b, '<----', line_info() )\n        return b\n    else:\n        print(a, b, a%b, '<----', line_info() )\n        return gcd(b, a % b)\n\nprint(gcd(32, 72))\n# 32 72 32 <---- 14\n# 72 32 8 <---- 14\n# 32 8 <---- 11\n# 8\n여기선 줄번호만 가져오는 코드만 사용했다. 출처에는 호출한 파일과 함수까지 가져오는 코드가 있다."
  },
  {
    "objectID": "review/python/json_crawling.html",
    "href": "review/python/json_crawling.html",
    "title": "json 데이터 크롤링",
    "section": "",
    "text": "교보문고 베스트셀러 데이터 크롤링(최대 100위까지)\n순위, 제목, 저자, 할인가\nimport json\nimport requests\n\n# url 구조 파악\n# 크롬 개발자 도구 >>> networks >>> Fetch/XHR 에서 찾음\njson_url = \"https://product.kyobobook.co.kr/api/gw/pub/pdt/best-seller/online?page=1&per=100&period=001&dsplDvsnCode=000&dsplTrgtDvsnCode=001\"\n\nres = requests.get(json_url)\n\njson_dict = json.loads(res.text)\nbest_dict = json_dict['data']['bestSeller']\n\nrank = []\ntitle = []\nauthor = []\nsale_price = []\nfor item in best_dict:\n    rank.append(item['prstRnkn'])\n    title.append(item['cmdtName'])\n    author.append(item['chrcName'])\n    sale_price.append(item['sapr'])\nfor book in zip(rank, title, author, sale_price):\n    print(book)"
  },
  {
    "objectID": "review/python/shallow_copy-deep_copy.html",
    "href": "review/python/shallow_copy-deep_copy.html",
    "title": "깊은 복사(deep copy) vs 얉은 복사(shallow copy)",
    "section": "",
    "text": "좋은 코드 실행 시각화 도구: python tutor"
  },
  {
    "objectID": "review/python/shallow_copy-deep_copy.html#얉은-복사shallow-copy",
    "href": "review/python/shallow_copy-deep_copy.html#얉은-복사shallow-copy",
    "title": "깊은 복사(deep copy) vs 얉은 복사(shallow copy)",
    "section": "얉은 복사(shallow copy)",
    "text": "얉은 복사(shallow copy)\na = [1,2,3,4]\nb = a\n\nprint( id(a)==id(b) )\n\na[0] = 100\nprint( a, b )\n\n\n\na=1\n\n\n\n\n\na=100"
  },
  {
    "objectID": "review/python/shallow_copy-deep_copy.html#깊은-복사deep-copy",
    "href": "review/python/shallow_copy-deep_copy.html#깊은-복사deep-copy",
    "title": "깊은 복사(deep copy) vs 얉은 복사(shallow copy)",
    "section": "깊은 복사(deep copy)",
    "text": "깊은 복사(deep copy)\na = [1,2,3,4]\nc = a.copy()\n\nprint( id(a)==id(c) ) # False\n\na[0] = 100\nprint( a, c )         # [100, 2, 3, 4] [1, 2, 3, 4]\n\n\n\na.copy\n\n\n\n\n\na.copy"
  },
  {
    "objectID": "review/python/shallow_copy-deep_copy.html#deep-copy-list-in-list",
    "href": "review/python/shallow_copy-deep_copy.html#deep-copy-list-in-list",
    "title": "깊은 복사(deep copy) vs 얉은 복사(shallow copy)",
    "section": "deep copy “list in list”",
    "text": "deep copy “list in list”\nx = [[1,2], 3, 4]\ny = x.copy()\n\nprint( id(x)==id(y), id(x[0])==id(x[0]) ) # False True\n\nx[0][0] = 100\nprint( x, y ) # [[100, 2], 3, 4] [[100, 2], 3, 4]\n\n리스트 내의 리스트는 주소 복사\n\n\n\n\nx.copy\n\n\n위 문제를 해결하려면 for문을 돌려 내부 리스트를 깊은 복사한다.\nz = []\nfor i in x:\n    if type(i) == list:\n        z.append(i.copy())\n    else:\n        z.append(i)\n\nx[0][0] = 200\nx, z    # ([[200, 2], 3, 4], [[100, 2], 3, 4])"
  },
  {
    "objectID": "review/python/list_reverse.html",
    "href": "review/python/list_reverse.html",
    "title": "리스트 내장 함수",
    "section": "",
    "text": "리스트변수.reverse() 함수는 반환값이 없고 자신을 변경하는 점을 주의해야 한다.\n\na = [1, 4, 2,3, 5]\na.reverse()\n\n\na\n\n[5, 3, 2, 4, 1]"
  },
  {
    "objectID": "review/python/crawling_in_wsl.html",
    "href": "review/python/crawling_in_wsl.html",
    "title": "크롤링 in wsl",
    "section": "",
    "text": "설치 및 환경설정 참고 사이트(영문)\n주피터 노트북에서 selenium 사용(영문)"
  },
  {
    "objectID": "review/python/crawling_in_wsl.html#selenium",
    "href": "review/python/crawling_in_wsl.html#selenium",
    "title": "크롤링 in wsl",
    "section": "selenium",
    "text": "selenium\n\nselenium 설치\n$ pip install selenium\n?? 주피터 노트북에서 임포트할 경우 에러 발생 vscode에서는 잘 됨\n\n\nchrome 설치, webdriver 다운로드\n$ pip install chromedriver_autoinstaller\nwsl에 크롬 설치\nsudo apt update && sudo apt -y upgrade && sudo apt -y autoremove\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\nsudo apt -y install ./google-chrome-stable_current_amd64.deb\ngoogle-chrome --version\nwebdriver 다운로드\nsudo wget https://chromedriver.storage.googleapis.com/106.0.5249.61/chromedriver_linux64.zip\nsudo apt install unzip # unzip 설치\nunzip chromedriver_linux64.zip"
  },
  {
    "objectID": "review/python/crawling_in_wsl.html#오류",
    "href": "review/python/crawling_in_wsl.html#오류",
    "title": "크롤링 in wsl",
    "section": "오류",
    "text": "오류\nDeprecationWarning: executable_path has been deprecated, please pass in a Service object driver = webdriver.Chrome(‘./chromedriver’)\n또는\n(unknown error: DevToolsActivePort file doesn’t exist)\n같은 여러 가지 오류를 모두 잡은 코드\n$ pip install webdriver-manager\nfrom selenium import webdriver \nfrom selenium.webdriver.chrome.service import Service\nfrom webdriver_manager.chrome import ChromeDriverManager\n\noptions = webdriver.ChromeOptions()\noptions.add_argument(\"no-sandbox\")\noptions.add_argument(\"--disable-extensions\")\noptions.add_argument(\"--headless\")\n\ndriver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)\ndriver.get(\"https://www.google.com\")\nprint(driver.title)"
  },
  {
    "objectID": "review/python/crawling_in_wsl.html#제한-사항",
    "href": "review/python/crawling_in_wsl.html#제한-사항",
    "title": "크롤링 in wsl",
    "section": "제한 사항",
    "text": "제한 사항\n==wsl에서는 크롬 브라우저가 뜨지 않는다.==\n반환값을 확인하며 코드를 작성해야 한다."
  },
  {
    "objectID": "review/python/crawling_in_wsl.html#기억할-사항",
    "href": "review/python/crawling_in_wsl.html#기억할-사항",
    "title": "크롤링 in wsl",
    "section": "기억할 사항",
    "text": "기억할 사항\nselenium은 driver.page_source 명령으로 소스 코드를 동적으로 불러올 수 있다. 즉, 버튼을 클릭하거나 스크롤하면 소스 코드가 계속 추가된다."
  },
  {
    "objectID": "review/python/os-module.html",
    "href": "review/python/os-module.html",
    "title": "os module",
    "section": "",
    "text": "현재 디렉토리에 file이 존재하는지 검사: os.path.isfile(‘filename’)\n파일명 가져오기: os.path.basename()\n디렉토리 경로 가져오기: os.path.dirname()"
  },
  {
    "objectID": "review/python/gil.html",
    "href": "review/python/gil.html",
    "title": "GIL(Global Interpreter Lock)",
    "section": "",
    "text": "참고:"
  },
  {
    "objectID": "review/python/gil.html#정의",
    "href": "review/python/gil.html#정의",
    "title": "GIL(Global Interpreter Lock)",
    "section": "정의",
    "text": "정의\n다수의 스레드가 동시에 파이썬 바이트 코드를 실행하지 못하게 막는. 일종의 뮤텍스(a mutex (or a lock) that allows only one thread to hold the control of the Python interpreter.)"
  },
  {
    "objectID": "review/python/gil.html#이해를-위한-전제-지식",
    "href": "review/python/gil.html#이해를-위한-전제-지식",
    "title": "GIL(Global Interpreter Lock)",
    "section": "이해를 위한 전제 지식",
    "text": "이해를 위한 전제 지식\n\nthread\nmutex(mutual exclusion)\nrace condition\nreference counting(메모리 관리)\nGarbage Collection"
  },
  {
    "objectID": "review/python/gil.html#설명",
    "href": "review/python/gil.html#설명",
    "title": "GIL(Global Interpreter Lock)",
    "section": "설명",
    "text": "설명\n\n한 시점에 하나의 스레드에만 모든 자원을 할당하고 다른 스레드가 접근하지 못하도록 막는 기능 수행\nGIL이 스레드끼리 공유하는 프로세스의 자원을 이름 그대로 Global 하게 Lock 해버리고 단 하나의 스레드에만 이 자원에 접근하는 것을 허용"
  },
  {
    "objectID": "review/python/gil.html#gil이-야기하는-문제",
    "href": "review/python/gil.html#gil이-야기하는-문제",
    "title": "GIL(Global Interpreter Lock)",
    "section": "GIL이 야기하는 문제",
    "text": "GIL이 야기하는 문제\n\nCPU-bound, multi-thread 코드를 실행할 때 병목을 일으킬 수 있다.\n멀티스레드라 하더라도 한 번에 하나의 스레드만 실행\n-> 컨텍스트 전환 비용 발생"
  },
  {
    "objectID": "review/python/gil.html#왜-파이썬에서는-gil을-쓰는가",
    "href": "review/python/gil.html#왜-파이썬에서는-gil을-쓰는가",
    "title": "GIL(Global Interpreter Lock)",
    "section": "왜 파이썬에서는 GIL을 쓰는가?",
    "text": "왜 파이썬에서는 GIL을 쓰는가?\n\n파이썬은 모든 객체의 참조 횟수(reference count)를 저장하여, 이것이 0이 되면 GC(Garbage Collector)가 객체를 메모리에서 삭제한다.\n만약 여러 스레드에서 동시에 한 객체에 접근하면 경쟁 상태(race Condition)가 되어 문제 발생\n참조 횟수 변수(reference count variable)는 경쟁 상태(race Condition)로부터 보호되어야 한다.\n경쟁 상태를 막기 위해 한 스레드만 접근하게 함"
  },
  {
    "objectID": "review/python/gil.html#race-codition에서-발생하는-문제-확인-코드",
    "href": "review/python/gil.html#race-codition에서-발생하는-문제-확인-코드",
    "title": "GIL(Global Interpreter Lock)",
    "section": "race codition에서 발생하는 문제 확인 코드",
    "text": "race codition에서 발생하는 문제 확인 코드\n# 출처: https://dgkim5360.tistory.com/entry/understanding-the-global-interpreter-lock-of-cpython\n\nimport threading\n\nx = 0\n\ndef foo():\n    global x\n    for i in range(10000):\n        x += 1\n    \ndef bar():\n    global x\n    for i in range(10000):\n        x -= 1\n    \nt1 = threading.Thread(target=foo)\nt2 = threading.Thread(target=bar)\nt1.start()\nt2.start()\nt1.join()\nt2.join()\n\nprint(x)\n-> 0이 출력되어야 할 것 같은데, 다른 값이 출력됨"
  },
  {
    "objectID": "review/python/all_object.html",
    "href": "review/python/all_object.html",
    "title": "파이썬에서 모든 것은 객체다 요약",
    "section": "",
    "text": "’객체(object)’라는 개념\n\nC 프로그래밍에서 실제로 선언되어 구체적인 메모리 주소를 갖게된 ’변수’와 ’함수’를 포괄하여 부르는 용어\n최근에는 객체 지향 프로그래밍 기법에 따라 클래스에 기초하여 만들어져 구체적인 메모리 주소를 할당받은 인스턴스(instance)를 의미하는 좁은 뜻으로 사용\n\n’객체(object)’라는 용어를 사용하는 이유\n\n첫째 이유는 실제로 물리적인 메모리 어디엔가 구체적인 데이터 내용을 저장한 상태를 추상적인 틀에 불과한 ’자료형(data type)’의 개념과 선명하게 대비하는 장점\n특히 좁은 의미로 ’객체’라는 용어를 사용하는 경우에는 이 용어가 여러 변수와 함수들이 묶여져 있는 것을 하나의 단일한 다발로 생각할 수 있게 도와준다는 것\n\n\n파이썬에서는 사용자 정의 자료형을 ‘class’ 키워드를 사용하여 정의할 수 있다. 이렇게 정의된 자료형인 클래스도 이미 구체적인 메모리 주소를 점유하고 구체적인 내용을 담고 있는 하나의 객체이며 그 중에서도 일종의 함수 객체라고 볼 수 있다. 독립된 파일로 저장되는 프로그램인 모듈도 객체다. 이렇게 되는 궁극적인 이유는 ==네임스페이스(이름공간)==이라는 아이디어에 기초하여 파이썬이 설계되었기 때문이다.\n\n함수와 클래스의 비교\n\n함수의 반환값은 return 코드에 의해 정해짐\n클래스 함수 객체의 리턴값은 그 클래스에서 정한 구조를 가진 객체로 정해져 있음\n함수 이름 뒤에 ’( )’를 붙여서 함수를 실행한다는 점에서는 아무런 차이가 없습니다. 즉, 클래스는 특수한 함수 객체라고 볼 수 있다\n\n\n파이썬에서의 클래스 객체(함수)는, 그 실행 시점에 1) 인스턴스 이름으로 특정되는 네임스페이스와 2) 그 내부에 속한 함수들을 리턴해주는 특수한 함수이다.\n파이썬에서 클래스와 그 인스턴스화는 결국 변수들과 함수들을 네임스페이스로 정돈해주는 기능을 수행하며, 이를 통해 객체 지향 프로그래밍의 기법을 구현하고 있다."
  },
  {
    "objectID": "review/python/jupyter_notebook_error.html",
    "href": "review/python/jupyter_notebook_error.html",
    "title": "주피터 노트북이 두 개 설치되어 발생하는 오류 해결",
    "section": "",
    "text": "주피터 노트북 파일을 마크다운 파일로 변환할 때 쓰는 nbconvert를 실행할 때 아나콘다 내의 파이썬이 실행되지 않고 우분투 내의 파이썬이 실행되어 오류를 내뿜는다. 그래서 우분투 내의 파이썬 삭제. 참조한 사이트는 여기다.\n우분투에 깔린 파이썬을 삭제하면 아나콘다 버전이 사용될 줄 알았는데, -bash: /home/playdata/.local/bin/jupyter: /usr/bin/python3: bad interpreter: No such file or directory 요렇게 파이썬 인터프리터가 없다는 메시지가 나온다. 그러면 주피터도 아나콘다 버전이 아닌 우분투 자체에 설치된 것이 사용되는가 싶어 주피터 위치를 확인해 보았다.\n> which -a jupyter\n/home/playdata/.local/bin/jupyter\n/home/playdata/anaconda3/bin/jupyter\n역시나 두 군데 깔려있다. local에 설치된 주피터를 삭제(sudo rm -rf /home/playdata/.local/bin/jupyter)하니 아나콘다에 깔린 주피터가 실행되긴 한다. 하지만 또 다시 에러\nImportError: cannot import name ‘contextfilter’ from ‘jinja2’\n이래저래 안 돼 conda 명령어로 주피터를 재설치하니 성공 conda install jupyter\n주피터도 한 개만 나온다.\n> which -a jupyter\n/home/playdata/anaconda3/bin/jupyter"
  },
  {
    "objectID": "review/python/Dictionary Methods List.html",
    "href": "review/python/Dictionary Methods List.html",
    "title": "👀",
    "section": "",
    "text": "created: 2022-10-07\n출처: w3school\n\n\n\n\n\n\n\n\n\n메서드\n설명\n\n\n\n\nclear()\n모든 요소 삭제. 빈 딕셔너리변수는 남김\n\n\nget()\n지정한 key의 value 가져오기. ==없는 key를 지정해도 오류 미반환==\n\n\nitems()\n(key, value) 쌍 반환.\n\n\nkeys()\n변수 내의 모든 key 반환\n\n\nupdates()\n한 개 이상의 요소 추가. 인수는 딕서녀리형 또는 2차원 리스트\n\n\nvalues()\n변수 내의 모든 value 반환\n\n\n\n==주의!!==\n- dict.key(), dict.values(), dict.items() 모두 ==메모리 낭비를 줄이기== 위해 list 아닌 iterable views를 반환한다. - eg. dict_keys([…]), dict_values([…]), dict_items([…]) - 반환값을 반복문을 써서 각 요소 출력 또는 - 반환값을 리스트 자료형으로 변환해서 사용"
  },
  {
    "objectID": "review/python/meaning_of_a_is_1.html",
    "href": "review/python/meaning_of_a_is_1.html",
    "title": "a = 1의 의미 요약",
    "section": "",
    "text": "출처 1 출처 2"
  },
  {
    "objectID": "review/python/meaning_of_a_is_1.html#요약",
    "href": "review/python/meaning_of_a_is_1.html#요약",
    "title": "a = 1의 의미 요약",
    "section": "요약",
    "text": "요약\n\n파이썬에서 “a=1”은 ‘int’라는 이름의 파이썬 클래스를 가지고 그 인스턴스인 ’a’ 객체를 생성한다는 뜻. 파이썬의 ’a=1’은 ’a=int(1)’를 의미\n\nint()를 정수형 변수를 생성하는 내장함수로 봐서는 안 되고 클래스 int를 가지고 객체를 생성하는 명령으로 봐야 한다. 그래서 객체 a에 포함된 여러 내부 함수를 이용할 수 있는 것이다.\ncf. C 언어에서 “a=1”는 오로지 어떤 메모리 주소에 정수 1을 저장하라는 명령"
  },
  {
    "objectID": "review/python/meaning_of_a_is_1.html#설명",
    "href": "review/python/meaning_of_a_is_1.html#설명",
    "title": "a = 1의 의미 요약",
    "section": "설명",
    "text": "설명\na=1\n\n특정 메모리 주소에 1이라는 정수를 데이터로서 저장하는 명령\n실제로 사용되는 메모리주소는 프로그래머가 특별히 신경쓸 필요는 없음\na는 그 메모리를 대표하는 이름\n따라서 ’변수’는 일종의 오역입니다. 대신 식별자(identifier)라는 말을 사용하는 사람도 많음\n\n==‘a=1’==이라는 명령을 파이썬 인터프리터가 실행하는 순간\n\n컴퓨터는 일정한 메모리 공간을 확보한 후\n그 공간 중 일정한 위치에는 그것이 담게되는 ==데이터의 종류==에 대한 정보를,\n또 다른 일정한 위치에는 ==데이터 내용==을,\n그리고 역시 또 다른 일정한 위치에는 ==그밖에 다른 정보==를 담게 되는 것임\n\n변수나 함수나 모두 ’힙(heap)’이라고 불리는 메모리 영역에 일정한 주소를 차지하고 있는 데이터들을 ==가리킨다==.\n컴퓨터 사이언스에서 ‘힙’이라는 메모리 영역에 생성되는 한 단위의 데이터를’객체(object)’라고 부른다.\n변수명이 가리키는 데이터의 종류는 결국 객체의 종류\n\n파이썬이라는 인터프리터가 가지고 있는 중요한 설계상의 특징\n모든 객체는 클래스라고 불리는 특수한 함수의 출력값\n파이썬에서 객체의 종류는 그것을 리턴해주는 클래스에 따라 정해짐\n\n클래스: 새로운 객체를 만들어 반환하는 함수\n\n객체의 종류, 즉 그 클래스를 확인하는 함수: ==type()== 또는 ==isinstance()==\n객체의 ‘힙’ 공간내 위치를 확인하는 내장함수: ==id()=="
  },
  {
    "objectID": "review/python/string.html",
    "href": "review/python/string.html",
    "title": "문자열",
    "section": "",
    "text": "문자열 -> 개별 문자 리스트로 변환\n\nn = 'abcdef'\nlist(str(n))\n\n['a', 'b', 'c', 'd', 'e', 'f']\n\n\n개별 문자 리스트 -> 문자열로 변환\n\nnlist = ['a', 'b', 'c', 'd', 'e', 'f']\n''.join(nlist)\n\n'abcdef'"
  },
  {
    "objectID": "review/python/string.html#정렬",
    "href": "review/python/string.html#정렬",
    "title": "문자열",
    "section": "정렬",
    "text": "정렬\n문자열 정렬. 오름차순 or 내림차순\n\nn = 'goodafternoon'\nprint('오름차순', sorted(n))\nprint('내림차순', sorted(n, reverse=True))\nprint('오름차순', ''.join(sorted(n)))\nprint('내림차순', ''.join(sorted(n, reverse=True)))\n\n오름차순 ['a', 'd', 'e', 'f', 'g', 'n', 'n', 'o', 'o', 'o', 'o', 'r', 't']\n내림차순 ['t', 'r', 'o', 'o', 'o', 'o', 'n', 'n', 'g', 'f', 'e', 'd', 'a']\n오름차순 adefgnnoooort\n내림차순 troooonngfeda\n\n\n문자열 거꾸로 뒤집기\n\n''.join(list(reversed('hello')))\n\n'olleh'"
  },
  {
    "objectID": "review/python/string.html#자료형-확인",
    "href": "review/python/string.html#자료형-확인",
    "title": "문자열",
    "section": "자료형 확인",
    "text": "자료형 확인\nis로 시작하는 함수가 꽤 많다. 천천히 하나씩 익히자\n\nn, m = '123', 'abc'\nn.isdigit(), m.isdigit()\n\n(True, False)"
  },
  {
    "objectID": "review/algorithm/basic_30/16_lv2.html",
    "href": "review/algorithm/basic_30/16_lv2.html",
    "title": "👀",
    "section": "",
    "text": "---\ntitle: 문자열 다루기 기본\ndate: 2022-10-30\nupdated: last-modified\n---"
  },
  {
    "objectID": "review/algorithm/basic_30/16_lv2.html#접근-과정",
    "href": "review/algorithm/basic_30/16_lv2.html#접근-과정",
    "title": "👀",
    "section": "접근 과정",
    "text": "접근 과정\n문제 링크 https://school.programmers.co.kr/learn/courses/30/lessons/12918\n\nord(‘0’) = 48, ord(‘9’) = 57 이용한다.\n첫 번째에 0이 와 3자리 숫자가 되는 경우는 모두 문자 취급하기 때문에 고려할 필요 없다.\n48에서 57 사이의 값이 나오면 True 반환하는 리스트를 만들다.\nTrue는 1과 같기 때문에 sum()을 해서 4나 6이 나오면 True를 반환한다.\n\n\n틀린 이유\n3, 4번에서 True만 반환하여 더하기 때문에 틀린 게 있어도 True 개수만 4개나 6개면 조건에 맞는 것으로 잘못 생각했다. 만약 ’a1234’가 주어지면 a가 False인데도 [True, True, True, True]가 되어 True를 반환한다.\n\n\n바꾼 것\n\n3번에 False도 리스트에 추가되도록 변경했다.\n4번 조건문에 False not in a 추가하여 False가 있는 리스트를 걸러내도록 했다.\n\n\ns = \"-4.01E-2\"\nanswer = False\n\na = [ True if ord(i) > 47 and ord(i) < 58 else False for i in s]\n\nprint(a)\nif False not in a and sum(a) == 4 or sum(a) == 6:\n    answer = True\nanswer\n\n[False, True, False, True, True, False, False, True]\n\n\nFalse"
  },
  {
    "objectID": "review/algorithm/basic_30/16_lv2.html#다른-사람-풀이-보고-배운-것",
    "href": "review/algorithm/basic_30/16_lv2.html#다른-사람-풀이-보고-배운-것",
    "title": "👀",
    "section": "다른 사람 풀이 보고 배운 것",
    "text": "다른 사람 풀이 보고 배운 것\n리스트의 isdigit() 함수를 써서 코드를 한 줄로 구현했다.\n\ns.isdigit() and len(s) in (4, 6)\n\nFalse\n\n\n정규표현식을 사용한 것도 인상적이다.\n\nimport re\nbool(re.match(\"^(\\d{4}|\\d{6})$\", s))\n\nFalse"
  },
  {
    "objectID": "review/algorithm/basic_30/20_lv2.html",
    "href": "review/algorithm/basic_30/20_lv2.html",
    "title": "K 번째 수",
    "section": "",
    "text": "https://school.programmers.co.kr/learn/courses/30/lessons/42748\n기본 알고리즘. 인덱스가 1부터 시작한다는 것을 주의한다.\n\n슬라이싱으로 i부터 j까지 숫자를 별도의 리스트로 뽑아낸다.\n이 리스트를 정렬한다.\nk-1 인덱스에 해당하는 값을 반환한다.\n\ncommands 변수가 2차원 리스트다. 2차원에 i, j, k 값이 담겨 있다. for문을 사용해 1차원을 벗겨내고 2차원 각 인덱스 값을 한 번에 변수에 담은다. 그러고 나서 위 번호대로 구현한다.\n\narray, commands = [1, 5, 2, 6, 3, 7, 4], [[2, 5, 3], [4, 4, 1], [1, 7, 3]]\nanswer = []\nfor item in commands:\n    i, j, k = item[0]-1, item[1], item[2]-1\n    temp = sorted(array[i:j])\n    answer.append(temp[k])\nanswer\n\n[5, 6, 3]"
  },
  {
    "objectID": "review/algorithm/basic_30/20_lv2.html#다른-사람-코드",
    "href": "review/algorithm/basic_30/20_lv2.html#다른-사람-코드",
    "title": "K 번째 수",
    "section": "다른 사람 코드",
    "text": "다른 사람 코드\n인덱스를 지정하지 않아도 리스트 내 각 요소를 각각 변수로 받을 수 있다.\n\ncommands = [[2, 5, 3], [4, 4, 1], [1, 7, 3]]\nfor item in commands:\n    i, j, k = commands\nprint(i, j, k)\n\n[2, 5, 3] [4, 4, 1] [1, 7, 3]\n\n\nmap과 lambda 함수를 이용해 한 줄로 구현한 코드다. map이 많이도 활용되는구나.\n\narray, commands = [1, 5, 2, 6, 3, 7, 4], [[2, 5, 3], [4, 4, 1], [1, 7, 3]]\nlist(map(lambda x:sorted(array[x[0]-1:x[1]])[x[2]-1], commands))\n\n[5, 6, 3]"
  },
  {
    "objectID": "review/algorithm/basic_30/17_lv2.html",
    "href": "review/algorithm/basic_30/17_lv2.html",
    "title": "👀",
    "section": "",
    "text": "---\ntitle: 정수 내림차순으로 배치하기\ndate: 2022-10-30\nupdated: last-modified\nformat:\n    html:\n        code-fold: False\n---"
  },
  {
    "objectID": "review/algorithm/basic_30/17_lv2.html#접근-과정",
    "href": "review/algorithm/basic_30/17_lv2.html#접근-과정",
    "title": "👀",
    "section": "접근 과정",
    "text": "접근 과정\nhttps://school.programmers.co.kr/learn/courses/30/lessons/12933\n\n정렬 알고리즘을 직접 구현하든디\n파이썬의 sorted(문자열, reverse=True) 함수를 사용한다.\n반환된 리스트를 하나의 문자열로 합친 뒤 숫자형으로 변환\n\n\nn = 118372\nresult = ''\nfor i in sorted(str(n), reverse=True):\n    result += i\nint(result)\n\n873211"
  },
  {
    "objectID": "review/algorithm/basic_30/17_lv2.html#다른-사람-풀이-보고-알게-된-점",
    "href": "review/algorithm/basic_30/17_lv2.html#다른-사람-풀이-보고-알게-된-점",
    "title": "👀",
    "section": "다른 사람 풀이 보고 알게 된 점",
    "text": "다른 사람 풀이 보고 알게 된 점\n문자열을 리스트로 형변환하면 낱개의 문자가 요소로 저장된다.\n\nlist(str(n))\n\n['1', '1', '8', '3', '7', '2']\n\n\n문자를 요소로 가진 리스트를 join 하면 문자열로 합칠 수 있다.\n\n''.join(list(str(n)))\n\n'118372'"
  },
  {
    "objectID": "review/algorithm/basic_30/11_lv2.html",
    "href": "review/algorithm/basic_30/11_lv2.html",
    "title": "👀",
    "section": "",
    "text": "행렬의 덧셈\n문제 보기 https://programmers.co.kr/learn/courses/30/lessons/12950\n\n# 내가 푼 코드\narr1 = [[1, 2], [2, 3]]\narr2 = [[3, 4], [5, 6]]\n\nanswer = [i.copy() for i in arr1]\nfor i in range(len(arr1)):\n    for j in range(len(arr1[i])):\n        answer[i][j] = arr1[i][j] + arr2[i][j]\n\nanswer\n\n[[4, 6], [7, 9]]\n\n\n\n# 다른 사람 코드\n[[c + d for c, d in zip(a, b)] for a, b in zip(arr1, arr2)]\n\n[[4, 6], [7, 9]]\n\n\n\nfor a, b in zip(arr1, arr2):\n    print(a, b)\n    for c, d in zip(a, b):\n        print(c, '+', d, '=', c+d)\n\n[1, 2] [3, 4]\n1 + 3 = 4\n2 + 4 = 6\n[2, 3] [5, 6]\n2 + 5 = 7\n3 + 6 = 9\n\n\n\n# 위 보다 좀 더 간단한 코드\n[list(map(sum, zip(*x))) for x in zip(arr1, arr2)]\n\n[[4, 6], [7, 9]]"
  },
  {
    "objectID": "review/algorithm/basic_30/21_lv2.html",
    "href": "review/algorithm/basic_30/21_lv2.html",
    "title": "하샤드 수",
    "section": "",
    "text": "https://school.programmers.co.kr/learn/courses/30/lessons/12947\n\n숫자를 문자열로 변환하면 리스트로 바뀐다.\n리스트 내의 문자형 숫자를 다시 숫자로 바꾼 뒤 sum() -> divisor\n원래 숫자를 나누어 떨어지면 true 반환하고 그렇지 않으면 false 반환\n\n\nx = 13\ndivisor = sum([int(i) for i in str(x)])\nif x % divisor == 0:\n    answer = True\nelse:\n    answer = False\n\nanswer\n\nFalse"
  },
  {
    "objectID": "review/algorithm/basic_30/21_lv2.html#다른-사람-코드",
    "href": "review/algorithm/basic_30/21_lv2.html#다른-사람-코드",
    "title": "하샤드 수",
    "section": "다른 사람 코드",
    "text": "다른 사람 코드\nanswer에 bool을 담을 필요 없이 바로 조건문을 리턴하면 코드를 줄일 수 있구나\n\nx = 13\ndivisor = sum([int(i) for i in str(x)])\nx % divisor == 0\n\nFalse"
  },
  {
    "objectID": "review/algorithm/basic_30/primer_number.html",
    "href": "review/algorithm/basic_30/primer_number.html",
    "title": "소수 찾기",
    "section": "",
    "text": "에라네토스 체\n\n==소수를 찾기 위해서는 해당 수의 제곱근까지만 알아보면 된다==는건 중학생 때 배운 특정 숫자의 약수 개념을 생각하면 이해가 좀 빠릅니다. 예를 들어 24의 약수는 1, 2, 3, 4, 6, 8, 12, 24인데요, 여기서 (1, 24), (2, 12),… 등등은 곱해서 24가 되는 짝이죠. 이렇게 약수를 확인하면 곱셈에는 서로 짝이 있다는 걸 알 수 있고, 따라서 작은 수부터 나누어지는 지 확인하면 큰 수는 굳이 확인할 필요가 없다는 것을 알 수 있습니다. 이 때, 어떤 수를 두 수의 곱으로 표현할 때 (작은 수 * 큰 수)로 표현한다면, 작은 수 중에 가장 큰 수는 해당 숫자의 제곱근이 될겁니다. (제곱근은 특정 수의 1/2 제곱이니까요) 따라서 소수를 찾기 위해 특정 수를 나누어 볼 때는, 해당 수의 제곱근까지만 확인해보면 됩니다."
  },
  {
    "objectID": "review/algorithm/basic_30/14_lv2.html",
    "href": "review/algorithm/basic_30/14_lv2.html",
    "title": "👀",
    "section": "",
    "text": "---\ntitle: \"최대공약수 최소공배수 구하기\"\ndate: 2022-10-29\nformat:\n    html:\n        code-fold: False\n---"
  },
  {
    "objectID": "review/algorithm/basic_30/14_lv2.html#유클리드-호제법",
    "href": "review/algorithm/basic_30/14_lv2.html#유클리드-호제법",
    "title": "👀",
    "section": "유클리드 호제법",
    "text": "유클리드 호제법\n\n호제법: 서로 나눈다\na를 b로 나눈 나머지를 r이라고 하면 a와 b의 최대공약수 = b와 r의 최대공약수\n\n\n구현\n\na % b = r\nb % r = r2\nr % r2 = r3\n….\nif rn = 0, then rn = 최대공약수\n\n큰 수와 작은 수의 순서는 고려하지 않아도 된다. 왜냐하면, 작은 수를 큰 수로 나누면 나머지가 작은 수가 되고 이를 재귀함수로 넘기면 큰 수가 앞에 오기 때문이다. eg. gcd(8, 40) -> 나머지 8 -> gcd(40, 8)\n\n\n최소공배수\ngcd * a/gcd * b/gcd = a*b/gcd\n\n\n# 유클리드 호제법을 다시 공부한 뒤 짠 코드\ndef gcd(n, m):\n    r = n % m\n    if r == 0:\n        return m\n    else:\n        return gcd(m , r)\ngcd(8, 40)\n\n8\n\n\n\n# 다른 사람 코드. 아이디어는 같고 람다 함수로 짧게 구현\ngcd = lambda a,b : b if not a%b else gcd(b, a%b)\nlcm = lambda a,b : a*b//gcd(a,b)"
  },
  {
    "objectID": "review/algorithm/basic_30/18_lv2.html",
    "href": "review/algorithm/basic_30/18_lv2.html",
    "title": "👀",
    "section": "",
    "text": "---\ntitle: 자연수 뒤집어 배열로 만들기\ndate: 2022-10-30\nupdated: last-modified\nformat:\n    html:\n        code-fold: False\n---"
  },
  {
    "objectID": "review/algorithm/basic_30/18_lv2.html#접근-과정",
    "href": "review/algorithm/basic_30/18_lv2.html#접근-과정",
    "title": "👀",
    "section": "접근 과정",
    "text": "접근 과정\nhttps://school.programmers.co.kr/learn/courses/30/lessons/12932\n\n자연수를 문자열로 변환\n문자열을 sorted(reverse=) 함수로 정렬\n각 요소를 숫자형으로 변환\n\n\n틀린 이유\n문제를 잘못 이해했다. 역순으로 정렬하는 문제가 아니라 단순하게 순서만 뒤집는 문제였다. 힌트를 보고 알았다. 예시가 함정이었다. 다소 야비한 문제다.\n리스트변수.reverse()는 반환값이 없지만, reversed(iterable)는 reversed object 반환\n\nn = 14235\na = list(str(n))\na.reverse()\nanswer = [int(i) for i in a] \nanswer\n\n[5, 3, 2, 4, 1]\n\n\n\nprint(reversed('12134'))\n[int(i) for i in reversed('12134')]\n\n<reversed object at 0x105a0ed60>\n\n\n[4, 3, 1, 2, 1]"
  },
  {
    "objectID": "review/algorithm/basic_30/18_lv2.html#다른-사람-코드",
    "href": "review/algorithm/basic_30/18_lv2.html#다른-사람-코드",
    "title": "👀",
    "section": "다른 사람 코드",
    "text": "다른 사람 코드\nmap 함수를 쓰는 게 간편하다.\n\nlist(map(int, reversed(str(n))))\n\n[5, 3, 2, 4, 1]\n\n\n슬라이싱을 이용할 수도 있구나\n\nn = 14235\n[int(i) for i in str(n)][::-1]\n\n[5, 3, 2, 4, 1]"
  },
  {
    "objectID": "review/algorithm/basic_30/15_lv2.html",
    "href": "review/algorithm/basic_30/15_lv2.html",
    "title": "👀",
    "section": "",
    "text": "정수 제곱근 판별\n문제 보기 https://school.programmers.co.kr/learn/courses/30/lessons/12934\n\n# 제곱근이 정수인지 아닌지 판단해야 하는데\n# 파이썬에서는 나누셈의 반환값은 무조건 실수형이다.\n# 그래서 소숫점 아래 값이 있는 수와 없는 수를 구분하여 소숫점이 없는 수만 골라내야 한다.\n# 생각한 방법은 소숫점 이하를 반올림한 수와 원래 수가 일치하는 것만 정수로 판단하는 것이다.\n\nn = 3\na = n**(1/2)\n\nif a > 0 and a == round(a):\n    answer = (a + 1) ** 2\nelse:\n    answer = -1\n\nanswer\n\n-1\n\n\n\n# 다른 사람 풀이 \n# 정수 여부 판단 방법은 1로 나눈 나머지가 0인지 판단하는 것\n\nn = 121\nsqrt = n**.5\nif sqrt % 1 == 0:\n    answer = (sqrt + 1)**2\nanswer\n\n144.0"
  },
  {
    "objectID": "review/algorithm/basic_30/\bdoksan_algorithm.html",
    "href": "review/algorithm/basic_30/\bdoksan_algorithm.html",
    "title": "독산 플레이데이터 알고리즘 학습 안내표",
    "section": "",
    "text": "제한시간\n난이도\n문제\n힌트\n확인\n\n\n\n\n1\n30분\nLV1\n두 정수 사이의 합\nfor\nO\n\n\n2\n30분\nLV1\n수박수박수박수?\nstring\nO\n\n\n3\n30분\nLV1\n서울에서 김서방 찾기\nmethod\nO\n\n\n4\n30분\nLV2\n약수의 합\nfor, if\nO\n\n\n5\n30분\nLV2\n문자열 내 p와 y의 개수\nmethod 한줄로 풀어보기\nO\n\n\n6\n30분\nLV2\n같은 숫자는 싫어\nfor, if\nO\n\n\n7\n30분\nLV1\n가운데 글자 가져오기\nmath\nO\n\n\n8\n30분\nLV1\nx만큼 간격이 있는 n개의 숫자\nfor\nO\n\n\n9\n30분\nLV2\n직사각형 별찍기\nfor\nO\n\n\n10\n30분\nLV1\n평균 구하기\nmethod 한줄로 풀어보기\nO\n\n\n11\n30분\nLV2\n행렬의 덧셈\nmethod 한줄로 풀어보기\nO\n\n\n12\n30분\nLV1\n짝수와 홀수\nfor, if\nO\n\n\n13\n30분\nLV2\n자릿수 더하기\nmath\nO\n\n\n14\n30분\nLV2\n최대공약수와 최소공배수\n변수, 수학\nO\n\n\n15\n30분\nLV2\n정수 제곱근 판별\nMath 한줄로 풀어보기\nO\n\n\n16\n30분\nLV2\n문자열 다루기 기본\n지수표기법\n\n\n\n17\n30분\nLV2\n정수 내림차순으로 배치하기\n형변환 한줄로 풀어보기\n\n\n\n18\n30분\nLV2\n자연수 뒤집어 배열로 만들기\n형변환 / 숫자\n\n\n\n19\n30분\nLV2\n핸드폰 번호 가리기\nstring 한줄로 풀어보기\n\n\n\n20\n30분\nLV2\nK 번째 수\nmethod\n\n\n\n21\n30분\nLV2\n하샤드 수\n형변환\n\n\n\n22\n30분\nLV2\n나누어 떨어지는 숫자 배열\narray\n\n\n\n23\n1시간\nLV3\n모의고사\n종합\n\n\n\n24\n30분\nLV2\n완주하지 못한 선수\nfor,if\n\n\n\n25\n1시간\nLV2\n2016년\nif\n\n\n\n26\n1시간\nLV3\n소수찾기\n수학\n\n\n\n27\n30분\nLV2\n예산\nfor\n\n\n\n28\n1시간\nLV3\n체육복\nfor, if\n\n\n\n29\n30분\nLV2\n시저암호\nfor, if\n\n\n\n30\n2시간\nLV2\n비밀지도\n진법"
  },
  {
    "objectID": "review/algorithm/basic_30/\bdoksan_algorithm.html#자료구조와-알고리즘",
    "href": "review/algorithm/basic_30/\bdoksan_algorithm.html#자료구조와-알고리즘",
    "title": "독산 플레이데이터 알고리즘 학습 안내표",
    "section": "자료구조와 알고리즘",
    "text": "자료구조와 알고리즘\n\n\n\n주제\n문제\n확인\n\n\n\n\n스택\n괄호\n\n\n\n\n크레인 인형뽑기 게임\n\n\n\n큐\n카드2\n\n\n\n\n프린터\n\n\n\n재귀함수\n이진수 변환\n\n\n\n\n팩토리얼\n\n\n\n\n괄호변환\n\n\n\n트리/그래프\n트리의 부모 찾기\n\n\n\n\n순위\n\n\n\n\n가장 먼 노드\n\n\n\n완전탐색/이분탐색\n연산자 끼워넣기\n\n\n\n\n체스판 다시 칠하기\n\n\n\n\n숫자카드 2\n\n\n\nBFS/DFS\nDFS 와 BFS\n\n\n\n\n미로 탐색\n\n\n\n진법변환/비트연산\n팩토리얼 진법\n\n\n\n\n진법 변환\n\n\n\n\n비밀지도\n\n\n\n해시\nHashing\n\n\n\n\n완주하지 못한 선수\n\n\n\n\n전화번호목록\n\n\n\n동적계획법\n1로 만들기\n\n\n\n\n가장 긴 증가하는 부분 수열\n\n\n\n다익스트라\n최단경로\n\n\n\n\n최소비용 구하기\n\n\n\n탐욕법\n거스름돈\n\n\n\n\n전자레인지\n\n\n\n\n체육복\n\n\n\n\n회의실 배정\n\n\n\n연결리스트/트리구조\n더 맵게\n\n\n\n\n이중우선순위큐\n\n\n\n순열/조합\nN과M 시리즈 15649 ~\n\n\n\n\n암호 만들기\n\n\n\n부분집합\n일곱 난쟁이\n\n\n\n최소신장트리\n상근이의 여행\n\n\n\n\n최소 스패닝 트리"
  },
  {
    "objectID": "review/algorithm/basic_30/19_lv2.html",
    "href": "review/algorithm/basic_30/19_lv2.html",
    "title": "핸드폰 번호 가리기",
    "section": "",
    "text": "https://school.programmers.co.kr/learn/courses/30/lessons/12948\n\n슬라이싱을 이용해 맨 뒤 4자리만 남긴다.\n앞쪽 문자는 for문으로 개수만큼 별을 찍은 후\n뒷 문자와 합친다.\n\n\nphone_number = \"027778888\"\nend = phone_number[-4:]\nfront = ''.join([ '*' for _ in phone_number[:-4]])\nfront + end\n\n'*****8888'"
  },
  {
    "objectID": "review/algorithm/basic_30/19_lv2.html#다른-사람-풀이",
    "href": "review/algorithm/basic_30/19_lv2.html#다른-사람-풀이",
    "title": "핸드폰 번호 가리기",
    "section": "다른 사람 풀이",
    "text": "다른 사람 풀이\n(문자열 길이 - 4)를 별표에 곱했다.\n\nphone_number = \"027778888\"\n\"*\"*(len(phone_number)-4) + phone_number[-4:]\n\n'*****8888'"
  },
  {
    "objectID": "review/algorithm/basic_30/12_lv1.html",
    "href": "review/algorithm/basic_30/12_lv1.html",
    "title": "👀",
    "section": "",
    "text": "짝수 홀수\n문제 보기 https://programmers.co.kr/learn/courses/30/lessons/12937\n\n# 내가 푼 코드\nnum = 4\nanswer = 'Odd' if num % 2 == 1 else 'Even'\nanswer\n\n'Even'\n\n\n\n# 다른 사람 코드\n[\"Even\", \"Odd\"][num & 1]\n\n'Even'\n\n\n\n# 비트 연산\n# 1과 & 연산을 하면 오른쪽 끝자리가 1이기 때문에\n# 연산 대상 숫자의 오른쪽 끝자리가 1이면 1, 0이면 0이 된다.\n# 10진수 짝수는 2진수 오른쪽 끝자리가 0, 홀수는 1이다.\n# 따라서 짝수와 1의 &연산은 0, 홀수와의 연산은 1이 된다. \n\n4 & 1, 3 & 1, 0 & 1\n\n# 4 = 000 0100\n# 1 = 000 0001\n# ------------\n# 0 = 000 0000\n\n(0, 1, 0)"
  },
  {
    "objectID": "review/algorithm/basic_30/13_lv2.html",
    "href": "review/algorithm/basic_30/13_lv2.html",
    "title": "👀",
    "section": "",
    "text": "자릿수 더하기\n문제 보기 https://school.programmers.co.kr/learn/courses/30/lessons/12931\n\n# 숫자 자리수 각각을 분리하는 방법\nn = 123\nsum([ int(i) for i in str(n)])\n\n6\n\n\n\n# 다른 사람 코드\nsum(map(int, str(n)))\n\n6"
  },
  {
    "objectID": "review/algorithm.html",
    "href": "review/algorithm.html",
    "title": "알고리즘",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nOct 31, 2022\n\n\nK 번째 수\n\n\n\n\n\n\nOct 30, 2022\n\n\n독산 플레이데이터 알고리즘 학습 안내표\n\n\n\n\n\n\n\n\n문자열 다루기 기본\n\n\n\n\n\n\nOct 14, 2022\n\n\n소수 찾기\n\n\n\n\n\n\n\n\n자릿수 더하기\n\n\n\n\n\n\n\n\n자연수 뒤집어 배열로 만들기\n\n\n\n\n\n\n\n\n정수 내림차순으로 배치\n\n\n\n\n\n\n\n\n정수 제곱근 판별\n\n\n\n\n\n\n\n\n짝수 홀수\n\n\n\n\n\n\n\n\n최대공약수, 최소공배수 구하기\n\n\n\n\n\n\nOct 31, 2022\n\n\n하샤드 수\n\n\n\n\n\n\nOct 31, 2022\n\n\n핸드폰 번호 가리기\n\n\n\n\n\n\n\n\n행렬의 덧셈\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "de/wsl2.html",
    "href": "de/wsl2.html",
    "title": "wsl2",
    "section": "",
    "text": "wsl에서 윈도우 파일에 접근:\n\n/mnt에 마운트되어 있음 >>> $ cd /mnt/c 명령으로 이동\n$ explorer . 명령으로 윈도우 탐색기를 열어 GUI 화면으로 사용\n\nwsl 저장 위치:\n\nC:\\Users\\사용자명\\AppData\\Local\\Packages\\ 폴더 >>> CanonicalGroupLimited.Ubuntu22.04LTS_79rhkp1fndgsc\\ 처럼 ubuntu 단어가 포함된 폴더 >>> LocalState 안\next4.vhdx라는 이미지 파일로 저장되어 있음\n\nanaconda 설치\njupyter notebook 설정\n$ jupyter notebook --generate-config\nWriting default config to: /home/playdata/.jupyter/jupyter_notebook_config.py\n$ cd .jupyter\n$ vi jupyter_notebook_config.py\n# c.NotebookApp.open_browser = False <– 주석 삭제 후 False로 변경"
  },
  {
    "objectID": "de/shell_prompt.html",
    "href": "de/shell_prompt.html",
    "title": "shell prompt",
    "section": "",
    "text": "출처: How To Customize Bash Prompt in Linux"
  },
  {
    "objectID": "de/shell_prompt.html#bash-prompt-기본값",
    "href": "de/shell_prompt.html#bash-prompt-기본값",
    "title": "shell prompt",
    "section": "bash prompt 기본값",
    "text": "bash prompt 기본값\n\neg. (base) aaa@DESKTOP:~$ 또는 aaa@DESKTOP:~$\n의미: (아나콘다 가상환경) 사용자명@호스트명:\n~: 사용자의_루트디렉토리\n$: 일반 사용자 표시\n#: root 사용자 표시"
  },
  {
    "objectID": "de/shell_prompt.html#bash-prompt-변경-.bashrc-파일",
    "href": "de/shell_prompt.html#bash-prompt-변경-.bashrc-파일",
    "title": "shell prompt",
    "section": "bash prompt 변경: ~/.bashrc 파일",
    "text": "bash prompt 변경: ~/.bashrc 파일\n\n~/.bashrc 파일 변경. 만일을 위해 백업 파일 만들기(~/.bashrc.bak)\n==파일 내용을 변경한 뒤에는 재실행==하여 변경사항 반영: source ~/.bashrc\n\n특정 문자를 프롬프트에 표시\n\n.bashrc 파일 마지막에 PS1=\"MyTestPrompt> \" 추가\n결과: MyTestPrompt>\n\n임시로 프롬프트 변경하기: export command\n\n현재 사용자가 로그아웃할 때까지 유지됨\nMyTestPrompt> export PS1=\"\\u >\"\n결과: aaa >\n\\u: 현재 사용자명을 프롬프트에 표시\n\n사용자명과 도메인명 표시\n\nexport PS1=\"\\u\\H \"\n결과: aaaDESKTOP\n\\H: 전체 hostname 표시\n\n특수문자 표시\n\nexport PS1=\"\\u@\\H :\"\n결과: aaa@DESKTOP :\n프롬프트 끝은 사용자가 입력한 명령과 구분하기 위해 특수문자를 배치하는 게 좋다.\n\n사용자명과 셀이름, 버전 표시\n\nexport PS1=\"\\u@\\s\\v> \"\n결과: aaa@bash5.1>\n\n사용자명과 요일 월 일 표시\n\nexport PS1=\"\\u(\\d)>\n결과: aaa(Fri Oct 07)>\n\n사용자명과 시:분:초 표시\n\nexport PS1=\"\\u(\\t)>\"\n결과: aaa(17:25:07)>\n12시간제로 표시하려면 \\T 사용\n“시간:분”만 표시하려면 \\A 사용\n\n프롬프트의 모든 정보 감추기(디렉토리만 표시)\n\nexport PS1=\"\\W >\"\n결과: ~ >\n\nroot 사용자와 일반 사용자 구분\n\nexport PS1=\"\\W$ \"\n결과: ~$\n~$ sudo su 명령어로 root 사용자로 전환하면 프롬프트가 #으로 바뀜\n# exit 명령어로 로그아웃하면 다시 일반 사용자 프롬프트로 전환됨\n\n글자색 바꾸기\n\nexport PS1=\"\\e[0;32m[\\u: \\W]\\$ \\e[0m\"\n결과: [playdata: ~]$ (초록색)\n\\e[: 색상 지정 시작\n\\e[0m: 색상 지정 끝\n색상코드의 첫 번째 숫자\n\n0 : Normal\n- 1 : Bold (bright)\n- 2 : Dim\n- 4 : Underlined\n\n두 번째 숫자\n\n30 : Black\n31 : Red\n32 : Green\n33 : Brown\n34 : Blue\n35 : Purple\n36 : Cyan\n37 : Light gray"
  },
  {
    "objectID": "de/shell_prompt.html#유용한-사이트",
    "href": "de/shell_prompt.html#유용한-사이트",
    "title": "shell prompt",
    "section": "유용한 사이트",
    "text": "유용한 사이트\n\n기타 다른 명령어 보기\nPS1 명령어 생성기 : 드래그 앤 드랍으로 .bashrc에 입력할 속성값을 쉽게 만들 수 있다."
  },
  {
    "objectID": "visualization.html",
    "href": "visualization.html",
    "title": "시각화",
    "section": "",
    "text": "시각화"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Contact",
    "section": "",
    "text": "https://github.com/lazychoi/lazychoi.github.io/issues"
  },
  {
    "objectID": "books.html",
    "href": "books.html",
    "title": "읽은 책",
    "section": "",
    "text": "이것이 코딩 테스트다\n21가지 작고 재밌는 파이썬 프로젝트\n판다스 인 액션"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "프로젝트",
    "section": "",
    "text": "Oct 27, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/posts/22-10-31.html#quarto",
    "href": "blog/posts/22-10-31.html#quarto",
    "title": "22-10-31(월)",
    "section": "Quarto",
    "text": "Quarto\nqmd가 md와 다른 주요한 기능은 코드 블록에 언어를 중괄호로 감싸 선언하면(eg. {python}) 코드를 실행할 수 있다는 점이다. 주 작업이 문서 작성이고 코드를 간간히 입력할 때 편리하다.\n주피터 노트북은 변환할 때 상단의 yml을 마크다운 블록에 넣어야 한다. 코드 블록에 넣으면 yml 내용이 그대로 웹 페이지에 보인다.\n리스트에 표시되는 제목은 yml의 title에 입력한 값이다. 리스트 제목 밑의 내용은 헤더가 아닌 첫 번째 문단이 나타난다."
  },
  {
    "objectID": "project/2210_pet_choropleth.html",
    "href": "project/2210_pet_choropleth.html",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "",
    "text": "Code\nimport numpy as np\nimport pandas as pd\nimport json\nimport folium\nfrom branca.colormap import linear\nprint('folium version: ', folium.__version__)\n\n\nfolium version:  0.13.0"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#데이터-확인",
    "href": "project/2210_pet_choropleth.html#데이터-확인",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "데이터 확인",
    "text": "데이터 확인\n\n\nCode\npet = pd.read_csv('data/반려동물등록현황.csv')\ngov = pd.read_csv('data/경기도청사및출장소현황.csv')\npopu = pd.read_csv('data/주민등록인구집계현황.csv')\n\n\n\n\nCode\npet.shape\n\n\n(729, 14)\n\n\n\n\nCode\npet.head(3)\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      (등록주체)시군구등록\n      (등록주체)대행업체등록\n      (등록주체)기타\n      (RFID종류)내장형\n      (RFID종류)외장형\n      (RFID종류)인식표\n      등록품종수\n      등록소유자수\n      동물소유자당등록동물수\n      해당동의등록대행업체수\n      데이터기준일자\n    \n  \n  \n    \n      0\n      가평군\n      가평읍\n      941\n      NaN\n      NaN\n      NaN\n      596\n      294\n      51\n      NaN\n      85.0\n      NaN\n      3.0\n      2022-06-14\n    \n    \n      1\n      가평군\n      북면\n      289\n      NaN\n      NaN\n      NaN\n      176\n      93\n      20\n      NaN\n      185.0\n      NaN\n      0.0\n      2022-06-14\n    \n    \n      2\n      가평군\n      상면\n      399\n      NaN\n      NaN\n      NaN\n      217\n      153\n      29\n      NaN\n      243.0\n      NaN\n      0.0\n      2022-06-14\n    \n  \n\n\n\n\n\n\nCode\n# 시군 31개\nlen(pet['시군명'].unique())\n\n\n31\n\n\n\n\nCode\n# 데이터 수집 기간 확인\npet['데이터기준일자'] = pd.to_datetime(pet['데이터기준일자'])\npet['데이터기준일자'].dt.year.unique()\n\n\narray([2022, 2020, 2021])\n\n\n\n\nCode\n# 2021년 이후 데이터만 필터링\n\npet = pet[pet['데이터기준일자'].dt.year >= 2021]\npet.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 714 entries, 0 to 728\nData columns (total 14 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   시군명           714 non-null    object        \n 1   읍면동명          712 non-null    object        \n 2   등록동물수(마리)     714 non-null    int64         \n 3   (등록주체)시군구등록   708 non-null    float64       \n 4   (등록주체)대행업체등록  708 non-null    float64       \n 5   (등록주체)기타      697 non-null    float64       \n 6   (RFID종류)내장형   714 non-null    int64         \n 7   (RFID종류)외장형   714 non-null    int64         \n 8   (RFID종류)인식표   714 non-null    int64         \n 9   등록품종수         708 non-null    float64       \n 10  등록소유자수        713 non-null    float64       \n 11  동물소유자당등록동물수   707 non-null    float64       \n 12  해당동의등록대행업체수   405 non-null    float64       \n 13  데이터기준일자       714 non-null    datetime64[ns]\ndtypes: datetime64[ns](1), float64(7), int64(4), object(2)\nmemory usage: 83.7+ KB\n\n\n\n\nCode\n# 2021년 이후에 미등록 시군이 있어 전체 자료를 모두 사용\nlen(pet['시군명'].unique())\n\n\n30\n\n\n\n\nCode\npet = pd.read_csv('data/반려동물등록현황.csv', encoding='cp949')"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#필요한-컬럼-선택",
    "href": "project/2210_pet_choropleth.html#필요한-컬럼-선택",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "필요한 컬럼 선택",
    "text": "필요한 컬럼 선택\n\n\nCode\npet.columns\n\n\nIndex(['시군명', '읍면동명', '등록동물수(마리)', '(등록주체)시군구등록', '(등록주체)대행업체등록', '(등록주체)기타',\n       '(RFID종류)내장형', '(RFID종류)외장형', '(RFID종류)인식표', '등록품종수', '등록소유자수',\n       '동물소유자당등록동물수', '해당동의등록대행업체수', '데이터기준일자'],\n      dtype='object')\n\n\n\n\nCode\npet = pet.loc[ :, ['시군명', '읍면동명', '등록동물수(마리)', '등록소유자수']]\npet.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      0\n      가평군\n      가평읍\n      941\n      85.0\n    \n    \n      1\n      가평군\n      북면\n      289\n      185.0\n    \n    \n      2\n      가평군\n      상면\n      399\n      243.0\n    \n    \n      3\n      가평군\n      설악면\n      1111\n      625.0\n    \n    \n      4\n      가평군\n      조종면\n      416\n      274.0"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#결측치-확인",
    "href": "project/2210_pet_choropleth.html#결측치-확인",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "결측치 확인",
    "text": "결측치 확인\n\n결측치가 있는 행 출력해서 따로 처리해야 할 사항이 있는지 확인\ndf.isna().sum() -> 열별로 결측치 개수 출력\n[결측치 있는 열].isna() 들를 |(or)로 묶어 boolean indexing\n\n\n\nCode\npet.isna().sum()\n\n\n시군명          0\n읍면동명         2\n등록동물수(마리)    0\n등록소유자수       1\ndtype: int64\n\n\n\n\nCode\n# 결측치가 분석에 큰 영향을 주지 않아 그대로 남김\npet[pet['읍면동명'].isna() | pet['등록소유자수'].isna()]\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      106\n      군포시\n      NaN\n      15480\n      12226.0\n    \n    \n      537\n      의정부시\n      NaN\n      58997\n      NaN"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#시군-단위로-분석-범위-제한",
    "href": "project/2210_pet_choropleth.html#시군-단위로-분석-범위-제한",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "시군 단위로 분석 범위 제한",
    "text": "시군 단위로 분석 범위 제한\n\n시간이 부족해 읍면동 단위까지 데이터를 정제하고 시각화하기 어려워 시군 단위까지로 분석 범위를 제한함\n지도에 등록반려동물수 마커를 표시하는 지점을 시군청 위치로 정함\n관공서 위경도 파일과 병합하기 위해 시군청명을 만들어 별도의 컬럼으로 붙임\n\n\n\nCode\nprint('전체 읍면동 개수: ', len(pet['읍면동명'].unique()))\n\n\n전체 읍면동 개수:  675\n\n\n\n\nCode\nprint(pet['시군명'].unique())\nprint('시군 개수: ', len(pet['시군명'].unique()))\n\n\n['가평군' '고양시' '과천시' '광명시' '광주시' '구리시' '군포시' '김포시' '남양주시' '동두천시' '부천시' '성남시'\n '수원시' '시흥시' '안산시' '안성시' '안양시' '양주시' '양평군' '여주시' '연천군' '오산시' '용인시' '의왕시'\n '의정부시' '이천시' '파주시' '평택시' '포천시' '하남시' '화성시']\n시군 개수:  31\n\n\n시군 단위로 groupby -> 시군별 등록 반려동물 수 합계\n\n\nCode\npet_group = pet.groupby('시군명')\npet_num_si = pet_group[['등록동물수(마리)', '등록소유자수']].sum()\npet_num_si = pet_num_si.reset_index()\npet_num_si.head(5)\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n    \n    \n      4\n      광주시\n      29042\n      19368.0"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#관공서-주소와-위경도-추가",
    "href": "project/2210_pet_choropleth.html#관공서-주소와-위경도-추가",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "관공서 주소와 위경도 추가",
    "text": "관공서 주소와 위경도 추가\n\n지도의 시군청사 위치에 반려동물 숫자를 표시하기로 함.\n그러기 위해서는 시군청사 위도, 경도 데이터를 기존 데이터프레임 기준으로 병합해야 함.\ncsv 파일에 위경도 데이터가 없는 곳은 다울 주소변환 사이트에서 가져옴\n\n\n\nCode\ngov = pd.read_csv('data/경기도청사및출장소현황.csv')\ngov.head(3)\n\n\n\n\n\n\n  \n    \n      \n      집계일자\n      시군명\n      구분명\n      전화번호안내\n      소재지우편번호\n      소재지도로명주소\n      소재지지번주소\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      0\n      2022-05-06\n      광명시\n      철산2동\n      02-2680-6609\n      14215\n      경기도 광명시 시청로 61\n      경기도 광명시 철산동 160-4번지\n      37.484689\n      126.866622\n    \n    \n      1\n      2022-05-06\n      광명시\n      일직동\n      02-2680-5800\n      14345\n      경기도 광명시 양지로 19 6층\n      경기도 광명시 일직동 512-3번지 6층\n      37.418938\n      126.882693\n    \n    \n      2\n      2022-04-16\n      오산시\n      남촌동행정복지센터\n      031-8036-6260\n      18119\n      경기도 오산시 청학로 55-5 (청학동)\n      경기도 오산시 청학동 16-6\n      37.154587\n      127.063455\n    \n  \n\n\n\n\n\n기존 pet_num_si 데이터프레임과 위경도가 있는 gov 데이터프레임을 left join\njoin 기준 열의 데이터를 맞추기 위해 시군명 뒤에 ‘청’ 단어를 붙임\n\n\n\nCode\npet_num_si['관공서'] = pet_num_si['시군명'] + '청'\n\n\n\n기존 데이터프레임 기준으로 left join 후 컬럼명 확인\n\n\n\nCode\ntmp = pet_num_si.merge(gov, how='left', left_on='관공서', right_on='구분명')\ntmp.columns\n\n\nIndex(['시군명_x', '등록동물수(마리)', '등록소유자수', '관공서', '집계일자', '시군명_y', '구분명', '전화번호안내',\n       '소재지우편번호', '소재지도로명주소', '소재지지번주소', 'WGS84위도', 'WGS84경도'],\n      dtype='object')\n\n\n\n필요한 컬럼만 뽑아서 기존 데이터프레임을 덮어씀\n\n\n\nCode\npet_num_si = tmp.loc[:, ['시군명_x', '등록동물수(마리)', '등록소유자수', '관공서', 'WGS84위도', 'WGS84경도']]\npet_num_si.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명_x\n      등록동물수(마리)\n      등록소유자수\n      관공서\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n    \n  \n\n\n\n\n\n다시 결측치 확인 -> 위, 경도에 결측치 존재\n\n\n\nCode\npet_num_si.isna().sum()\n\n\n시군명_x        0\n등록동물수(마리)    0\n등록소유자수       0\n관공서          0\nWGS84위도      3\nWGS84경도      3\ndtype: int64\n\n\n\n위도, 경도가 없는 행만 출력\n\n\n\nCode\npet_num_si[ (pet_num_si['WGS84위도'].isna()) | (pet_num_si['WGS84경도'].isna()) ]\n\n\n\n\n\n\n  \n    \n      \n      시군명_x\n      등록동물수(마리)\n      등록소유자수\n      관공서\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      8\n      남양주시\n      42957\n      31542.0\n      남양주시청\n      NaN\n      NaN\n    \n    \n      10\n      부천시\n      113892\n      86532.0\n      부천시청\n      NaN\n      NaN\n    \n    \n      30\n      화성시\n      48264\n      35496.0\n      화성시청\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n다올 주소변환 사이트에서 위경도를 가져와 입력함\n\n\n\nCode\npet_num_si.iloc[8, [4, 5]] = 37.6366920245, 127.2174958647  # 남양주1청사\npet_num_si.iloc[10, [4, 5]] = 37.5029019, 126.765889 # 부천시청\npet_num_si.iloc[30, [4, 5]] = 37.1994150, 126.831523  # 화성시청\n\n\n\n\nCode\npet_num_si = pet_num_si.rename(columns = {'시군명_x':'시군명', })\npet_num_si\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수(마리)\n      등록소유자수\n      관공서\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      0\n      가평군\n      4017.0\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n    \n    \n      1\n      고양시\n      73477.0\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n    \n    \n      2\n      과천시\n      2974.0\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n    \n    \n      3\n      광명시\n      20161.0\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n    \n    \n      4\n      광주시\n      29042.0\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n    \n    \n      5\n      구리시\n      12381.0\n      9279.0\n      구리시청\n      37.594412\n      127.130783\n    \n    \n      6\n      군포시\n      15480.0\n      12226.0\n      군포시청\n      37.361254\n      126.936150\n    \n    \n      7\n      김포시\n      7912.0\n      6388.0\n      김포시청\n      37.615224\n      126.715705\n    \n    \n      8\n      남양주시\n      42957.0\n      31542.0\n      남양주시청\n      NaN\n      NaN\n    \n    \n      9\n      동두천시\n      6998.0\n      4827.0\n      동두천시청\n      37.903411\n      127.061541\n    \n    \n      10\n      부천시\n      113892.0\n      86532.0\n      부천시청\n      NaN\n      NaN\n    \n    \n      11\n      성남시\n      55728.0\n      43137.0\n      성남시청\n      37.420177\n      127.126282\n    \n    \n      12\n      수원시\n      65330.0\n      50256.0\n      수원시청\n      37.263446\n      127.028727\n    \n    \n      13\n      시흥시\n      30539.0\n      22994.0\n      시흥시청\n      37.380422\n      126.804063\n    \n    \n      14\n      안산시\n      86158.0\n      64634.0\n      안산시청\n      37.322131\n      126.830243\n    \n    \n      15\n      안성시\n      19950.0\n      13610.0\n      안성시청\n      37.008015\n      127.280487\n    \n    \n      16\n      안양시\n      35644.0\n      28091.0\n      안양시청\n      37.395206\n      126.958288\n    \n    \n      17\n      양주시\n      11848.0\n      8581.0\n      양주시청\n      37.785349\n      127.044919\n    \n    \n      18\n      양평군\n      13291.0\n      7308.0\n      양평군청\n      37.491741\n      127.487682\n    \n    \n      19\n      여주시\n      5252.0\n      3365.0\n      여주시청\n      37.298214\n      127.636623\n    \n    \n      20\n      연천군\n      2020.0\n      1384.0\n      연천군청\n      38.096517\n      127.075228\n    \n    \n      21\n      오산시\n      14471.0\n      11004.0\n      오산시청\n      37.149035\n      127.077665\n    \n    \n      22\n      용인시\n      50227.0\n      38348.0\n      용인시청\n      37.240867\n      127.177969\n    \n    \n      23\n      의왕시\n      6590.0\n      5082.0\n      의왕시청\n      37.345319\n      126.967989\n    \n    \n      24\n      의정부시\n      58997.0\n      0.0\n      의정부시청\n      37.738063\n      127.033840\n    \n    \n      25\n      이천시\n      13147.0\n      9180.0\n      이천시청\n      37.272374\n      127.435044\n    \n    \n      26\n      파주시\n      24057.0\n      16584.0\n      파주시청\n      37.760041\n      126.779877\n    \n    \n      27\n      평택시\n      60468.0\n      43718.0\n      평택시청\n      36.992300\n      127.112527\n    \n    \n      28\n      포천시\n      11168.0\n      5719.0\n      포천시청\n      37.894701\n      127.200341\n    \n    \n      29\n      하남시\n      17634.0\n      13085.0\n      하남시청\n      37.539057\n      127.215530\n    \n    \n      30\n      화성시\n      48264.0\n      35496.0\n      화성시청\n      NaN\n      NaN\n    \n    \n      남양주시\n      NaN\n      NaN\n      NaN\n      NaN\n      37.636692\n      127.217496\n    \n    \n      부천시\n      NaN\n      NaN\n      NaN\n      NaN\n      37.502902\n      126.765889\n    \n    \n      화성시\n      NaN\n      NaN\n      NaN\n      NaN\n      37.199415\n      126.831523\n    \n  \n\n\n\n\n\n\nCode\ndel pet_num_si[['남양주시', '부천시', '화성시'] axis=0]\n\n\nSyntaxError: invalid syntax (3234565599.py, line 1)"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#인구-정보-추가",
    "href": "project/2210_pet_choropleth.html#인구-정보-추가",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "인구 정보 추가",
    "text": "인구 정보 추가\n\n인구가 많은 지역에 등록반려동물수도 많기 때문에 인구수로 나눠 1인당 마리수를 구함\n최신 인구현황인 2022년 9월 데이터만 남김\n데이터를 보니 중복값이 있고 시군구까지 표시된 행이 하위 읍면동의 인구를 포함하고 있음\n따라서 먼저 중복값을 삭제하고\n시군구까지 표시된 행만 추려내야 함\n\n\n\nCode\npopu = pd.read_csv('data/주민등록인구집계현황.csv')\npopu.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 107486 entries, 0 to 107485\nData columns (total 40 columns):\n #   Column       Non-Null Count   Dtype \n---  ------       --------------   ----- \n 0   연도           107486 non-null  int64 \n 1   월            107486 non-null  int64 \n 2   행정구역구분명      107486 non-null  object\n 3   행정구역명        107486 non-null  object\n 4   총 인구수        107486 non-null  int64 \n 5   0~9세         107486 non-null  int64 \n 6   10~19세       107486 non-null  int64 \n 7   20~29세       107486 non-null  int64 \n 8   30~39세       107486 non-null  int64 \n 9   40~49세       107486 non-null  int64 \n 10  50~59세       107486 non-null  int64 \n 11  60~69세       107486 non-null  int64 \n 12  70~79세       107486 non-null  int64 \n 13  80~89세       107486 non-null  int64 \n 14  90~99세       107486 non-null  int64 \n 15  100세 이상      107486 non-null  int64 \n 16  총 인구수 (남)    107486 non-null  int64 \n 17  0~9세 (남)     107486 non-null  int64 \n 18  10~19세 (남)   107486 non-null  int64 \n 19  20~29세 (남)   107486 non-null  int64 \n 20  30~39세 (남)   107486 non-null  int64 \n 21  40~49세 (남)   107486 non-null  int64 \n 22  50~59세 (남)   107486 non-null  int64 \n 23  60~69세 (남)   107486 non-null  int64 \n 24  70~79세 (남)   107486 non-null  int64 \n 25  80~89세 (남)   107486 non-null  int64 \n 26  90~99세 (남)   107486 non-null  int64 \n 27  100세 이상 (남)  107486 non-null  int64 \n 28  총 인구수 (여)    107486 non-null  int64 \n 29  0~9세 (여)     107486 non-null  int64 \n 30  10~19세 (여)   107486 non-null  int64 \n 31  20~29세 (여)   107486 non-null  int64 \n 32  30~39세 (여)   107486 non-null  int64 \n 33  40~49세 (여)   107486 non-null  int64 \n 34  50~59세 (여)   107486 non-null  int64 \n 35  60~69세 (여)   107486 non-null  int64 \n 36  70~79세 (여)   107486 non-null  int64 \n 37  80~89세 (여)   107486 non-null  int64 \n 38  90~99세 (여)   107486 non-null  int64 \n 39  100세 이상 (여)  107486 non-null  int64 \ndtypes: int64(38), object(2)\nmemory usage: 32.8+ MB\n\n\n\n최신 데이터인 2022년 9월의 총 인구수만 남김\n\n\n\nCode\npopu = popu[(popu['연도'] == 2022) & (popu['월'] == 9)][['행정구역명', '총 인구수']]\npopu.head(5)\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      총 인구수\n    \n  \n  \n    \n      0\n      경기도\n      13574353\n    \n    \n      1\n      경기도 가평군\n      62168\n    \n    \n      2\n      경기도 가평군 가평읍\n      19532\n    \n    \n      3\n      경기도 가평군 북면\n      3821\n    \n    \n      4\n      경기도 가평군 상면\n      5688\n    \n  \n\n\n\n\n\n첫 번째 행 삭제. 경기도 전체 인구이기 때문에\n\n\n\nCode\npopu = popu.drop(0, axis=0)\npopu.head(3)\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      총 인구수\n    \n  \n  \n    \n      1\n      경기도 가평군\n      62168\n    \n    \n      2\n      경기도 가평군 가평읍\n      19532\n    \n    \n      3\n      경기도 가평군 북면\n      3821\n    \n  \n\n\n\n\n\n총 인구수가 0인 행 삭제\n\n\nCode\nprint('총 인구수가 0인 행 개수: ', len(popu[popu['총 인구수'] == 0]))\n\n\n총 인구수가 0인 행 개수:  5\n\n\n\n\nCode\nmask = popu['총 인구수'] == 0\npopu = popu[~mask]\nprint('총 인구수가 0인 행 개수: ', len(popu[popu['총 인구수'] == 0]))\n\n\n총 인구수가 0인 행 개수:  0\n\n\n\n\n중복값 여부 확인\n\n\nCode\npopu['행정구역명'].duplicated().sum()\n\n\n0\n\n\n\n\n시군구 문자열을 공백으로 분리 <- 취소\n\n문자열을 공백으로 분리한 후 별도의 데이터프레임으로 반환\n행정구역명에서 시군명만 빼내기 위해 공백을 기준으로 분리한 후 별도의 데이터프레임으로 만듦\n0번 열에는 경기도, 1번 열에는 시군명, 2번 열에는 읍면동\n1번 열만 내용 확인\n\n프로젝트가 끝나고 다시 보다 잘못 처리한 걸 발견함. 시군구 데이터가 아래 읍면동 데이터를 포함하고 있는 것을 간과하고 모두 합함 즉, 인구가 2배가 됨\n\n\nCode\n# tmp = popu['행정구역명'].str.split(pat=' ', expand=True)\n# tmp[1].unique() , len(tmp[1].unique())\n\n\n\n\n행정구역명이 3단어로 되어 있는 행(읍면동까지 있는 것)에 false를 부여하여 제외함\n\napply 함수로 ‘행정구역명’ 열의 문자열을 split으로 분리해 반환된 리스트 요소 개수가 2인 것만 True 부여\nboolean indexing으로 시군까지의 인구통계만 남김\n\n\n\nCode\npopu = popu[popu['행정구역명'].apply(lambda x: len(x.split())) == 2]\npopu\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      총 인구수\n    \n  \n  \n    \n      1\n      경기도 가평군\n      62168\n    \n    \n      8\n      경기도 고양시\n      1079277\n    \n    \n      56\n      경기도 과천시\n      78301\n    \n    \n      63\n      경기도 광명시\n      290756\n    \n    \n      83\n      경기도 광주시\n      388893\n    \n    \n      97\n      경기도 구리시\n      191011\n    \n    \n      106\n      경기도 군포시\n      267493\n    \n    \n      119\n      경기도 김포시\n      485609\n    \n    \n      134\n      경기도 남양주시\n      734642\n    \n    \n      153\n      경기도 동두천시\n      93260\n    \n    \n      162\n      경기도 부천시\n      801503\n    \n    \n      173\n      경기도 성남시\n      928267\n    \n    \n      228\n      경기도 수원시\n      1188234\n    \n    \n      277\n      경기도 시흥시\n      512721\n    \n    \n      297\n      경기도 안산시\n      650708\n    \n    \n      325\n      경기도 안성시\n      189772\n    \n    \n      341\n      경기도 안양시\n      549724\n    \n    \n      376\n      경기도 양주시\n      236142\n    \n    \n      388\n      경기도 양평군\n      121789\n    \n    \n      401\n      경기도 여주시\n      112410\n    \n    \n      414\n      경기도 연천군\n      42731\n    \n    \n      425\n      경기도 오산시\n      230028\n    \n    \n      432\n      경기도 용인시\n      1075877\n    \n    \n      474\n      경기도 의왕시\n      162137\n    \n    \n      481\n      경기도 의정부시\n      464358\n    \n    \n      496\n      경기도 이천시\n      222722\n    \n    \n      511\n      경기도 파주시\n      486515\n    \n    \n      529\n      경기도 평택시\n      569369\n    \n    \n      555\n      경기도 포천시\n      148469\n    \n    \n      571\n      경기도 하남시\n      323558\n    \n    \n      586\n      경기도 화성시\n      892038\n    \n  \n\n\n\n\n\n행정구역명 문자열을 빈 칸 기준으로 나눠 두 번째 값만 다시 행정구역명으로 입력\n\n\n\nCode\npopu['행정구역명'] = popu['행정구역명'].apply(lambda x: x.split()[1])\npopu.head()\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      총 인구수\n    \n  \n  \n    \n      1\n      가평군\n      62168\n    \n    \n      8\n      고양시\n      1079277\n    \n    \n      56\n      과천시\n      78301\n    \n    \n      63\n      광명시\n      290756\n    \n    \n      83\n      광주시\n      388893\n    \n  \n\n\n\n\n\n\n기존 데이터프레임과 inner join\n\n기존 데이터프레임에 인구 데이터프레임 병합\n\n\n\nCode\ndf = pet_num_si.merge(popu, how='inner', left_on='시군명', right_on='행정구역명')\ndf.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      행정구역명\n      총 인구수\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n      가평군\n      62168\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n      고양시\n      1079277\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n      과천시\n      78301\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n      광명시\n      290756\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n      광주시\n      388893\n    \n  \n\n\n\n\n\n중복 열 삭제\n\n\n\nCode\ndf = df.drop('행정구역명', axis=1)\ndf.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      총 인구수\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n      62168\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n      1079277\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n      78301\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n      290756\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n      388893\n    \n  \n\n\n\n\n\n\n인구 당 등록 반려동물수\n\n\nCode\n( df['등록동물수'] / df['총 인구수'] )\n\n\n0     0.064615\n1     0.068080\n2     0.037982\n3     0.069340\n4     0.074679\n5     0.064818\n6     0.057871\n7     0.016293\n8     0.058473\n9     0.075038\n10    0.142098\n11    0.060034\n12    0.054981\n13    0.059563\n14    0.132407\n15    0.105126\n16    0.064840\n17    0.050173\n18    0.109131\n19    0.046722\n20    0.047272\n21    0.062910\n22    0.046685\n23    0.040645\n24    0.127051\n25    0.059029\n26    0.049448\n27    0.106202\n28    0.075221\n29    0.054500\n30    0.054105\ndtype: float64\n\n\n\n숫자 크기가 너무 작아 인구 1000명 당 마리수 산출\n가장 숫자가 많은 5개 시군만 출력 df.nlargest(개수, ‘열이름’)\n\n\n\nCode\ndf['1000명당마리수'] = np.round( (df['등록동물수'] / df['총 인구수']) * 1000, 2)\ndf.nlargest(5, '1000명당마리수')\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      총 인구수\n      1000명당마리수\n    \n  \n  \n    \n      10\n      부천시\n      113892\n      86532.0\n      부천시청\n      37.502902\n      126.765889\n      801503\n      142.10\n    \n    \n      14\n      안산시\n      86158\n      64634.0\n      안산시청\n      37.322131\n      126.830243\n      650708\n      132.41\n    \n    \n      24\n      의정부시\n      58997\n      0.0\n      의정부시청\n      37.738063\n      127.033840\n      464358\n      127.05\n    \n    \n      18\n      양평군\n      13291\n      7308.0\n      양평군청\n      37.491741\n      127.487682\n      121789\n      109.13\n    \n    \n      27\n      평택시\n      60468\n      43718.0\n      평택시청\n      36.992300\n      127.112527\n      569369\n      106.20\n    \n  \n\n\n\n\n\n소유자 당 마리 수\n의정부시는 소유자 정보가 없음\n\n\n\nCode\ndf['1소유자당마리수'] = np.round(df['등록동물수'] / df['등록소유자수'], 2)\ndf.nlargest(5, '1소유자당마리수')\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      총 인구수\n      1000명당마리수\n      1소유자당마리수\n    \n  \n  \n    \n      24\n      의정부시\n      58997\n      0.0\n      의정부시청\n      37.738063\n      127.033840\n      464358\n      127.05\n      inf\n    \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n      62168\n      64.62\n      2.00\n    \n    \n      28\n      포천시\n      11168\n      5719.0\n      포천시청\n      37.894701\n      127.200341\n      148469\n      75.22\n      1.95\n    \n    \n      18\n      양평군\n      13291\n      7308.0\n      양평군청\n      37.491741\n      127.487682\n      121789\n      109.13\n      1.82\n    \n    \n      19\n      여주시\n      5252\n      3365.0\n      여주시청\n      37.298214\n      127.636623\n      112410\n      46.72\n      1.56\n    \n  \n\n\n\n\n\n\n가로 막대그래프로 시각화\n\nsubplots 그래프 그리기\n\n\n\nCode\npetall_graph = df.sort_values('등록동물수')\npet_graph = df.sort_values('1000명당마리수')\n\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(20,10))\n\nax[0].barh(petall_graph['시군명'], petall_graph['등록동물수'])\nax[0].set_title('등록 반려동물수')\n\nax[1].barh(pet_graph['시군명'], pet_graph['1000명당마리수'])\nax[1].set_title('1000명 당 마리수')\n\nplt.show()"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#코로플레스-지도choropleth-map-만들기",
    "href": "project/2210_pet_choropleth.html#코로플레스-지도choropleth-map-만들기",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "코로플레스 지도(Choropleth map) 만들기",
    "text": "코로플레스 지도(Choropleth map) 만들기\n\n데이터프레임의 ‘시군명’과 json 파일의 ’sggnm’ 키의 값이 같아야 지도에 표시됨. 그렇지 않으면 까맣게 나옴\n\n\n경기도 시군별 등록된 반려동물수\n\n\nCode\nm = folium.Map(\n    location = [37.528043, 126.980238],\n    zoom_start = 8)\n\nlat = list(df['위도'])\nlong = list(df['경도'])\nname = list(df['등록동물수'])\nsi = list(df['시군명'])\n\nfor i in range(len(lat)):\n    folium.Marker(\n            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>반려동물수: {str(name[i])}',\n            icon=folium.Icon(color='red')\n            ).add_to(m)\n\n    \ngeo_data = json.load(open('data/kyeong.geojson'))\n\nfolium.Choropleth(\n    geo_data = geo_data,\n    data = df,\n    columns= ['시군명', '등록동물수'],\n    key_on = 'feature.properties.sggnm',\n    fill_color = 'Reds',\n    fill_opacity = 0.7,\n    line_opacity = 0.4,\n    legend_name = '시군별 등록 반려동물수(마리))'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n경기도 시군별 인구 1000명 당 등록된 반려동물수\n\n\nCode\nm = folium.Map(\n    location = [37.528043, 126.980238],\n    zoom_start = 8)\n\nlat = list(df['위도'])\nlong = list(df['경도'])\nname = list(df['등록동물수'])\nsi = list(df['시군명'])\n\nfor i in range(len(lat)):\n    folium.Marker(\n            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>1000명 당 반려동물수: {str(name[i])}',\n            icon=folium.Icon(color='red')\n            ).add_to(m)\n\n    \ngeo_data = json.load(open('data/kyeong.geojson'))\n\nfolium.Choropleth(\n    geo_data = geo_data,\n    data = df,\n    columns= ['시군명', '1000명당마리수'],\n    key_on = 'feature.properties.sggnm',\n    fill_color = 'Reds',\n    fill_opacity = 0.7,\n    line_opacity = 0.4,\n    legend_name = '인구 1000명 당 등록 반려동물 수(마리))'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#시군별-데이터-표시-추가",
    "href": "project/2210_pet_choropleth.html#시군별-데이터-표시-추가",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "시군별 데이터 표시 추가",
    "text": "시군별 데이터 표시 추가\n\n등록반려동물수, 인구수, 1000명당마리수 표지 추가\n\n\n\nCode\nm = folium.Map(\n    location = [37.528043, 126.980238],\n    zoom_start = 8)\n\nlat = list(pet_per_man['WGS84위도'])\nlong = list(pet_per_man['WGS84경도'])\nname = list(pet_per_man['등록동물수(마리)'])\nsi = list(pet_per_man['시군명'])\n\nfor i in range(len(lat)):\n    folium.Marker(\n            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>1000명 당 반려동물수: {str(name[i])}',\n            icon=folium.Icon(color='red')\n            ).add_to(m)\n\n    \ngeo_data = json.load(open('data/kyeong.geojson'))\n\nfolium.Choropleth(\n    geo_data = geo_data,\n    data = pet_per_man,\n    columns= ['시군명', '1000명당마리수'],\n    key_on = 'feature.properties.sggnm',\n    fill_color = 'Reds',\n    fill_opacity = 0.7,\n    line_opacity = 0.4,\n    legend_name = '인구 1000명 당 등록 반려동물 수(마리))'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#시군별-평균-연령-데이터-추가",
    "href": "project/2210_pet_choropleth.html#시군별-평균-연령-데이터-추가",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "시군별 평균 연령 데이터 추가",
    "text": "시군별 평균 연령 데이터 추가\n\n\nCode\nage = pd.read_csv('data/평균연령집계현황.csv')\nage.head()\n\n\n\n\n\n\n  \n    \n      \n      연도\n      월\n      행정구역구분명\n      행정구역명\n      남자 평균연령\n      여자 평균연령\n      평균연령\n    \n  \n  \n    \n      0\n      2022\n      9\n      도\n      경기도\n      41.4\n      43.2\n      42.3\n    \n    \n      1\n      2022\n      9\n      시군\n      경기도 가평군\n      49.1\n      51.6\n      50.3\n    \n    \n      2\n      2022\n      9\n      읍면동\n      경기도 가평군 가평읍\n      46.9\n      49.7\n      48.3\n    \n    \n      3\n      2022\n      9\n      읍면동\n      경기도 가평군 북면\n      55.0\n      57.9\n      56.4\n    \n    \n      4\n      2022\n      9\n      읍면동\n      경기도 가평군 상면\n      52.8\n      56.9\n      54.7\n    \n  \n\n\n\n\n\n결측치 확인\n\n\n\nCode\nage.isna().sum()\n\n\n연도         0\n월          0\n행정구역구분명    0\n행정구역명      0\n남자 평균연령    0\n여자 평균연령    0\n평균연령       0\ndtype: int64\n\n\n\n2022년 9월의 일부 컬럼만 선택\n\n\n\nCode\nage = age[(age['연도'] == 2022) & (age['월'] == 9)][['행정구역명', '평균연령', '남자 평균연령', '여자 평균연령']]\nage.head(5)\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      평균연령\n      남자 평균연령\n      여자 평균연령\n    \n  \n  \n    \n      0\n      경기도\n      42.3\n      41.4\n      43.2\n    \n    \n      1\n      경기도 가평군\n      50.3\n      49.1\n      51.6\n    \n    \n      2\n      경기도 가평군 가평읍\n      48.3\n      46.9\n      49.7\n    \n    \n      3\n      경기도 가평군 북면\n      56.4\n      55.0\n      57.9\n    \n    \n      4\n      경기도 가평군 상면\n      54.7\n      52.8\n      56.9\n    \n  \n\n\n\n\n\n시군구까지의 행정구역명만 남기고 모두 삭제\n\n\n\nCode\nage = age[age['행정구역명'].apply(lambda x: len(x.split())) == 2]\nage.head()\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      평균연령\n      남자 평균연령\n      여자 평균연령\n    \n  \n  \n    \n      1\n      경기도 가평군\n      50.3\n      49.1\n      51.6\n    \n    \n      8\n      경기도 고양시\n      42.9\n      42.0\n      43.9\n    \n    \n      56\n      경기도 과천시\n      41.5\n      40.4\n      42.5\n    \n    \n      63\n      경기도 광명시\n      42.7\n      41.6\n      43.8\n    \n    \n      83\n      경기도 광주시\n      42.6\n      42.0\n      43.3\n    \n  \n\n\n\n\n\n행정구역명에서 경기도 삭제\n\n\n\nCode\nage['행정구역명'] = age['행정구역명'].apply(lambda x: x.split()[1])\nage.tail()\n\n\n\n\n\n\n  \n    \n      \n      행정구역명\n      평균연령\n      남자 평균연령\n      여자 평균연령\n    \n  \n  \n    \n      509\n      파주시\n      41.7\n      40.8\n      42.7\n    \n    \n      527\n      평택시\n      40.9\n      40.0\n      41.9\n    \n    \n      553\n      포천시\n      47.5\n      46.4\n      48.8\n    \n    \n      568\n      하남시\n      40.7\n      40.2\n      41.2\n    \n    \n      583\n      화성시\n      38.1\n      37.7\n      38.5\n    \n  \n\n\n\n\n\n기존 데이터프레임과 inner join\n\n\nCode\npet_man = df.merge(age, how='inner', left_on='시군명', right_on='행정구역명')\npet_man.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      총 인구수\n      1000명당마리수\n      1소유자당마리수\n      행정구역명\n      평균연령\n      남자 평균연령\n      여자 평균연령\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n      62168\n      64.62\n      2.00\n      가평군\n      50.3\n      49.1\n      51.6\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n      1079277\n      68.08\n      1.35\n      고양시\n      42.9\n      42.0\n      43.9\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n      78301\n      37.98\n      1.28\n      과천시\n      41.5\n      40.4\n      42.5\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n      290756\n      69.34\n      1.28\n      광명시\n      42.7\n      41.6\n      43.8\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n      388893\n      74.68\n      1.50\n      광주시\n      42.6\n      42.0\n      43.3\n    \n  \n\n\n\n\n\n행정구역명 열 삭제 후 ’시군명’을 인덱스로 설정\n\n\n\nCode\npet_man = pet_man.drop('행정구역명', axis=1)\npet_man = pet_man.set_index('시군명')\npet_man.tail()\n\n\n\n\n\n\n  \n    \n      \n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      총 인구수\n      1000명당마리수\n      1소유자당마리수\n      평균연령\n      남자 평균연령\n      여자 평균연령\n    \n    \n      시군명\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      파주시\n      24057\n      16584.0\n      파주시청\n      37.760041\n      126.779877\n      486515\n      49.45\n      1.45\n      41.7\n      40.8\n      42.7\n    \n    \n      평택시\n      60468\n      43718.0\n      평택시청\n      36.992300\n      127.112527\n      569369\n      106.20\n      1.38\n      40.9\n      40.0\n      41.9\n    \n    \n      포천시\n      11168\n      5719.0\n      포천시청\n      37.894701\n      127.200341\n      148469\n      75.22\n      1.95\n      47.5\n      46.4\n      48.8\n    \n    \n      하남시\n      17634\n      13085.0\n      하남시청\n      37.539057\n      127.215530\n      323558\n      54.50\n      1.35\n      40.7\n      40.2\n      41.2\n    \n    \n      화성시\n      48264\n      35496.0\n      화성시청\n      37.199415\n      126.831523\n      892038\n      54.11\n      1.36\n      38.1\n      37.7\n      38.5\n    \n  \n\n\n\n\n\n\n상관관계\n\n상관관계를 보니 흥미로운 점이 몇 가지 보인다.\n등록된 반려동물수가 경도와 40% 역의 상관관계를 보인다. 동쪽보다는 서쪽에서 많이 키운다는 건가? 인구가 서쪽에 몰려있으니 그럴 수도 있겠다.\n평균 연령과 33% 역의 상관관계를 보인다. 나이가 어릴수록 동물을 등록해서 키우는 경향이 있다고 볼 수도 있겠다.\n남녀 성별 차이는 없다\n\n\n\nCode\npet_man.corr()\n\n\n\n\n\n\n  \n    \n      \n      등록동물수\n      등록소유자수\n      위도\n      경도\n      총 인구수\n      1000명당마리수\n      1소유자당마리수\n      평균연령\n      남자 평균연령\n      여자 평균연령\n    \n  \n  \n    \n      등록동물수\n      1.000000\n      0.929165\n      -0.258325\n      -0.400649\n      0.801469\n      0.603257\n      -0.320633\n      -0.337281\n      -0.335284\n      -0.336903\n    \n    \n      등록소유자수\n      0.929165\n      1.000000\n      -0.326905\n      -0.404202\n      0.802641\n      0.444666\n      -0.352341\n      -0.355903\n      -0.351853\n      -0.354996\n    \n    \n      위도\n      -0.258325\n      -0.326905\n      1.000000\n      -0.054979\n      -0.287853\n      -0.132644\n      0.376955\n      0.531682\n      0.521886\n      0.535785\n    \n    \n      경도\n      -0.400649\n      -0.404202\n      -0.054979\n      1.000000\n      -0.406309\n      0.010427\n      0.624281\n      0.573513\n      0.594505\n      0.554759\n    \n    \n      총 인구수\n      0.801469\n      0.802641\n      -0.287853\n      -0.406309\n      1.000000\n      0.084719\n      -0.428738\n      -0.529098\n      -0.522676\n      -0.530333\n    \n    \n      1000명당마리수\n      0.603257\n      0.444666\n      -0.132644\n      0.010427\n      0.084719\n      1.000000\n      0.197501\n      0.184070\n      0.188544\n      0.180885\n    \n    \n      1소유자당마리수\n      -0.320633\n      -0.352341\n      0.376955\n      0.624281\n      -0.428738\n      0.197501\n      1.000000\n      0.756414\n      0.785313\n      0.735683\n    \n    \n      평균연령\n      -0.337281\n      -0.355903\n      0.531682\n      0.573513\n      -0.529098\n      0.184070\n      0.756414\n      1.000000\n      0.996922\n      0.997771\n    \n    \n      남자 평균연령\n      -0.335284\n      -0.351853\n      0.521886\n      0.594505\n      -0.522676\n      0.188544\n      0.785313\n      0.996922\n      1.000000\n      0.989792\n    \n    \n      여자 평균연령\n      -0.336903\n      -0.354996\n      0.535785\n      0.554759\n      -0.530333\n      0.180885\n      0.735683\n      0.997771\n      0.989792\n      1.000000"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#차후-과제",
    "href": "project/2210_pet_choropleth.html#차후-과제",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "차후 과제",
    "text": "차후 과제\n\n전국 데이터로 작업을 하면 더 재미있는 결과를 볼 수 있을 것 같다.\n펫카페 또는 반려동물 동반 관광지 정보를 지도에 표시하면 반려동물을 키우는 사람에게도 사업을 하려는 사람에게도 도움이 될 것 같다.\n부천, 안산, 의정부가 타 시군에 비해 등록된 반려동물이 많은 이유가 뭘까? 유기동물 보호소가 있나?"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#그래프-한글-글꼴-깨짐-방지-코드",
    "href": "project/2210_pet_choropleth.html#그래프-한글-글꼴-깨짐-방지-코드",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "그래프 한글 글꼴 깨짐 방지 코드",
    "text": "그래프 한글 글꼴 깨짐 방지 코드\n\n\nCode\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 한글폰트 처리 \nplt.rcParams['font.size'] = 11.0\nplt.rcParams['font.family'] = ['Malgun Gothic', 'AppleGothic']\n\n# 그래프에서 마이너스 폰트 깨지는 문제에 대한 대처\nplt.rcParams['axes.unicode_minus'] = False"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#반려동물-등록현황-데이터-불러오고-확인하기",
    "href": "project/2210_pet_choropleth.html#반려동물-등록현황-데이터-불러오고-확인하기",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "반려동물 등록현황 데이터 불러오고 확인하기",
    "text": "반려동물 등록현황 데이터 불러오고 확인하기\n\n\nCode\npet = pd.read_csv('data/반려동물등록현황.csv')\n\nprint('pet data shape: ', pet.shape)\n\n\npet data shape:  (729, 14)\n\n\n\n\nCode\npet.head(2)\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      (등록주체)시군구등록\n      (등록주체)대행업체등록\n      (등록주체)기타\n      (RFID종류)내장형\n      (RFID종류)외장형\n      (RFID종류)인식표\n      등록품종수\n      등록소유자수\n      동물소유자당등록동물수\n      해당동의등록대행업체수\n      데이터기준일자\n    \n  \n  \n    \n      0\n      가평군\n      가평읍\n      941\n      NaN\n      NaN\n      NaN\n      596\n      294\n      51\n      NaN\n      85.0\n      NaN\n      3.0\n      2022-06-14\n    \n    \n      1\n      가평군\n      북면\n      289\n      NaN\n      NaN\n      NaN\n      176\n      93\n      20\n      NaN\n      185.0\n      NaN\n      0.0\n      2022-06-14\n    \n  \n\n\n\n\n\n\nCode\nprint('시군 개수: ', len(pet['시군명'].unique()))\n\n\n시군 개수:  31\n\n\n\n\nCode\npet['데이터기준일자'] = pd.to_datetime(pet['데이터기준일자'])\nprint('데이터 수집 기간: ', pet['데이터기준일자'].dt.year.unique())\n\n\n데이터 수집 기간:  [2022 2020 2021]\n\n\n\n\nCode\n# 2021년 이후 데이터만 필터링\n\npet = pet[pet['데이터기준일자'].dt.year >= 2021]\npet.info()\n\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 714 entries, 0 to 728\nData columns (total 14 columns):\n #   Column        Non-Null Count  Dtype         \n---  ------        --------------  -----         \n 0   시군명           714 non-null    object        \n 1   읍면동명          712 non-null    object        \n 2   등록동물수(마리)     714 non-null    int64         \n 3   (등록주체)시군구등록   708 non-null    float64       \n 4   (등록주체)대행업체등록  708 non-null    float64       \n 5   (등록주체)기타      697 non-null    float64       \n 6   (RFID종류)내장형   714 non-null    int64         \n 7   (RFID종류)외장형   714 non-null    int64         \n 8   (RFID종류)인식표   714 non-null    int64         \n 9   등록품종수         708 non-null    float64       \n 10  등록소유자수        713 non-null    float64       \n 11  동물소유자당등록동물수   707 non-null    float64       \n 12  해당동의등록대행업체수   405 non-null    float64       \n 13  데이터기준일자       714 non-null    datetime64[ns]\ndtypes: datetime64[ns](1), float64(7), int64(4), object(2)\nmemory usage: 83.7+ KB\n\n\n\n\nCode\n# 2021년 이후에 미등록 시군이 있어 전체 자료를 모두 사용\nlen(pet['시군명'].unique())\n\n\n30\n\n\n\n\nCode\npet = pd.read_csv('data/반려동물등록현황.csv', encoding='cp949')"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#반려동물-등록현황-데이터-불러오고-내용-확인하기",
    "href": "project/2210_pet_choropleth.html#반려동물-등록현황-데이터-불러오고-내용-확인하기",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "반려동물 등록현황 데이터 불러오고 내용 확인하기",
    "text": "반려동물 등록현황 데이터 불러오고 내용 확인하기\n\n\nCode\npet = pd.read_csv('data/반려동물등록현황.csv')\n\nprint('pet data shape: ', pet.shape)\n\n\npet data shape:  (729, 14)\n\n\n\n\nCode\npet.head(2)\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      (등록주체)시군구등록\n      (등록주체)대행업체등록\n      (등록주체)기타\n      (RFID종류)내장형\n      (RFID종류)외장형\n      (RFID종류)인식표\n      등록품종수\n      등록소유자수\n      동물소유자당등록동물수\n      해당동의등록대행업체수\n      데이터기준일자\n    \n  \n  \n    \n      0\n      가평군\n      가평읍\n      941\n      NaN\n      NaN\n      NaN\n      596\n      294\n      51\n      NaN\n      85.0\n      NaN\n      3.0\n      2022-06-14\n    \n    \n      1\n      가평군\n      북면\n      289\n      NaN\n      NaN\n      NaN\n      176\n      93\n      20\n      NaN\n      185.0\n      NaN\n      0.0\n      2022-06-14\n    \n  \n\n\n\n\n\n\nCode\npet['데이터기준일자'] = pd.to_datetime(pet['데이터기준일자'])\nprint('데이터 수집 기간: ', pet['데이터기준일자'].dt.year.unique())\n\n\n데이터 수집 기간:  [2022 2020 2021]\n\n\n\n필요한 컬럼만 선택\n\n\nCode\nprint('전체 컬럼명: ', pet.columns)\n\n\n전체 컬럼명:  Index(['시군명', '읍면동명', '등록동물수(마리)', '(등록주체)시군구등록', '(등록주체)대행업체등록', '(등록주체)기타',\n       '(RFID종류)내장형', '(RFID종류)외장형', '(RFID종류)인식표', '등록품종수', '등록소유자수',\n       '동물소유자당등록동물수', '해당동의등록대행업체수', '데이터기준일자'],\n      dtype='object')\n\n\n\n\nCode\nprint('사용할 컬럼만 골라 데이터프레임에 덮어 씌움')\npet = pet.loc[ :, ['시군명', '읍면동명', '등록동물수(마리)', '등록소유자수']]\npet.head()\n\n\n사용할 컬럼만 골라 데이터프레임에 덮어 씌움\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      0\n      가평군\n      가평읍\n      941\n      85.0\n    \n    \n      1\n      가평군\n      북면\n      289\n      185.0\n    \n    \n      2\n      가평군\n      상면\n      399\n      243.0\n    \n    \n      3\n      가평군\n      설악면\n      1111\n      625.0\n    \n    \n      4\n      가평군\n      조종면\n      416\n      274.0\n    \n  \n\n\n\n\n\n\n결측치 확인\n\n결측치가 있는 행 출력해서 따로 처리해야 할 사항이 있는지 확인\ndf.isna().sum() -> 열별로 결측치 개수 출력\n[결측치 있는 열].isna() 들를 |(or)로 묶어 boolean indexing\n\n\n\nCode\npet.isna().sum()\n\n\n시군명          0\n읍면동명         2\n등록동물수(마리)    0\n등록소유자수       1\ndtype: int64\n\n\n\n\nCode\n# 결측치가 분석에 큰 영향을 주지 않아 그대로 남김\npet[pet['읍면동명'].isna() | pet['등록소유자수'].isna()]\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      106\n      군포시\n      NaN\n      15480\n      12226.0\n    \n    \n      537\n      의정부시\n      NaN\n      58997\n      NaN\n    \n  \n\n\n\n\n\n\n시군 단위로 분석 범위 제한 groupby\n\n시간이 부족해 읍면동 단위까지 데이터를 정제하고 시각화하기 어려워 시군 단위까지로 분석 범위를 제한함\n지도에 등록반려동물수 마커를 표시하는 지점을 시군청 위치로 정함\n관공서 위경도 파일과 병합하기 위해 시군청명을 만들어 별도의 컬럼으로 붙임\n\n\n\nCode\nprint('전체 읍면동 개수: ', len(pet['읍면동명'].unique()))\n\n\n전체 읍면동 개수:  675\n\n\n\n\nCode\nprint(pet['시군명'].unique())\nprint('시군 개수: ', len(pet['시군명'].unique()))\n\n\n['가평군' '고양시' '과천시' '광명시' '광주시' '구리시' '군포시' '김포시' '남양주시' '동두천시' '부천시' '성남시'\n '수원시' '시흥시' '안산시' '안성시' '안양시' '양주시' '양평군' '여주시' '연천군' '오산시' '용인시' '의왕시'\n '의정부시' '이천시' '파주시' '평택시' '포천시' '하남시' '화성시']\n시군 개수:  31\n\n\n\n시군 단위로 groupby -> 시군별 등록 반려동물 수 합계\n시군별 등록동물수와 등록소유자수 데이터프레임 생성\n아래 관공서 데이터와 병합 위해 reset_index\n\n\n\nCode\npet_group = pet.groupby('시군명')\npet_num = pet_group[['등록동물수(마리)', '등록소유자수']].sum()\npet_num = pet_num.reset_index()\npet_num.head(5)\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n    \n  \n\n\n\n\n\n\n가로 막대그래프 시각화\n\n등록동물수(마리) 기준 내림차순으로 데이터프레임 정렬: df.sort_values(‘열이름’)\n가로 막대그래프: bars = ax.barh(indexes, values)\n막대 그래프 끝에 값 표시: ax.bar_label(bars)\n값에는 1000 단위마다 쉼표 추가: ax.bar_label(bars, labels=[f’{x:,.0f}’ for x in bars.datavalues])\n\n\n\nCode\npet_graph = pet_num.sort_values('등록동물수(마리)')\n\nfig, ax = plt.subplots(figsize=(10,7))\nbarh = ax.barh(pet_graph['시군명'], pet_graph['등록동물수(마리)'])\nax.bar_label(barh, labels=[f'{x:,.0f}' for x in barh.datavalues])\nax.set_xlim(right=130000) # x축 최대값 설정. 설정하지 않으면 부천시 숫자값이 테두리 밖으로 튀어나옴\nplt.show()\n\n\n\n\n\n\nbars 안에는 xy좌표 튜플, 막대 넓이(width, 여기서는 반려동물수), 막대 높이(height, 여기서는 막대두께), angle은 0도 값이 담겨 있다.\n\n\n\nCode\nfor bar in barh:\n    print(bar)\n\n\nRectangle(xy=(0, -0.4), width=2020, height=0.8, angle=0)\nRectangle(xy=(0, 0.6), width=2974, height=0.8, angle=0)\nRectangle(xy=(0, 1.6), width=4017, height=0.8, angle=0)\nRectangle(xy=(0, 2.6), width=5252, height=0.8, angle=0)\nRectangle(xy=(0, 3.6), width=6590, height=0.8, angle=0)\nRectangle(xy=(0, 4.6), width=6998, height=0.8, angle=0)\nRectangle(xy=(0, 5.6), width=7912, height=0.8, angle=0)\nRectangle(xy=(0, 6.6), width=11168, height=0.8, angle=0)\nRectangle(xy=(0, 7.6), width=11848, height=0.8, angle=0)\nRectangle(xy=(0, 8.6), width=12381, height=0.8, angle=0)\nRectangle(xy=(0, 9.6), width=13147, height=0.8, angle=0)\nRectangle(xy=(0, 10.6), width=13291, height=0.8, angle=0)\nRectangle(xy=(0, 11.6), width=14471, height=0.8, angle=0)\nRectangle(xy=(0, 12.6), width=15480, height=0.8, angle=0)\nRectangle(xy=(0, 13.6), width=17634, height=0.8, angle=0)\nRectangle(xy=(0, 14.6), width=19950, height=0.8, angle=0)\nRectangle(xy=(0, 15.6), width=20161, height=0.8, angle=0)\nRectangle(xy=(0, 16.6), width=24057, height=0.8, angle=0)\nRectangle(xy=(0, 17.6), width=29042, height=0.8, angle=0)\nRectangle(xy=(0, 18.6), width=30539, height=0.8, angle=0)\nRectangle(xy=(0, 19.6), width=35644, height=0.8, angle=0)\nRectangle(xy=(0, 20.6), width=42957, height=0.8, angle=0)\nRectangle(xy=(0, 21.6), width=48264, height=0.8, angle=0)\nRectangle(xy=(0, 22.6), width=50227, height=0.8, angle=0)\nRectangle(xy=(0, 23.6), width=55728, height=0.8, angle=0)\nRectangle(xy=(0, 24.6), width=58997, height=0.8, angle=0)\nRectangle(xy=(0, 25.6), width=60468, height=0.8, angle=0)\nRectangle(xy=(0, 26.6), width=65330, height=0.8, angle=0)\nRectangle(xy=(0, 27.6), width=73477, height=0.8, angle=0)\nRectangle(xy=(0, 28.6), width=86158, height=0.8, angle=0)\nRectangle(xy=(0, 29.6), width=113892, height=0.8, angle=0)\n\n\n\n\n세로 막대그래프로 표현\n\n세로 막대그래프일 때는 막대 높이(height)에 반려동물수가 담겨 있고, angle은 0으로 같다.\n\n\n\nCode\npet_graph = pet_num.sort_values('등록동물수(마리)', ascending=False)\nfig, ax = plt.subplots(figsize=(15,7))\nbar = ax.bar(pet_graph['시군명'], pet_graph['등록동물수(마리)'])\nax.bar_label(bar, labels=[f'{x:,.0f}' for x in bar.datavalues]) # 막대그래프 값을 30도로 돌리는 방법은???\nplt.setp(ax.get_xticklabels(), rotation=30) # x출 레이블 30도로 돌리기\nplt.show()"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#필요한-컬럼만-선택",
    "href": "project/2210_pet_choropleth.html#필요한-컬럼만-선택",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "필요한 컬럼만 선택",
    "text": "필요한 컬럼만 선택\n\n\nCode\nprint('전체 컬럼명: ', pet.columns)\n\n\n전체 컬럼명:  Index(['시군명', '읍면동명', '등록동물수(마리)', '(등록주체)시군구등록', '(등록주체)대행업체등록', '(등록주체)기타',\n       '(RFID종류)내장형', '(RFID종류)외장형', '(RFID종류)인식표', '등록품종수', '등록소유자수',\n       '동물소유자당등록동물수', '해당동의등록대행업체수', '데이터기준일자'],\n      dtype='object')\n\n\n\n\nCode\nprint('사용할 컬럼만 골라 데이터프레임에 덮어 씌움')\npet = pet.loc[ :, ['시군명', '읍면동명', '등록동물수(마리)', '등록소유자수']]\npet.head()\n\n\n사용할 컬럼만 골라 데이터프레임에 덮어 씌움\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      읍면동명\n      등록동물수(마리)\n      등록소유자수\n    \n  \n  \n    \n      0\n      가평군\n      가평읍\n      941\n      85.0\n    \n    \n      1\n      가평군\n      북면\n      289\n      185.0\n    \n    \n      2\n      가평군\n      상면\n      399\n      243.0\n    \n    \n      3\n      가평군\n      설악면\n      1111\n      625.0\n    \n    \n      4\n      가평군\n      조종면\n      416\n      274.0"
  },
  {
    "objectID": "blog/posts/22-10-31.html#to-do",
    "href": "blog/posts/22-10-31.html#to-do",
    "title": "22-10-31(월)",
    "section": "to do",
    "text": "to do\n\n알고리즘 3문제 풀기\n이것이 코딩 테스트다 10장\nAnki에 빅분기 실기 단답형 입력\n미니 프로젝트 정리\nQuarto 설명서 읽기"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#관공서-위경도-추가",
    "href": "project/2210_pet_choropleth.html#관공서-위경도-추가",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "관공서 위경도 추가",
    "text": "관공서 위경도 추가\n\n지도의 시군청사 위치에 반려동물 숫자를 표시하기로 함.\n그러기 위해서는 시군청사 위도, 경도 데이터를 기존 데이터프레임 기준으로 병합해야 함.\ncsv 파일에 위경도 데이터가 없는 곳은 다울 주소변환 사이트에서 가져옴\n\n\n\nCode\ngov = pd.read_csv('data/경기도청사및출장소현황.csv')\ngov.head(3)\n\n\n\n\n\n\n  \n    \n      \n      집계일자\n      시군명\n      구분명\n      전화번호안내\n      소재지우편번호\n      소재지도로명주소\n      소재지지번주소\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      0\n      2022-05-06\n      광명시\n      철산2동\n      02-2680-6609\n      14215\n      경기도 광명시 시청로 61\n      경기도 광명시 철산동 160-4번지\n      37.484689\n      126.866622\n    \n    \n      1\n      2022-05-06\n      광명시\n      일직동\n      02-2680-5800\n      14345\n      경기도 광명시 양지로 19 6층\n      경기도 광명시 일직동 512-3번지 6층\n      37.418938\n      126.882693\n    \n    \n      2\n      2022-04-16\n      오산시\n      남촌동행정복지센터\n      031-8036-6260\n      18119\n      경기도 오산시 청학로 55-5 (청학동)\n      경기도 오산시 청학동 16-6\n      37.154587\n      127.063455\n    \n  \n\n\n\n\n\n반려동물 데이터프레임과 left join\n\n기존 pet_num_si 데이터프레임과 위경도가 있는 gov 데이터프레임을 left join\njoin 기준 열의 데이터를 맞추기 위해 시군명 뒤에 ‘청’ 단어를 붙임\n\n\n\nCode\npet_num['관공서'] = pet_num['시군명'] + '청'\n\n\n\n기존 데이터프레임 기준으로 left join 후 컬럼명 확인\n\n\n\nCode\ntmp = pet_num.merge(gov, how='left', left_on='관공서', right_on='구분명')\ntmp.columns\n\n\nIndex(['시군명_x', '등록동물수(마리)', '등록소유자수', '관공서', '집계일자', '시군명_y', '구분명', '전화번호안내',\n       '소재지우편번호', '소재지도로명주소', '소재지지번주소', 'WGS84위도', 'WGS84경도'],\n      dtype='object')\n\n\n\n필요한 컬럼만 뽑아서 기존 데이터프레임을 덮어씀\n\n\n\nCode\npet_num_si = tmp.loc[:, ['시군명_x', '등록동물수(마리)', '등록소유자수', '관공서', 'WGS84위도', 'WGS84경도']]\npet_num_si.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명_x\n      등록동물수(마리)\n      등록소유자수\n      관공서\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n    \n  \n\n\n\n\n\n다시 결측치 확인 -> 위, 경도에 결측치 존재\n\n\n\nCode\npet_num_si.isna().sum()\n\n\n시군명_x        0\n등록동물수(마리)    0\n등록소유자수       0\n관공서          0\nWGS84위도      3\nWGS84경도      3\ndtype: int64\n\n\n\n위도, 경도가 없는 행만 출력\n\n\n\nCode\npet_num_si[ (pet_num_si['WGS84위도'].isna()) | (pet_num_si['WGS84경도'].isna()) ]\n\n\n\n\n\n\n  \n    \n      \n      시군명_x\n      등록동물수(마리)\n      등록소유자수\n      관공서\n      WGS84위도\n      WGS84경도\n    \n  \n  \n    \n      8\n      남양주시\n      42957\n      31542.0\n      남양주시청\n      NaN\n      NaN\n    \n    \n      10\n      부천시\n      113892\n      86532.0\n      부천시청\n      NaN\n      NaN\n    \n    \n      30\n      화성시\n      48264\n      35496.0\n      화성시청\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n다올 주소변환 사이트에서 위경도를 가져와 입력함\n\n\n\nCode\npet_num_si.iloc[8, [4, 5]] = 37.6366920245, 127.2174958647  # 남양주1청사\npet_num_si.iloc[10, [4, 5]] = 37.5029019, 126.765889 # 부천시청\npet_num_si.iloc[30, [4, 5]] = 37.1994150, 126.831523  # 화성시청\n\n\n\n다시 결측치 확인 -> 없음\n\n\n\nCode\npet_num_si.isna().sum()\n\n\n시군명_x        0\n등록동물수(마리)    0\n등록소유자수       0\n관공서          0\nWGS84위도      0\nWGS84경도      0\ndtype: int64\n\n\n\n\n사용하기 편하게 열이름(컬럼명) 바꾸기\n\n\nCode\npet_num_si = pet_num_si.rename(columns = \n                               {'시군명_x':'시군명', \n                                '등록동물수(마리)':'등록동물수', \n                                'WGS84위도':'위도', \n                                'WGS84경도':'경도'})\npet_num_si.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084"
  },
  {
    "objectID": "project/2210_pet_choropleth.html#최종-데이터프레임-csv-파일로-저장",
    "href": "project/2210_pet_choropleth.html#최종-데이터프레임-csv-파일로-저장",
    "title": "경기도 지역 내 등록반려동물수 코로플레스 맵",
    "section": "최종 데이터프레임 csv 파일로 저장",
    "text": "최종 데이터프레임 csv 파일로 저장\n\n\nCode\npet_man.to_csv('pet_man.csv', encoding='utf-8-sig')"
  },
  {
    "objectID": "review/visualization/folium.html",
    "href": "review/visualization/folium.html",
    "title": "folium 기본 지식 공유",
    "section": "",
    "text": "공식 문서\nconda install folium -c conda-forge <- 아나콘다 사용자 추천\n또는 pip install folium"
  },
  {
    "objectID": "review/visualization/folium.html#일단-지도를-띄워보자",
    "href": "review/visualization/folium.html#일단-지도를-띄워보자",
    "title": "folium 기본 지식 공유",
    "section": "일단 지도를 띄워보자",
    "text": "일단 지도를 띄워보자\n\n\nCode\nimport folium\n\nm = folium.Map()\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "review/visualization/folium.html#내가-있는-위치를-띄워보자",
    "href": "review/visualization/folium.html#내가-있는-위치를-띄워보자",
    "title": "folium 기본 지식 공유",
    "section": "내가 있는 위치를 띄워보자",
    "text": "내가 있는 위치를 띄워보자\n위도, 경도 구하기\n\n다른 나라: 구글맵스에서 우측 버튼으로 클릭하면 보임\n우리나라: 구글어스 주소창. geoplaner.com\n주소 -> 위경도: 다울주소전환서비스\n\n지도 표시 옵션\n\nlocation = [위도, 경도]\nwidth, height 기본값 100%. pixel 단위로 입력 가능\nzoom_start 기본값 10, 0 ~ 18\n\n\n\nCode\nm = folium.Map(location=[37.46854308,126.88626333], zoom_start=15, width=1024, height=600)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "review/visualization/folium.html#내가-있는-위치에-마커-표시하기",
    "href": "review/visualization/folium.html#내가-있는-위치에-마커-표시하기",
    "title": "folium 기본 지식 공유",
    "section": "내가 있는 위치에 마커 표시하기",
    "text": "내가 있는 위치에 마커 표시하기\n\n\nCode\nm = folium.Map(location=[37.46854308,126.88626333], zoom_start=15)\n\nfolium.Marker([37.46854308,126.88626333]).add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n마커 옵션\nMarker(location=None, popup=None, tooltip=None, icon=None, draggable=False, **kwargs)\n\npopup: 마커 이름. 클릭하면 나타남. html 태그 사용 가능\ntooltip: 마우스를 올렸을 때 나타나는 문자열. html 태그 사용 가능\nicon: 아이콘 모양, 색상. prefix=‘fa’ 설정하면 fontawesome의 아이콘 사용할 수 있음\ndraggable: True -> 마커를 움직일 수 있음\n\n\n\nCode\nm = folium.Map(location=[37.46854308,126.88626333], zoom_start=15)\n\nfolium.Marker([37.46854308,126.88626333], icon=folium.Icon(color='red', icon='car', prefix='fa'), popup='<h1>독산</h1>', tooltip='빅데이터반', draggable=True).add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n\n\n마커 여러 개 추가하기\n\n\nCode\nm = folium.Map(location=[37.46854308,126.88626333], zoom_start=10)\n\nfolium.Marker([37.46854308,126.88626333], icon=folium.Icon(color='red', icon='car', prefix='fa'), popup='<h1>독산</h1>', tooltip='독산').add_to(m)\nfolium.Marker([37.55277,126.98969], icon=folium.Icon(color='red', icon='home', prefix='fa'), tooltip='남산').add_to(m)\nfolium.Marker([37.57101,126.89623], icon=folium.Icon(color='red', icon='car', prefix='fa'), tooltip='마포').add_to(m)\nfolium.Marker([37.50721,126.76684], icon=folium.Icon(color='red', icon='car', prefix='fa'), tooltip='부천').add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "review/visualization/folium.html#원-모양-마커-그리기",
    "href": "review/visualization/folium.html#원-모양-마커-그리기",
    "title": "folium 기본 지식 공유",
    "section": "원 모양 마커 그리기",
    "text": "원 모양 마커 그리기\n\nCircle(location=None, radius=50, popup=None, tooltip=None, **kwargs)¶\n\n\n\nCode\nm = folium.Map(location=[37.46854308,126.88626333], zoom_start=10)\n\nfolium.CircleMarker([37.46854308,126.88626333], radius=10, popup='<h1>독산</h1>', tooltip='10').add_to(m)\nfolium.CircleMarker([37.55277,126.98969], radius=30, tooltip='30').add_to(m)\nfolium.CircleMarker([37.57101,126.89623], radius=50, tooltip='50').add_to(m)\nfolium.CircleMarker([37.50721,126.76684], radius=70, tooltip='70').add_to(m)\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "review/visualization/folium.html#표시할-마커가-100개라면-어떻게-할까",
    "href": "review/visualization/folium.html#표시할-마커가-100개라면-어떻게-할까",
    "title": "folium 기본 지식 공유",
    "section": "표시할 마커가 100개라면 어떻게 할까?",
    "text": "표시할 마커가 100개라면 어떻게 할까?\n\n데이터프레임에 위경도를 입력한 후 for문을 이용해 마커 찍기\n\n\n\nCode\nimport pandas as pd\n\ndf = pd.read_csv('data/pet_man.csv')\ndf.head()\n\n\n\n\n\n\n  \n    \n      \n      시군명\n      등록동물수\n      등록소유자수\n      관공서\n      위도\n      경도\n      총인구수\n      1000명당마리수\n      1소유자당마리수\n      평균연령\n      남자평균연령\n      여자평균연령\n    \n  \n  \n    \n      0\n      가평군\n      4017\n      2006.0\n      가평군청\n      37.831318\n      127.509706\n      62168\n      64.62\n      2.00\n      50.3\n      49.1\n      51.6\n    \n    \n      1\n      고양시\n      73477\n      54580.0\n      고양시청\n      37.658422\n      126.831964\n      1079277\n      68.08\n      1.35\n      42.9\n      42.0\n      43.9\n    \n    \n      2\n      과천시\n      2974\n      2325.0\n      과천시청\n      37.429812\n      126.986963\n      78301\n      37.98\n      1.28\n      41.5\n      40.4\n      42.5\n    \n    \n      3\n      광명시\n      20161\n      15698.0\n      광명시청\n      37.479097\n      126.864846\n      290756\n      69.34\n      1.28\n      42.7\n      41.6\n      43.8\n    \n    \n      4\n      광주시\n      29042\n      19368.0\n      광주시청\n      37.429433\n      127.255084\n      388893\n      74.68\n      1.50\n      42.6\n      42.0\n      43.3\n    \n  \n\n\n\n\n\n관공서 위치에 마커를 달고 툴팁에 시군명과 총인구수를 표시하자.\n\n\nCode\nm = folium.Map(\n    location = [37.528043, 126.980238],\n    zoom_start = 8)\n\nlat = list(df['위도'])\nlong = list(df['경도'])\nsi = list(df['시군명'])\npopulation = list(df['총인구수'])\n\nfor i in range(len(lat)):\n    folium.Marker(\n            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>총인구수: {str(population[i])}',\n            icon=folium.Icon(color='red')\n            ).add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "review/visualization/folium.html#코로플레스-맵-만들기",
    "href": "review/visualization/folium.html#코로플레스-맵-만들기",
    "title": "folium 기본 지식 공유",
    "section": "코로플레스 맵 만들기",
    "text": "코로플레스 맵 만들기\n\n준비물1: 행정구역경계 정보가 담긴 geojson 파일\n준비물2: 지도에 표시할 데이터(행정구역명, 숫자)\n\n중요!! 데이터의 행정구역명과 geojson 파일의 행정구역명이 같아야 함\ngeojson 파일 받은 곳: 대한민국 행정동 경계 파일\ngeojson 데이터에 관한 설명\n\ngeojson 파일 구조\n{\n\"type\": \"FeatureCollection\",\n\"name\": \"20220701\",\n\"crs\": { \"type\": \"name\", \"properties\": { \"name\": \"urn:ogc:def:crs:OGC:1.3:CRS84\" } },\n\"features\": [\n{ \"type\": \"Feature\", \"properties\": { \"OBJECTID\": 1, \"adm_nm\": \"서울특별시 종로구 사직동\", \"adm_cd\": \"1101053\", \"adm_cd2\": \"1111053000\", \"sgg\": \"11110\", \"sido\": \"11\", \"sidonm\": \"서울특별시\", \"sggnm\": \"종로구\", \"adm_cd8\": \"11010530\" }, \"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [ [ 126.976888842748167, 37.575650779448786 ], [ 126.977034498877501, 37.569194530054553 ], [ 126.975974728212492, 37.569336299425764 ], [ 126.975374709912543, 37.569315567021562 ], [ 126.974331935623255, 37.569261800517531 ], [ 126.969048370018541, 37.568194417708334 ], [ 126.968544936033837, 37.568427679612761 ], [ 126.966649959821197, 37.569491655206583 ], [ 126.966281750244846, 37.569700734798701 ], [ 126.966097327080405, 37.569856509723699 ], [ 126.965728529225771, 37.570183936115114 ], [ 126.965926998221278, 37.570318805686199 ], [ 126.96601094018429, 37.571548395577466 ], [ 126.963659220521961, 37.575174660660373 ], [ 126.963086004345101, 37.576485920015543 ], [ 126.962840990511978, 37.57666158609274 ], [ 126.962810410472628, 37.579448809656775 ], [ 126.967424315843317, 37.579601537124489 ], [ 126.967421763026508, 37.579263521441646 ], [ 126.967430060184597, 37.579192577998604 ], [ 126.967457090095607, 37.578975250585437 ], [ 126.968066046996256, 37.578246780467872 ], [ 126.968955116954774, 37.577935262340283 ], [ 126.969212842969057, 37.577935299309388 ], [ 126.969414538865792, 37.578121124142164 ], [ 126.969664426694706, 37.578531136682209 ], [ 126.969667219148718, 37.578736205134931 ], [ 126.969668773533087, 37.578992879009881 ], [ 126.969669499103631, 37.57911252674959 ], [ 126.969904573616262, 37.579301753628734 ], [ 126.97135197544759, 37.57951327793981 ], [ 126.973819257844539, 37.579372140302631 ], [ 126.973917363383421, 37.578487073041011 ], [ 126.973939619980882, 37.578240429978088 ], [ 126.974331538357575, 37.575749906299862 ], [ 126.975803789978045, 37.575649468824203 ], [ 126.976888842748167, 37.575650779448786 ] ] ] ] } },\n]}\n\n\nCode\nimport json\n\nm = folium.Map(\n    location = [37.528043, 126.980238],\n    zoom_start = 8)\n\nlat = list(df['위도'])\nlong = list(df['경도'])\nname = list(df['등록동물수'])\nsi = list(df['시군명'])\n\nfor i in range(len(lat)):\n    folium.Marker(\n            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>반려동물수: {str(name[i])}',\n            icon=folium.Icon(color='red')\n            ).add_to(m)\n\n    \ngeo_data = json.load(open('data/HangJeongDong_ver20220701.geojson'))\n\nfolium.Choropleth(\n    geo_data = geo_data,\n    data = df,\n    columns= ['시군명', '등록동물수'],\n    key_on = 'feature.properties.sggnm',\n    fill_color = 'Reds',\n    fill_opacity = 0.7,\n    line_opacity = 0.4,\n    legend_name = '시군별 등록 반려동물수(마리))'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook\n\n\n위에서 까맣게 표시되는 이유는 geojson 파일에 있는 행정구역명칭이 데이터프레임의 ‘시군명’ 컬럼에는 없기 때문이다.\n따라서 geojson 파일을 편집하여 데이터프레임에 있는 ’시군명’만 남기고 삭제한다.\n그렇게 편집한 파일이 ’kyeong.geojson’이다. 이 파일을 불러와서 다시 지도를 띄우자\n\n\nCode\nimport json\n\nm = folium.Map(\n    location = [37.528043, 126.980238],\n    zoom_start = 8)\n\nlat = list(df['위도'])\nlong = list(df['경도'])\nname = list(df['등록동물수'])\nsi = list(df['시군명'])\n\nfor i in range(len(lat)):\n    folium.Marker(\n            [lat[i], long[i]], tooltip=f'<b>{si[i]}</b><br>반려동물수: {str(name[i])}',\n            icon=folium.Icon(color='red')\n            ).add_to(m)\n\n    \ngeo_data = json.load(open('data/kyeong.geojson'))\n\nfolium.Choropleth(\n    geo_data = geo_data,\n    data = df,\n    columns= ['시군명', '등록동물수'],\n    key_on = 'feature.properties.sggnm',\n    fill_color = 'Reds',\n    fill_opacity = 0.7,\n    line_opacity = 0.4,\n    legend_name = '시군별 등록 반려동물수(마리))'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm\n\n\nMake this Notebook Trusted to load map: File -> Trust Notebook"
  },
  {
    "objectID": "review/visualization/pyplot.html",
    "href": "review/visualization/pyplot.html",
    "title": "pyplot",
    "section": "",
    "text": "권철민, 파이썬 머신러닝 완벽 가이드\nmatplotlib tutorial\nIntroduction to Plotting in Python Using Matplotlib"
  },
  {
    "objectID": "review/visualization/pyplot.html#주피터-노트북에서-한글-표시-설정",
    "href": "review/visualization/pyplot.html#주피터-노트북에서-한글-표시-설정",
    "title": "pyplot",
    "section": "주피터 노트북에서 한글 표시 설정",
    "text": "주피터 노트북에서 한글 표시 설정"
  },
  {
    "objectID": "review/visualization/pyplot.html#figure-axes-객체",
    "href": "review/visualization/pyplot.html#figure-axes-객체",
    "title": "pyplot",
    "section": "Figure, Axes 객체",
    "text": "Figure, Axes 객체\n\nFigure 객체: 그림 그리기 위한 캔버스 역할. 그림판 크기 조절, 그림을 최종적으로 화면에 나타내는 역할 수행. 실제 그림을 그리지는 않음\nAxes 객체: 실제 그림을 그리는 메서드 보유. X축, Y축, 타이틀, 범례 등의 속성 설정\n\n\n\n\nFigure, Axis\n\n\nFigure 객체\n\n전체 그림판의 크기를 조절: plt.figure(figsize=(가로길이, 세로길이)) 길이 단위는 인치 -> figure 객체 반환\n그림판 배경색 설정: plt.figure(facecolor=‘색상명’) -> Axes 영역 제외\n\n\n\n\n배경색상 설정\n\n\nAxes 객체\nplt.axes() -> 현재 사용중인 Axes 객체 반환(AxesSubplot)\nplt.subplots() -> Figure와 Axes 객체를 함께 반환\nfig, ax = plt.subplots()\nprint('fig type', type(fig), '\\nax type', type(ax))\n# fig type <class 'matplotlib.figure.Figure'> \n# ax type <class 'matplotlib.axes._subplots.AxesSubplot'>\n\nAxes 객체를 이용해 선 그래프 그리기: ax.plot([1, 2, 3], [2, 4, 6]) = pyplot 모듈의 plt.plot()\nAxes 객체를 이용해 타이틀 설정: ax.title(‘title’) = pyplot 모듈의 plt.title()"
  },
  {
    "objectID": "review/visualization/pyplot.html#subplots-만들기",
    "href": "review/visualization/pyplot.html#subplots-만들기",
    "title": "pyplot",
    "section": "subplots 만들기",
    "text": "subplots 만들기\n\nfig, (ax1, ax2, …) = plt.subplots(nrows = n, ncols = m, figsize = (x, y))\nax의 개수는 n * m"
  },
  {
    "objectID": "review/visualization/pyplot.html#선-그래프",
    "href": "review/visualization/pyplot.html#선-그래프",
    "title": "pyplot",
    "section": "선 그래프",
    "text": "선 그래프\n\n공식 문서\nplt.plot( x_value, y_value, color=, marker=, linestyle=, linewidth=, markersize=)\n축 명칭: plt.xlabel(‘x축 이름’), plt.ylabel(‘y축 이름’)\n축 눈금값 등: plt.xticks(ticks=np.arange(a, b, c), rotation=n) -> 최솟값, 최댓값, 간격"
  },
  {
    "objectID": "review/de.html",
    "href": "review/de.html",
    "title": "개발 환경",
    "section": "",
    "text": "Oct 14, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "review/pkm.html",
    "href": "review/pkm.html",
    "title": "지식 관리",
    "section": "",
    "text": "Oct 12, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 17, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 30, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 9, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 23, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 26, 2022\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 12, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOct 6, 2022\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "review/pkm/gitignore_not_working.html",
    "href": "review/pkm/gitignore_not_working.html",
    "title": "gitignore가 적용 안 될 때",
    "section": "",
    "text": "원인: 캐시\n해결: 캐시를 삭제한다. $ git rm -r --cached ."
  },
  {
    "objectID": "review/pkm/ananconda_settings_in_window.html",
    "href": "review/pkm/ananconda_settings_in_window.html",
    "title": "ananconda settings in window",
    "section": "",
    "text": "윈도우 키 >>> 설정 >>> 시스템 >>> 정보 >>> 고급 시스템 설정 >>> ‘환경변수’ 버튼 클릭\n상단의 사용자 변수 블록 >>> 변수 열의 Path 선택 >>> ‘편집’ 버튼 클릭\n‘새로만들기’ 버튼 클릭 후 아래 경로 입력\n\nC: C: C:\n주의!!! 시스템에 따라 설치 경로가 다를 수 있으니, ananconda 설치 과정에서 보여지는 경로를 잘 기억하자.\n\n‘확인’ 버튼을 누르고 나온다."
  },
  {
    "objectID": "review/pkm/ananconda_settings_in_window.html#powershell에서-작업",
    "href": "review/pkm/ananconda_settings_in_window.html#powershell에서-작업",
    "title": "ananconda settings in window",
    "section": "powershell에서 작업",
    "text": "powershell에서 작업\n\n윈도우 기본 파워셀에서 작업하면 conda 가상환경이 실행되지 않았다.\n아나콘다파워셀을 실행시켜서 작업한다.\nvscode를 실행할 때도 아나콘다파워셀에서 coda .을 입력해 실행해야 터미널에서 아나콘다파워셀이 뜬다."
  },
  {
    "objectID": "review/pkm/PATH.html",
    "href": "review/pkm/PATH.html",
    "title": "리눅스 PATH",
    "section": "",
    "text": "의미: OS가 특정 프로그램을 찾기 위해 사용하는 디렉토리들의 집합\n현재 PATH에 잡혀있는 디렉토리 보기: $ echo $PATH\n특정 폴더(eg. ~/bin)를 PATH에 추가하기: $ PATH=~/bin:$PATH or $ export $PATH=/bin\n특정 폴더를 영구적으로 PATH에 포함하려면 ~/.bashrc에 추가"
  },
  {
    "objectID": "review/pkm/PATH.html#기능",
    "href": "review/pkm/PATH.html#기능",
    "title": "리눅스 PATH",
    "section": "기능",
    "text": "기능\n\n파일을 $PATH에 지정한 경로 중 한 곳에 놓으면 어느 경로에서든 실행할 수 있다.\n대부분 프로그램은 /usr/local/bin/에 설치된다.\nPATH 경로에 놓인 프로그램은 $ which 명령으로 위치를 찾을 수 있다."
  },
  {
    "objectID": "review/pkm/Material_for_MkDocs.html",
    "href": "review/pkm/Material_for_MkDocs.html",
    "title": "Material for MkDocs",
    "section": "",
    "text": "conda 가상환경 만들기: $ conda create -n mkdocs\n가상환경 들어가기: $ conda activate mkdocs\n설치: $ pip install mkdocs-material"
  },
  {
    "objectID": "review/pkm/Material_for_MkDocs.html#사이트-만들기",
    "href": "review/pkm/Material_for_MkDocs.html#사이트-만들기",
    "title": "Material for MkDocs",
    "section": "사이트 만들기",
    "text": "사이트 만들기\n$ mkdir 폴더이름 : 사이트로 구성할 폴더 만들기\n$ cd 폴더이름\n$ mkdocs new . : 사이트 기본 파일 생성. 아래와 같은 폴더와 파일을 만든다.\n.\n├─ docs/\n│  └─ index.md\n└─ mkdocs.yml"
  },
  {
    "objectID": "review/pkm/Material_for_MkDocs.html#mkdocs.yml-설정",
    "href": "review/pkm/Material_for_MkDocs.html#mkdocs.yml-설정",
    "title": "Material for MkDocs",
    "section": "mkdocs.yml 설정",
    "text": "mkdocs.yml 설정\nvscode에 Yaml extension 설치\nsettings >>> yaml.schemas 아래 코드 추가\n{\n  \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  }\n}"
  },
  {
    "objectID": "review/pkm/Material_for_MkDocs.html#사이트-미리보기",
    "href": "review/pkm/Material_for_MkDocs.html#사이트-미리보기",
    "title": "Material for MkDocs",
    "section": "사이트 미리보기",
    "text": "사이트 미리보기\n$ mkdocs serve\nINFO - Option search.lang ‘kr’ is not supported, falling back to ‘en’ ERROR - Config value: ‘plugins’. Error: The “roamlinks” plugin is not installed Aborted with 1 Configuration Errors!\n=> 해당 코드 모두 주석처리한 뒤 실행하니 일단 뜨기는 함"
  },
  {
    "objectID": "review/pkm/Material_for_MkDocs.html#사이트-만들기-1",
    "href": "review/pkm/Material_for_MkDocs.html#사이트-만들기-1",
    "title": "Material for MkDocs",
    "section": "사이트 만들기",
    "text": "사이트 만들기\n\ngithub actions 이용하기(선택)\n설명서\n\n\n로컬에서 build한 후에 올리기\n$ mkdocs build\n=> site/ 폴더가 만들어진 뒤 그 안에 변환된 html 파일을 넣음 => site/ 폴더를 깃허브에 올리면 됨."
  },
  {
    "objectID": "review/pkm/Material_for_MkDocs.html#기타-설정-방법",
    "href": "review/pkm/Material_for_MkDocs.html#기타-설정-방법",
    "title": "Material for MkDocs",
    "section": "기타 설정 방법",
    "text": "기타 설정 방법\n\n링크 문서 새 창으로 열기"
  },
  {
    "objectID": "review/pkm/vscode_extension.html",
    "href": "review/pkm/vscode_extension.html",
    "title": "vscode extension",
    "section": "",
    "text": "캡처한 이미지를 문서에 붙여넣을 때 경로와 파일명 자동 작성됨.\n\n일반 붙여넣기 단축키 말고 vscode 안에서 설정한 단축키로 붙여넣어야 한다.\n\n설정 방법:\n\nPaste Image: Base Path -> 문서 파일에 입력할 경로 -> 이미지가 저장된 위치를 현재 파일 기준으로 상대경로로 입력하려면 ${currentFileDir}를 입력하고, 프로젝트 루트부터 절대경로로 입력하려면 ${projectRoot}를 입력한다.\nPaste Image: Path -> 이미지 파일이 저장될 위치  -> 모든 이미지를 한 폴더 저장하려면 ${projectRoot}/docs/images처럼 프로젝트 루트부터 경로를 입력한다. 현재 문서 파일과 같은 위치에 이미지 파일을 저장하려면 ${currentFileDir}를 입력하고, 현재 문서 파일 아래에 images 폴더를 만들어 저장하려면 ${currentFileDir}/images를 입력한다.\n\n \n\n\n\nxclip 클론하고 그 폴더를 PATH에 포함\n\n> cd ~/bin\n> git clone https://github.com/Konfekt/win-bash-xclip-xsel\n> cp xclip ~/bin"
  },
  {
    "objectID": "review/pkm/obsidian to github.html",
    "href": "review/pkm/obsidian to github.html",
    "title": "Obsidian to github pages",
    "section": "",
    "text": "Pasted image 20221006093140.png\n\n\n나의 레포지토리에 가서 깃헙 페이지로 설정\n\n\n\nPasted image 20221006092242.png\n\n\n이 레포지토리를 pc로 clone 한다.\ndocs 폴더를 옵시디언 볼트로 지정한다.\ndocs 폴더 안에 공개하려고 하는 노트를 넣는다.\ngit commit, git push 하면 Github actions가 웹페이지를 만든다.\nActions 버튼을 누르면 변환 과정을 확인할 수 있다.\n깃헙 주소로 가면 웹페이지 볼 수 있다."
  },
  {
    "objectID": "review/pkm/vundle.html",
    "href": "review/pkm/vundle.html",
    "title": "VI Vundle",
    "section": "",
    "text": "Vundle 홈페이지"
  },
  {
    "objectID": "review/pkm/vundle.html#vundle-설치",
    "href": "review/pkm/vundle.html#vundle-설치",
    "title": "VI Vundle",
    "section": "Vundle 설치",
    "text": "Vundle 설치\ngit clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim"
  },
  {
    "objectID": "review/pkm/vundle.html#설정-아래-코드를-.vimrc-파일의-맨-위에-추가한다",
    "href": "review/pkm/vundle.html#설정-아래-코드를-.vimrc-파일의-맨-위에-추가한다",
    "title": "VI Vundle",
    "section": "설정: 아래 코드를 .vimrc 파일의 맨 위에 추가한다",
    "text": "설정: 아래 코드를 .vimrc 파일의 맨 위에 추가한다\nset nocompatible              \" be iMproved, required\nfiletype off                  \" required\n\n\" set the runtime path to include Vundle and initialize\nset rtp+=~/.vim/bundle/Vundle.vim\ncall vundle#begin()\n\" alternatively, pass a path where Vundle should install plugins\n\"call vundle#begin('~/some/path/here')\n\n\" let Vundle manage Vundle, required\nPlugin 'VundleVim/Vundle.vim'\n\n\" The following are examples of different formats supported.\n\" Keep Plugin commands between vundle#begin/end.\n\" plugin on GitHub repo\nPlugin 'tpope/vim-fugitive'\n\" plugin from http://vim-scripts.org/vim/scripts.html\n\" Plugin 'L9'\n\" Git plugin not hosted on GitHub\nPlugin 'git://git.wincent.com/command-t.git'\n\" git repos on your local machine (i.e. when working on your own plugin)\nPlugin 'file:///home/playdata/path/to/plugin'\n\" The sparkup vim script is in a subdirectory of this repo called vim.\n\" Pass the path to set the runtimepath properly.\nPlugin 'rstacruz/sparkup', {'rtp': 'vim/'}\n\" Install L9 and avoid a Naming conflict if you've already installed a\n\" different version somewhere else.\n\" Plugin 'ascenator/L9', {'name': 'newL9'}\n\n\" All of your Plugins must be added before the following line\ncall vundle#end()            \" required\nfiletype plugin indent on    \" required\n\" To ignore plugin indent changes, instead use:\n\"filetype plugin on\n\"\n\" Brief help\n\" :PluginList       - lists configured plugins\n\" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate\n\" :PluginSearch foo - searches for foo; append `!` to refresh local cache\n\" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal\n\"\n\" see :h vundle for more details or wiki for FAQ\n\" Put your non-Plugin stuff after this line\ncall vundle#begin()과 call vundle#end() 사이에 설치할 Plugin을 지정한다."
  },
  {
    "objectID": "review/pkm/vundle.html#플러그인-설치-vim-실행-후-plugininstall",
    "href": "review/pkm/vundle.html#플러그인-설치-vim-실행-후-plugininstall",
    "title": "VI Vundle",
    "section": "플러그인 설치: vim 실행 후 :PluginInstall",
    "text": "플러그인 설치: vim 실행 후 :PluginInstall\n에러 발생: Plugin ‘file:///home/playdata/path/to/plugin’"
  },
  {
    "objectID": "review/pkm/vundle.html#추가한-플러그인",
    "href": "review/pkm/vundle.html#추가한-플러그인",
    "title": "VI Vundle",
    "section": "추가한 플러그인",
    "text": "추가한 플러그인\n\nnerdtree: .vimrc의 플러그인 정의 영역에 Plugin ‘scrooloose/nerdtree’ 추가 -> 단축키 설정(.vimrc에 추가) nmap nerd :NERDTreeToggle -> vi 명령모드에서 ’nerd’를 키보드로 치면 실행됨"
  },
  {
    "objectID": "review/pkm/git.html",
    "href": "review/pkm/git.html",
    "title": "git",
    "section": "",
    "text": "기존 환경 설정 파일 삭제: git config --unset 이메일 주소\n이메일 주소는 git이 개발자를 구별하는 고유의 키 값으로 사용: git config user.email \"이메일 주소\"\n환경설정 파일 보기: 먼저 ls .git 명령으로 config 파일 존재 유무 확인 >>> vi .git/config 글로벌 사용자 등록을 했다면 vi ~/.gitconfig"
  },
  {
    "objectID": "review/pkm/git.html#로그",
    "href": "review/pkm/git.html#로그",
    "title": "git",
    "section": "로그",
    "text": "로그\n\n로그 보기 명령: git log --graph --pretty=oneline >>> show-grpah 별칭으로 등록: git config --global alias.show-graph 'log --graph --pretty=oneline'"
  },
  {
    "objectID": "review/pkm/git.html#기타",
    "href": "review/pkm/git.html#기타",
    "title": "git",
    "section": "기타",
    "text": "기타\n\ngitignore가 적용 안 될 때"
  },
  {
    "objectID": "review/pkm/quarto.html",
    "href": "review/pkm/quarto.html",
    "title": "quarto",
    "section": "",
    "text": "quarto 홈페이지에서 운영체제에 맞는 파일을 받아 실행\n맥 Homebrew 설치: brew install --cask quarto"
  },
  {
    "objectID": "review/pkm/quarto.html#vscode에서-사용-tutorial",
    "href": "review/pkm/quarto.html#vscode에서-사용-tutorial",
    "title": "quarto",
    "section": "vscode에서 사용 tutorial",
    "text": "vscode에서 사용 tutorial\n공식 문서\n\nvscode에서 quarto vscode extension 설치\n\n\n\n\n익스텐션 설치\n\n\n\nquarto 문서 만들기\n\n\n\n\n새 문서 만들기\n\n\nwalkthrough.qmd 문서가 열린다.\n\nwalkthrough.qmd 파일을 렌더링하여 html 파일로 변환한다.\n\n\n\n\n변환\n\n\n변환하면 같은 폴더에 walkthrough.html 파일과 walkthrough_files 폴더가 만들어진다."
  },
  {
    "objectID": "review/pkm/quarto.html#주피터-노트북-사용-tutorial",
    "href": "review/pkm/quarto.html#주피터-노트북-사용-tutorial",
    "title": "quarto",
    "section": "주피터 노트북 사용 tutorial",
    "text": "주피터 노트북 사용 tutorial\n\nyml 설정\n\n코드 블록 숨기기/보이기 설정\n코드 블록 숨기기/보이기 버튼 우측 상단에 보이게 설정"
  },
  {
    "objectID": "review/pkm/quarto.html#웹사이트-만들기",
    "href": "review/pkm/quarto.html#웹사이트-만들기",
    "title": "quarto",
    "section": "웹사이트 만들기",
    "text": "웹사이트 만들기\n\n공식 문서\n\n==주의할 점!!!== 나는 깃허브에 quarto 리포를 먼저 만들고 로컬에 클론했다. 그래서 Website Project를 선택한 뒤 나타는 창에서 반드시 quarto 폴더의 부모 폴더를 선택해야 한다. 그러고 나서 뜨는 입력 창에 웹사이트의 홈 폴더로 사용할 깃허브 폴더명인 quarto를 입력한다. 그러면 quarto 폴더 안에 아래처럼 _quarto.yml, index.qmd, about.qmd, style.css 파일이 만들어진다.\n\n\n\n폴더명 입력\n\n\n\n미리보기 : 문서 우측 위의 render 버튼 클릭한다. 변경한 후 다시 render 버튼을 눌러야 반영된다.\n최종 html 파일 만들기: 터미널에서 quarto render -> _site 폴더에 html 파일이 만들어진다."
  },
  {
    "objectID": "review/pkm/quarto.html#깃허브-페이지를-호스팅-서버로-사용하기",
    "href": "review/pkm/quarto.html#깃허브-페이지를-호스팅-서버로-사용하기",
    "title": "quarto",
    "section": "깃허브 페이지를 호스팅 서버로 사용하기",
    "text": "깃허브 페이지를 호스팅 서버로 사용하기\n공식 문서\n3가지 방법이 있다.\n\ndocs 폴더에 사이트 문서들을 렌더링하고 깃허브가 docs 폴더를 웹페이지로 출판하도록 설정\nquarto publish 명령으로 직접 웹페이지로 출판\n코드를 깃허브에 올리면 자동으로 깃허브 액션이 렌더링해서 출판하도록 설정\n\n\ndocs 폴더 이용 방법"
  },
  {
    "objectID": "review/pkm/create_vscode_snippets.html",
    "href": "review/pkm/create_vscode_snippets.html",
    "title": "VS Code에서 snippets 만들기",
    "section": "",
    "text": "vscode에서 user snippet(사용자 코드 조각)을 입력할 yml 파일을 연다.\n\n\n\n사용자 코드 조각 구성\n\n\n마크다운 파일에 사용할 코드 조각을 작성할 예정이므로 markdown.json을 선택한다.\n아래와 같이 yaml 양식으로 작성한다.\n\n전체 설정은 중괄호{} 안에 snippet 단위로 입력한다.\n무엇에 관한 코드 조각인지 간결하지만 알기 쉬울만큼 자세하게 이름을 적는다. 아래는 “today’s log”, “python code block” 두 개의 이름을 만들었다.\n각 이름 뒤에 콜론을 붙이고 다시 중괄호를 쓴다. {“today’s log”:{}, “python code block”:{}}. 중괄호 안에 구체적인 설정 사항을 입력한다.\n“prefix”에는 전체 코드의 약자로 사용할 문자열을 입력한다. 아래에서는 tlog와 cpy로 정의했다. tlog는 today’s log를, cpy는 code block python을 줄인 것이다.\n“body”에는 실제로 입력될 문자열을 입력한다. 위의 공식 설명서를 열면 사용할 수 있는 변수 목록과 설명을 볼 수 있다.\n아래와 같이 설정한 뒤 마크다운 문서에서 tlog를 입력하고 ctrl+spacebar를 누르면 body에 정의한 내용대로 입력된다.\n\n{\n  \"today's log\":{\n    \"prefix\": \"tlog\",\n    \"body\": [\n      \"# $TM_FILENAME_BASE($CURRENT_DAY_NAME_SHORT)\",\n      \"created: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE\",\n      \"\\n\\n## \"\n    ]\n  },\n  \"python code block\":{\n    \"prefix\": \"cpy\",\n    \"body\": [\n      \"```python\",\n      \"${1}\",\n      \"```\",\n      \"\"\n    ]\n  }\n}\ncpy 입력 후 ctrl + spacebar를 누른 뒤 엔터를 치면 아래처럼 입력된다.\n커서가 여기에 위치함"
  },
  {
    "objectID": "review/pkm/markdown_link_new_window.html",
    "href": "review/pkm/markdown_link_new_window.html",
    "title": "mkdocs에서 링크된 문서를 새 창으로 열기",
    "section": "",
    "text": "먼저 mkdocs.yml 파일을 수정한다. markdown_extensions 부분에 attr_list를 추가한다.\n\nmarkdown_extensions: \n  - attr_list\n\n마크다운 문서에서 새 창으로 띄울 문서의 링크를 아래처럼 뒤에 {target=_blank}를 추가한다.\n\n[내 홈페이지](https://lazychoi.github.io){target=_blank}"
  },
  {
    "objectID": "review/pkm/obsidian_template.html",
    "href": "review/pkm/obsidian_template.html",
    "title": "Obsidian template 사용",
    "section": "",
    "text": "기본 템플릿 문법\ntemplater plugin 문법"
  },
  {
    "objectID": "review/pkm/obsidian_template.html#기본-template-사용",
    "href": "review/pkm/obsidian_template.html#기본-template-사용",
    "title": "Obsidian template 사용",
    "section": "기본 template 사용",
    "text": "기본 template 사용\n\n환경 설정\n\nSettings >>> Core plugins >>> Templates 활성화\n템플릿 파일 저장할 폴더 만들기. eg. DOCS/templates\n\n\n\n수동으로 템플릿 적용\n\n문서를 만들고\n왼쪽 사이드바에서 “insert template” 아이콘 선택\n삽입할 템플릿 선택(템플릿이 2개 이상인 경우)\n\n\n\n틀정 폴더에 자동으로 템플릿 적용\n\nOptions(톱니 버튼) >>> Template folder location 에 1번에서 만들 폴더 지정\ntemplates 폴더 .gitignore에 추가\ntemplates 폴더에 템플릿으로 사용할 파일 작성\n로그 템플릿 작성 dailylog"
  },
  {
    "objectID": "review/pkm/obsidian_template.html#templater-plugin-사용",
    "href": "review/pkm/obsidian_template.html#templater-plugin-사용",
    "title": "Obsidian template 사용",
    "section": "templater plugin 사용",
    "text": "templater plugin 사용\n\nSettings >>> Community Plugins >>> Templater\nTemplate folder location 지정\nTrigger Templater on new file creation 활성화\n\n\n\n특정 폴더에서 새 노트를 만들 때 적용할 템플릿 파일 지정"
  },
  {
    "objectID": "review/de/wsl2.html",
    "href": "review/de/wsl2.html",
    "title": "wsl2",
    "section": "",
    "text": "wsl에서 윈도우 파일에 접근:\n\n/mnt에 마운트되어 있음 >>> $ cd /mnt/c 명령으로 이동\n$ explorer . 명령으로 윈도우 탐색기를 열어 GUI 화면으로 사용\n\nwsl 저장 위치:\n\nC:\\Users\\사용자명\\AppData\\Local\\Packages\\ 폴더 >>> CanonicalGroupLimited.Ubuntu22.04LTS_79rhkp1fndgsc\\ 처럼 ubuntu 단어가 포함된 폴더 >>> LocalState 안\next4.vhdx라는 이미지 파일로 저장되어 있음\n\nanaconda 설치\njupyter notebook 설정\n$ jupyter notebook --generate-config\nWriting default config to: /home/playdata/.jupyter/jupyter_notebook_config.py\n$ cd .jupyter\n$ vi jupyter_notebook_config.py\n# c.NotebookApp.open_browser = False <– 주석 삭제 후 False로 변경"
  },
  {
    "objectID": "review/de/shell_prompt.html",
    "href": "review/de/shell_prompt.html",
    "title": "shell prompt",
    "section": "",
    "text": "출처: How To Customize Bash Prompt in Linux"
  },
  {
    "objectID": "review/de/shell_prompt.html#bash-prompt-기본값",
    "href": "review/de/shell_prompt.html#bash-prompt-기본값",
    "title": "shell prompt",
    "section": "bash prompt 기본값",
    "text": "bash prompt 기본값\n\neg. (base) aaa@DESKTOP:~$ 또는 aaa@DESKTOP:~$\n의미: (아나콘다 가상환경) 사용자명@호스트명:\n~: 사용자의_루트디렉토리\n$: 일반 사용자 표시\n#: root 사용자 표시"
  },
  {
    "objectID": "review/de/shell_prompt.html#bash-prompt-변경-.bashrc-파일",
    "href": "review/de/shell_prompt.html#bash-prompt-변경-.bashrc-파일",
    "title": "shell prompt",
    "section": "bash prompt 변경: ~/.bashrc 파일",
    "text": "bash prompt 변경: ~/.bashrc 파일\n\n~/.bashrc 파일 변경. 만일을 위해 백업 파일 만들기(~/.bashrc.bak)\n==파일 내용을 변경한 뒤에는 재실행==하여 변경사항 반영: source ~/.bashrc\n\n특정 문자를 프롬프트에 표시\n\n.bashrc 파일 마지막에 PS1=\"MyTestPrompt> \" 추가\n결과: MyTestPrompt>\n\n임시로 프롬프트 변경하기: export command\n\n현재 사용자가 로그아웃할 때까지 유지됨\nMyTestPrompt> export PS1=\"\\u >\"\n결과: aaa >\n\\u: 현재 사용자명을 프롬프트에 표시\n\n사용자명과 도메인명 표시\n\nexport PS1=\"\\u\\H \"\n결과: aaaDESKTOP\n\\H: 전체 hostname 표시\n\n특수문자 표시\n\nexport PS1=\"\\u@\\H :\"\n결과: aaa@DESKTOP :\n프롬프트 끝은 사용자가 입력한 명령과 구분하기 위해 특수문자를 배치하는 게 좋다.\n\n사용자명과 셀이름, 버전 표시\n\nexport PS1=\"\\u@\\s\\v> \"\n결과: aaa@bash5.1>\n\n사용자명과 요일 월 일 표시\n\nexport PS1=\"\\u(\\d)>\n결과: aaa(Fri Oct 07)>\n\n사용자명과 시:분:초 표시\n\nexport PS1=\"\\u(\\t)>\"\n결과: aaa(17:25:07)>\n12시간제로 표시하려면 \\T 사용\n“시간:분”만 표시하려면 \\A 사용\n\n프롬프트의 모든 정보 감추기(디렉토리만 표시)\n\nexport PS1=\"\\W >\"\n결과: ~ >\n\nroot 사용자와 일반 사용자 구분\n\nexport PS1=\"\\W$ \"\n결과: ~$\n~$ sudo su 명령어로 root 사용자로 전환하면 프롬프트가 #으로 바뀜\n# exit 명령어로 로그아웃하면 다시 일반 사용자 프롬프트로 전환됨\n\n글자색 바꾸기\n\nexport PS1=\"\\e[0;32m[\\u: \\W]\\$ \\e[0m\"\n결과: [playdata: ~]$ (초록색)\n\\e[: 색상 지정 시작\n\\e[0m: 색상 지정 끝\n색상코드의 첫 번째 숫자\n\n0 : Normal\n- 1 : Bold (bright)\n- 2 : Dim\n- 4 : Underlined\n\n두 번째 숫자\n\n30 : Black\n31 : Red\n32 : Green\n33 : Brown\n34 : Blue\n35 : Purple\n36 : Cyan\n37 : Light gray"
  },
  {
    "objectID": "review/de/shell_prompt.html#유용한-사이트",
    "href": "review/de/shell_prompt.html#유용한-사이트",
    "title": "shell prompt",
    "section": "유용한 사이트",
    "text": "유용한 사이트\n\n기타 다른 명령어 보기\nPS1 명령어 생성기 : 드래그 앤 드랍으로 .bashrc에 입력할 속성값을 쉽게 만들 수 있다."
  },
  {
    "objectID": "review/visualization.html",
    "href": "review/visualization.html",
    "title": "시각화",
    "section": "",
    "text": "lazychoi\n\n\nOct 31, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlazychoi\n\n\nOct 25, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  }
]